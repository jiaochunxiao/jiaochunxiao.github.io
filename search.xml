<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>如何得到你想要的table？</title>
    <url>/2016/01/04/20160104/</url>
    <content><![CDATA[<p>关于table，你也许会吐槽：table元素会使浏览器解析页面速读变慢，延迟页面渲染速度等等。但是呢，吐槽归吐槽，table在数据表格的展现中，仍是最合理的方式之一。尤其在MIS系统中，table的用处基本是每个页面都需要的。在数据长度不一致的情况下，如何得到你想要的表格布局呢？<span id="more"></span></p>
<h2 id="关于table-layout"><a href="#关于table-layout" class="headerlink" title="关于table-layout"></a>关于table-layout</h2><p>来举个栗子：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">	<span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">height</span>: <span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">padding</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin</span>: <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">font-family</span>: <span class="string">&#x27;Microsoft Yahei&#x27;</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.table</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>: <span class="number">1050px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">margin</span>: <span class="number">50px</span> auto;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ccc</span> solid;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">line-height</span>: <span class="number">30px</span>;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border-collapse</span>: collapse;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.table</span> <span class="selector-tag">th</span>,</span></span><br><span class="line"><span class="language-css">	<span class="selector-class">.table</span> <span class="selector-tag">td</span>&#123;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">border</span>: <span class="number">1px</span> <span class="number">#ccc</span> solid;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">		<span class="attribute">width</span>: <span class="number">10%</span>;</span></span><br><span class="line"><span class="language-css">	&#125;</span></span><br><span class="line"><span class="language-css">	</span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">table</span> <span class="attr">class</span>=<span class="string">&#x27;table&#x27;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">thead</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Telphone<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Name<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Age<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Class<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Address<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">th</span>&gt;</span>Telphone<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">thead</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tbody</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim Green<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span> Class Two, Grade Three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2025 M Street, Northwest, Washington, DC<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>18511860000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim Green<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span> Class Two, Grade Three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2025 M Street, Northwest, Washington, DC<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>18511860000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim Green<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span> Class Two, Grade Three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2025 M Street, Northwest, Washington, DC<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>18511860000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>Jim Green<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>12<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span> Class Two, Grade Three<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>2025 M Street, Northwest, Washington, DC<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">td</span>&gt;</span>18511860000<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">tbody</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>效果如图下图：<br><img src="http://7xprrp.com1.z0.glb.clouddn.com/table1.png"><br>我擦嘞，说好的单元格10%呢，address和telphone怎么都撑开了？<br>这个时候，table-layout就要展示它的能力了。<br>table-layout: automatic|fixed|inherit<br>-table-layout: automatic, 默认值，列宽有单元格的内容宽度决定(碰上一长串的数字，表格看起来简直是灾难).<br>-table-layout: fixed, 列宽有表格宽度和单元格宽度的设定值展现(你想要的，就在这里).<br>-table-layout: inherit, 从父元素继承 table-layout 属性的值.</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.table&#123;</span><br><span class="line">	width: 800px;</span><br><span class="line">	margin: 50px auto;</span><br><span class="line">	border: 1px #ccc solid;</span><br><span class="line">	line-height: 30px;</span><br><span class="line">	border-collapse: collapse;</span><br><span class="line">	table-layout: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果图来了，<br><img src="http://7xprrp.com1.z0.glb.clouddn.com/table2.png"><br>每个单元格终于乖乖的实现了10%，但是呢，这些字怎么跑出来了啊？咱们继续看！</p>
<h2 id="word-wrap和word-break"><a href="#word-wrap和word-break" class="headerlink" title="word-wrap和word-break"></a>word-wrap和word-break</h2><p>单元格宽度就那么宽，当内容太多时，文本溢出了，该怎么办呢？换行呗！咱们看下这两个属性：<em>word-wrap</em>和<em>word-break</em>。<br>-word-wrap: 告诉浏览器是否允许它在单词内断句，防止一个字符串太长，无法找到自然断点而产生溢出现象(是不是又想起来上面的table了)。<br>-word-break: 可以让浏览器实现在任意位置的换行。</p>
<p><strong>word-wrap</strong>:<strong>normal</strong>(只在允许的断字点换行,浏览器保持默认处理)|<strong>break-word</strong>(在长单词或 URL 地址内部进行换行)</p>
<p>来实践一下：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.table th,</span><br><span class="line">.table td&#123;</span><br><span class="line">	border: 1px #ccc solid;</span><br><span class="line">	text-align: center;</span><br><span class="line">	width: 10%;</span><br><span class="line">	word-wrap: break-word;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>效果来了：<br><img src="http://7xprrp.com1.z0.glb.clouddn.com/table3.png"><br>我们可以看到允许单词内换行，Northwest和Washington，均为单词内换行。</p>
<p>如果我们不想长单词被在词内换行呢？</p>
<p><strong>word-break</strong>:<strong>normal</strong>(浏览器保持默认处理)|<strong>break-all</strong>(允许在单词内换行)|<strong>keep-all</strong>(只能在半角空格或连字符处换行)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">.table th,</span><br><span class="line">.table td&#123;</span><br><span class="line">	border: 1px #ccc solid;</span><br><span class="line">	text-align: center;</span><br><span class="line">	width: 10%;</span><br><span class="line">	word-break: keep-all;</span><br><span class="line">	word-wrap: normal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>大功告成：<br><img src="http://7xprrp.com1.z0.glb.clouddn.com/table4.png"></p>
]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(二) -- cd</title>
    <url>/2016/04/13/20160413/</url>
    <content><![CDATA[<h2 id="第二条linux命令-cd"><a href="#第二条linux命令-cd" class="headerlink" title="第二条linux命令: cd"></a>第二条linux命令: cd</h2><p>相信大家对 cd 这个命令，应该是再熟悉不过的了， cd 命令可以说是linux中最基本的命令了。下面就介绍下关于 cd 命令的相关知识。</p>
<span id="more"></span>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>cd [目录名]</p>
<h3 id="命令功能"><a href="#命令功能" class="headerlink" title="命令功能"></a>命令功能</h3><p>切换当前目录到指定目录（dirName）</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>进入系统根目录 cd /<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]#  <span class="built_in">cd</span> /</span><br><span class="line">[root@kvm45072 /]# </span><br></pre></td></tr></table></figure></li>
<li>目录回退 cd .. 或者 cd ../<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 /]# <span class="built_in">cd</span> root</span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">cd</span> ..</span><br><span class="line">[root@kvm45072 ~]# </span><br></pre></td></tr></table></figure></li>
<li>进入当前系统主目录 cd </li>
</ul>
<p>系统当前主目录和系统的根目录是两个不同的概念。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">cd</span> </span><br><span class="line">[root@kvm45072 ~]# </span><br></pre></td></tr></table></figure>
<ul>
<li>返回进入此目录之前所在的目录 cd -<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">cd</span> </span><br><span class="line">[root@kvm45072 ~]# </span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> -</span><br><span class="line">/root/test</span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# </span><br></pre></td></tr></table></figure></li>
<li>把上个命令的参数作为cd参数使用 cd !$<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">cd</span> -</span><br><span class="line">/root</span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> !$</span><br><span class="line"><span class="built_in">cd</span> -</span><br><span class="line">/root/test</span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# </span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(三) -- mkdir</title>
    <url>/2016/04/14/20160414/</url>
    <content><![CDATA[<h2 id="第三条linux命令-mkdir"><a href="#第三条linux命令-mkdir" class="headerlink" title="第三条linux命令: mkdir"></a>第三条linux命令: mkdir</h2><p>当我们进入到某个文档目录下，如何快速的创建新的目录呢，linux中通过 mkdir 命令可以快速的实现创建目录的操作。</p>
<span id="more"></span>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>mkdir [选项]目录</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-m</td>
<td align="center">- -mode=MODE,在创建目录的同时设定权限（而不是采用umask默认值）。。</td>
</tr>
<tr>
<td>-p</td>
<td align="center">-parents, 后面可以是一个路径名称 允许递归创建一个目录</td>
</tr>
<tr>
<td>-v</td>
<td align="center">- -verbose,每次创建新目录都显示详细信息，一般使用组合命令 -pv</td>
</tr>
<tr>
<td>- -help</td>
<td align="center">显示帮助信息并退出</td>
</tr>
<tr>
<td>- -version</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>mkdir</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">mkdir</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg              mongodb-linux-x86_64-3.2.4.gz   receiver.zip</span><br><span class="line">apache-tomcat-7.0.68.tar.gz  node-v0.10.28-linux-x64         <span class="built_in">test</span></span><br><span class="line">install.log                  node-v0.10.28-linux-x64.tar.gz  tomcat7</span><br><span class="line">install.log.syslog           rar                             tomcat7.rar</span><br><span class="line">libmcrypt-2.5.8              rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">libmcrypt-2.5.8.tar.bz2      receiver</span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span> <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# </span><br></pre></td></tr></table></figure>
<ul>
<li>mkdir -m </li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">mkdir</span> -m 777 <span class="built_in">test</span></span><br><span class="line">[root@kvm45072 ~]# ll</span><br><span class="line">total 120036</span><br><span class="line">-rw-------. 1 root root     1922 Sep  2  2014 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root  8900822 Apr  6 20:03 apache-tomcat-7.0.68.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root    56834 Sep  2  2014 install.log</span><br><span class="line">-rw-r--r--. 1 root root     8912 Sep  2  2014 install.log.syslog</span><br><span class="line">drwxrwxrwx. 9  500 adm      4096 Oct 24  2014 libmcrypt-2.5.8</span><br><span class="line">-rw-r--r--. 1 root root   875425 Oct 24  2014 libmcrypt-2.5.8.tar.bz2</span><br><span class="line">-rw-r--r--. 1 root root 56521914 Mar 28 11:15 mongodb-linux-x86_64-3.2.4.gz</span><br><span class="line">drwxr-xr-x. 6 root root     4096 May  2  2014 node-v0.10.28-linux-x64</span><br><span class="line">-rw-r--r--. 1 root root  5352773 Mar 16 13:50 node-v0.10.28-linux-x64.tar.gz</span><br><span class="line">drwxr-xr-x. 2 1000 1000     4096 Nov 18 17:21 rar</span><br><span class="line">-rw-r--r--. 1 root root  1149037 Mar 17 14:29 rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">drwxr-xr-x. 5 root root     4096 Apr  6 19:33 receiver</span><br><span class="line">-rw-r--r--. 1 root root    75521 Feb 26 18:22 receiver.zip</span><br><span class="line">drwxrwxrwx. 2 root root     4096 Apr 18 00:14 <span class="built_in">test</span></span><br><span class="line">drwxr-xr-x. 9 root root     4096 Apr  7 11:19 tomcat7</span><br><span class="line">-rw-r--r--. 1 root root 49923690 Sep 16  2015 tomcat7.rar</span><br><span class="line">[root@kvm45072 ~]# </span><br></pre></td></tr></table></figure>
<ul>
<li>mkdir -p</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">mkdir</span> -p parent/child</span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">ls</span></span><br><span class="line">parent</span><br><span class="line">[root@kvm45072 <span class="built_in">test</span>]# <span class="built_in">cd</span> parent</span><br><span class="line">[root@kvm45072 parent]# <span class="built_in">ls</span> </span><br><span class="line">child</span><br><span class="line">[root@kvm45072 parent]# <span class="built_in">cd</span> child</span><br><span class="line">[root@kvm45072 child]# </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(四) -- pwd</title>
    <url>/2016/04/15/20160415/</url>
    <content><![CDATA[<h2 id="第四条linux命令-pwd"><a href="#第四条linux命令-pwd" class="headerlink" title="第四条linux命令: pwd"></a>第四条linux命令: pwd</h2><p>已经熟悉了 cd , ls , mkdir 命令，如果我们想知道当前所在目录的路径是怎样，怎么办呢？linux用 pwd 命令来查看，当前目录的完整路径。</p>
<span id="more"></span>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>pwd [选项]</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><p>一般情况下, pwd 命令不带任何参数。对于目录是链接时，使用 pwd -P 显示出实际路径。</p>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>pwd <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">mkdir</span> -p parent/child/</span><br><span class="line">[root@kvm45072 ~]# <span class="built_in">cd</span>  parent/child/</span><br><span class="line">[root@kvm45072 child]# <span class="built_in">pwd</span></span><br><span class="line">/root/parent/child</span><br><span class="line">[root@kvm45072 child]# ^C</span><br><span class="line">[root@kvm45072 child]# </span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(五) -- rm</title>
    <url>/2016/04/16/20160416/</url>
    <content><![CDATA[<h2 id="第五条linux命令-rm"><a href="#第五条linux命令-rm" class="headerlink" title="第五条linux命令: rm"></a>第五条linux命令: rm</h2><p>今天要学的是一个危险的命令 – rm 。Linux rm 命令用于删除文件和目录， 可以删除一个目录中的一个或多个文件或目录。也可以将某个目录及其目录内的所有文件及子目录删除。对于链接文件，只删除链接，而原有文件不变。</p>
<span id="more"></span>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>rm [选项] 文件</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-f</td>
<td align="center">–force,忽略不存在的文件，不给出提示。</td>
</tr>
<tr>
<td>-i</td>
<td align="center">–interactive, 交互式删除</td>
</tr>
<tr>
<td>-r</td>
<td align="center">-R, –recursive,将列出的目录及其子目录递归删除</td>
</tr>
<tr>
<td>-v</td>
<td align="center">–verbose, 详细显示进行的步骤。</td>
</tr>
<tr>
<td>- -help</td>
<td align="center">显示帮助信息并退出</td>
</tr>
<tr>
<td>- -version</td>
<td align="center"></td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(六) -- rmdir</title>
    <url>/2016/04/17/20160417/</url>
    <content><![CDATA[<h2 id="第六条linux命令-rmdir"><a href="#第六条linux命令-rmdir" class="headerlink" title="第六条linux命令: rmdir"></a>第六条linux命令: rmdir</h2><p>前面我们学习了 rm 删除文件或目录的指令，今天学习另外一个常用的指令—— rmdir 。该命令主要用于删除空目录，在该目录删除之前，此目录必须是空的。当然你也可以用 rm -r dir 命令代替，但鉴于 rm 命令的危险性，还是用 rmdir 命令靠谱些。</p>
<span id="more"></span>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>rmdir [选项] 目录</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-p</td>
<td align="center">递归删除目录dirname，若自子目录删除后父目录为空则一并删除</td>
</tr>
<tr>
<td>-v</td>
<td align="center">–verbose, 详细显示进行的步骤。</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(七) -- mv</title>
    <url>/2016/04/18/20160418/</url>
    <content><![CDATA[<p>今天来学习的是 linux中常用命令之一的– mv。mv命令是move的缩写，用于移动文件或者文件重命名。这里先提前说一下与 cp 命令不同，mv 命令是完全将源文件移动到指定目录， cp 命令只是复制文件内容从一个目录到另一个目录。</p>
<span id="more"></span>

<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>mv [选项] 源文件或目录 目标文件或目录</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td align="center">覆盖前做备份</td>
</tr>
<tr>
<td>-f</td>
<td align="center">强制，如果目标文件已存在, 不询问强制覆盖。</td>
</tr>
<tr>
<td>-i</td>
<td align="center">若目标文件已存在时，询问是否覆盖</td>
</tr>
<tr>
<td>-u</td>
<td align="center">如果目标文件已存在，且source比较新时，才会覆盖。</td>
</tr>
<tr>
<td>-t</td>
<td align="center">将多个源文件移动到统一目录下，目录参数在前，文件参数在后。</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>mv demo1 demo2<br>将目录demo1移动到demo2<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 linux]# ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 3 root root 4096 Apr 29 16:03 demo1</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Apr 29 16:09 demo2</span><br><span class="line">[root@kvm45072 linux]# <span class="built_in">mv</span> demo1 demo2</span><br><span class="line">[root@kvm45072 linux]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 3 root root 4096 Apr 29 16:12 demo2</span><br><span class="line">[root@kvm45072 linux]# <span class="built_in">cd</span> demo2</span><br><span class="line">[root@kvm45072 demo2]# ll</span><br><span class="line">total 4</span><br><span class="line">drwxr-xr-x. 3 root root 4096 Apr 29 16:03 demo1</span><br><span class="line">[root@kvm45072 demo2]# </span><br></pre></td></tr></table></figure></li>
<li>mv test.txt test.log<br>将文件test.txt更改为test.log<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Apr 29 16:03 demo-1</span><br><span class="line">-rw-r--r--. 1 root root    6 Apr 29 16:14 test.txt</span><br><span class="line">[root@kvm45072 demo1]# <span class="built_in">mv</span> test.txt test.log</span><br><span class="line">[root@kvm45072 demo1]# ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Apr 29 16:03 demo-1</span><br><span class="line">-rw-r--r--. 1 root root    6 Apr 29 16:14 test.log</span><br><span class="line">[root@kvm45072 demo1]# </span><br></pre></td></tr></table></figure></li>
<li>mv -i demo1/test.log demo2<br>demo2文件夹下有文件test.log，移动时询问是否覆盖<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo2]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 5 Apr 29 16:16 test.log</span><br><span class="line">[root@kvm45072 demo2]# <span class="built_in">cd</span> ..</span><br><span class="line">[root@kvm45072 linux]# <span class="built_in">mv</span> -i demo1/test.log demo2</span><br><span class="line"><span class="built_in">mv</span>: overwrite `demo2/test.log<span class="string">&#x27;? </span></span><br></pre></td></tr></table></figure></li>
<li>mv -f demo1/test.log demo2<br>即使存在同名文件，强制覆盖<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 linux]# <span class="built_in">mv</span> -f demo1/test.log demo2</span><br><span class="line">[root@kvm45072 linux]# </span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(八) -- cp</title>
    <url>/2016/04/19/20160419/</url>
    <content><![CDATA[<p>cp, copy之意，用于文件或目录的复制。注意：一般情况下，使用命令行下复制文件时，如果目标文件已经存在，就会询问是否覆盖，无论是否使用 -i 参数。但是在shell脚本中执行cp时，如果没有-i参数，则不会询问是否覆盖-命令行和shell脚本的执行方式有些不同。 <span id="more"></span></p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>cp [选项] 源文件或目录 目标目录</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-a</td>
<td align="center">–archive ;等同于-dR; 复制整个目录，包括目录中的子目录等都递归的复制，同时保持文件的访问模式，所有者，时间戳等属性与原文件一样。</td>
</tr>
<tr>
<td>-b</td>
<td align="center">–backup ; 删除、覆盖目的文件先备份，备份的文件或目录亦建立为符号链接，并指向源文件或目录链接的源文件或目录。假如没有加上这个参数，在复制过程中若遇到符号链接，则会直接复制源文件或目录</td>
</tr>
<tr>
<td>-f</td>
<td align="center">–force; 强行复制文件或目录， 不论目的文件或目录是否已经存在</td>
</tr>
<tr>
<td>-i</td>
<td align="center">若目标文件已存在时，询问是否覆盖</td>
</tr>
<tr>
<td>-u</td>
<td align="center">如果目标文件已存在，且source比较新时，才会覆盖。</td>
</tr>
<tr>
<td>-v</td>
<td align="center">–verbose, 详细显示进行的步骤。</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>cp demo1.log ../demo2<br>将目录demo1下的文件demo1.log复制到demo2文件夹下。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# ll</span><br><span class="line">total 8</span><br><span class="line">drwxr-xr-x. 2 root root 4096 Apr 29 16:03 demo-1</span><br><span class="line">-rw-r--r--. 1 root root   10 Apr 29 16:29 demo1.log</span><br><span class="line">[root@kvm45072 demo1]# <span class="built_in">cp</span> demo1.log ../demo2</span><br><span class="line">[root@kvm45072 demo1]# <span class="built_in">cd</span> ../demo2</span><br><span class="line">[root@kvm45072 demo2]# ll</span><br><span class="line">total 4</span><br><span class="line">-rw-r--r--. 1 root root 10 Apr 29 16:31 demo1.log</span><br><span class="line">[root@kvm45072 demo2]# </span><br></pre></td></tr></table></figure></li>
<li>cp -f demo1.log ../demo2<br>目标文件存在时，会询问是否覆盖。因为cp是cp -i的别名。目标文件存在时，即使加了-f标志，也还会询问是否覆盖。<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# <span class="built_in">cp</span> -f demo1.log ../demo2</span><br><span class="line"><span class="built_in">cp</span>: overwrite `../demo2/demo1.<span class="built_in">log</span><span class="string">&#x27;? </span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(九) -- cat</title>
    <url>/2016/04/20/20160420/</url>
    <content><![CDATA[<p>cat，全称为concatenate files and print on the standard output，主要作用为：查看文件内容，也可以给文件追加内容到结尾。 <span id="more"></span></p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>cat [选项] [文件]</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-A</td>
<td align="center">–show-all ;和-vET等价。</td>
</tr>
<tr>
<td>-b</td>
<td align="center">–number-nonblank ; 列出行号，仅对非空行号显示，空白行不标记行号</td>
</tr>
<tr>
<td>-e</td>
<td align="center">和-vE等价;</td>
</tr>
<tr>
<td>-E</td>
<td align="center">–show-ends, 将结尾的断行字符$显示出来</td>
</tr>
<tr>
<td>-n</td>
<td align="center">–number,对输出的所有行进行编号，编号由1开始递增。空白行也有行号。与-b命令不同。</td>
</tr>
<tr>
<td>-T</td>
<td align="center">–show-tabs, 将[tab]按键以 ^I 显示出来。</td>
</tr>
<tr>
<td>-v</td>
<td align="center">–show-nonprinting, 列出一些看不出的特殊字符。</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>cat -n demo1.log<br>显示文件demo1.log的行号，包括空行。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# <span class="built_in">cat</span> -n demo1.log</span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  <span class="built_in">test</span></span><br><span class="line">     4  <span class="built_in">test</span></span><br><span class="line">     5</span><br><span class="line">     6  <span class="built_in">test</span></span><br><span class="line">     7</span><br><span class="line">     8  demo1</span><br><span class="line">     9  demo1</span><br><span class="line">    10  demo</span><br><span class="line">    11  demo</span><br><span class="line">    12</span><br><span class="line">[root@kvm45072 demo1]# </span><br></pre></td></tr></table></figure>
<ul>
<li>cat -b demo1.log<br>显示文件demo1.log的行号，只显示非空行号。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# <span class="built_in">cat</span> -b demo1.log</span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  <span class="built_in">test</span></span><br><span class="line">     4  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">     5  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">     6  demo1</span><br><span class="line">     7  demo1</span><br><span class="line">     8  demo</span><br><span class="line">     9  demo</span><br><span class="line"></span><br><span class="line">[root@kvm45072 demo1]# </span><br></pre></td></tr></table></figure>
<ul>
<li>cat -b demo1.log demo2.log log.log<br>将demo1.log/demo2.log附加到log.log，并显示非空行号。</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# <span class="built_in">cat</span> -b demo1.log demo2.log log.log</span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  <span class="built_in">test</span></span><br><span class="line">     4  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">     5  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">     6  demo1</span><br><span class="line">     7  demo1</span><br><span class="line">     8  demo</span><br><span class="line">     9  demo</span><br><span class="line"></span><br><span class="line">    10  this is demo2.log</span><br><span class="line">    11  this is demo2.log</span><br><span class="line"></span><br><span class="line">    12  <span class="built_in">test</span></span><br><span class="line">    13  <span class="built_in">test</span></span><br><span class="line"></span><br><span class="line">    14  demo</span><br><span class="line">    15  demo</span><br><span class="line">[root@kvm45072 demo1]# </span><br></pre></td></tr></table></figure>
<ul>
<li>cat &gt;log.txt &lt;&lt;EOF<br>生成文件</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# <span class="built_in">cat</span> &gt;log.txt &lt;&lt;<span class="string">EOF</span></span><br><span class="line"><span class="string">&gt; HELLO</span></span><br><span class="line"><span class="string">&gt; WORLD</span></span><br><span class="line"><span class="string">&gt; PWD=$(pwd)</span></span><br><span class="line"><span class="string">&gt; test</span></span><br><span class="line"><span class="string">&gt; EOF</span></span><br><span class="line">[root@kvm45072 demo1]# <span class="built_in">ls</span> -l log.txt</span><br><span class="line">-rw-r--r--. 1 root root 39 May  4 14:14 log.txt</span><br><span class="line">[root@kvm45072 demo1]# <span class="built_in">cat</span> log.txt</span><br><span class="line">HELLO</span><br><span class="line">WORLD</span><br><span class="line">PWD=/root/linux/demo1</span><br><span class="line"><span class="built_in">test</span></span><br><span class="line">[root@kvm45072 demo1]# </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(十) -- nl</title>
    <url>/2016/05/24/20160524/</url>
    <content><![CDATA[<p> linux关于文件行号显示，cat / nl 命令均可以实现，但nl 可以将行号做比较多的显示设计，包括位数与是否自动补齐 0 等等的功能。<span id="more"></span></p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p>nl [选项] [文件]</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-b</td>
<td align="center">-b指定行号显示有两种显示结果：-b a 无论是否为空行，均显示行号(类似 cat -n); -b -t 仅对非空行号显示，空白行不标记行号</td>
</tr>
<tr>
<td>-n</td>
<td align="center">-n ln 行号在行号栏最左方显示；-n rn 行号在行号栏最右方显示,且不加0；-n rz 行号在行号栏最右方显示,且加0</td>
</tr>
<tr>
<td>-w</td>
<td align="center">行号栏占用位数</td>
</tr>
<tr>
<td>-p</td>
<td align="center">在逻辑定界符处不重新开始计算</td>
</tr>
</tbody></table>
<h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><ul>
<li>nl -b a 无论是否为空行，均显示行号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -b a demo1.log</span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  test</span><br><span class="line">     4  test</span><br><span class="line">     5</span><br><span class="line">     6  test</span><br><span class="line">     7</span><br><span class="line">     8  demo1</span><br><span class="line">     9  demo1</span><br><span class="line">    10  demo</span><br><span class="line">    11  d:</span><br></pre></td></tr></table></figure></li>
<li>nl -b t 仅对非空行号显示，空白行不标记行号<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -b t demo1.log</span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  test</span><br><span class="line">     4  test</span><br><span class="line">       </span><br><span class="line">     5  test</span><br><span class="line">       </span><br><span class="line">     6  demo1</span><br><span class="line">     7  demo1</span><br><span class="line">     8  demo</span><br><span class="line">     9  d:</span><br></pre></td></tr></table></figure></li>
<li>nl -n ln 行号在行号栏最左方显示<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -n ln demo1.log </span><br><span class="line">1       this is demo1.log</span><br><span class="line">2       this is demo1.log</span><br><span class="line">3       test</span><br><span class="line">4       test</span><br><span class="line">       </span><br><span class="line">5       test</span><br><span class="line">       </span><br><span class="line">6       demo1</span><br><span class="line">7       demo1</span><br><span class="line">8       demo</span><br><span class="line">9       d:</span><br></pre></td></tr></table></figure></li>
<li>nl -n rn 行号在行号栏最右方显示,且不加0<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -n rn demo1.log </span><br><span class="line">     1  this is demo1.log</span><br><span class="line">     2  this is demo1.log</span><br><span class="line">     3  test</span><br><span class="line">     4  test</span><br><span class="line">       </span><br><span class="line">     5  test</span><br><span class="line">       </span><br><span class="line">     6  demo1</span><br><span class="line">     7  demo1</span><br><span class="line">     8  demo</span><br><span class="line">     9  d:</span><br></pre></td></tr></table></figure></li>
<li>nl -n rz 行号在行号栏最右方显示,且加0<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -n rz demo1.log </span><br><span class="line">000001  this is demo1.log</span><br><span class="line">000002  this is demo1.log</span><br><span class="line">000003  test</span><br><span class="line">000004  test</span><br><span class="line">       </span><br><span class="line">000005  test</span><br><span class="line">       </span><br><span class="line">000006  demo1</span><br><span class="line">000007  demo1</span><br><span class="line">000008  demo</span><br><span class="line">000009  d:</span><br></pre></td></tr></table></figure></li>
<li>nl -b a -n rz <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -b a -n rz demo1.log </span><br><span class="line">000001  this is demo1.log</span><br><span class="line">000002  this is demo1.log</span><br><span class="line">000003  test</span><br><span class="line">000004  test</span><br><span class="line">000005</span><br><span class="line">000006  test</span><br><span class="line">000007</span><br><span class="line">000008  demo1</span><br><span class="line">000009  demo1</span><br><span class="line">000010  demo</span><br><span class="line">000011  d:</span><br></pre></td></tr></table></figure></li>
<li>nl -b a -n rz -w 行号显示位数<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 demo1]# nl -b a -n rz -w 3 demo1.log </span><br><span class="line">001     this is demo1.log</span><br><span class="line">002     this is demo1.log</span><br><span class="line">003     test</span><br><span class="line">004     test</span><br><span class="line">005</span><br><span class="line">006     test</span><br><span class="line">007</span><br><span class="line">008     demo1</span><br><span class="line">009     demo1</span><br><span class="line">010     demo</span><br><span class="line">011     d:</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-let&amp;const</title>
    <url>/2016/06/30/ES6-let-const/</url>
    <content><![CDATA[<h2 id="let-amp-const"><a href="#let-amp-const" class="headerlink" title="let&amp;const"></a>let&amp;const</h2><p>let和const命令是ES6中新增的用来声明变量的命令。</p>
<h3 id="let命令"><a href="#let命令" class="headerlink" title="let命令"></a>let命令</h3><p>let用法与 var 类似，但是 let 声明的变量只在它所在的代码块有效。ES6 let命令实际上为 Javascript 新增了块级作用域。ES5提供了全局作用域和函数作用域，没有块级作用域。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">let</span> b = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line">a;<span class="comment">//1</span></span><br><span class="line">b;<span class="comment">//undefined,调用报错，只在定义时代码块内有效。</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;es6&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> name=<span class="string">&#x27;es5&#x27;</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//es5</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//es5</span></span><br></pre></td></tr></table></figure>
<p>当有了块级作用域后：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;es6&#x27;</span>;</span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	<span class="keyword">let</span> name = <span class="string">&#x27;es5&#x27;</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//es5</span></span><br><span class="line">	<span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(name);<span class="comment">//es6</span></span><br></pre></td></tr></table></figure>
<p>注意：</p>
<blockquote>
<ul>
<li>let声明的变量不存在变量提升。所以使用let变量前，必须先声明，否则会报错。*</li>
</ul>
</blockquote>
<p>暂时性死区：ES6明确规定，如果区块中存在let和const声明的变量，从一开始就形成了封闭作用域。在变量声明之前调用这下变量会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> tmp = <span class="number">123</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">	tmp = <span class="string">&#x27;123&#x27;</span>;<span class="comment">//Uncaught ReferenceError: tmp is not defined(…)</span></span><br><span class="line">	<span class="keyword">let</span> tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>不允许重复声明：let 不允许在相同作用域内，重复声明同一变量。*</li>
</ul>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>const声明一个只读的常量，一旦常量声明，就不能改变。如果尝试修改const变量值，就会报错。同时，const一旦声明变量，就必须立即进行初始化，只声明不赋值，同样会报错。<br>const变量不存在变量提升。与let类似，const变量只在声明所在块级作用域有效，存在暂时性死区，不能重复声明。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> m = <span class="number">1</span>;</span><br><span class="line">m = <span class="number">2</span>;<span class="comment">//Assignment to constant variable.</span></span><br><span class="line"><span class="keyword">const</span> n;<span class="comment">//Missing initializer in const declaration</span></span><br></pre></td></tr></table></figure>
<p>Tips:</p>
<blockquote>
<p>当引用第三方库时声明的变量，用const来声明，可避免重命名导致的bug<br>const 命令声明的常量，也不能提升，同样存在暂时性死区，只能在声明的位置后使用。</p>
</blockquote>
<hr>
<p>2017-11-10 补充：</p>
<h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p> const 实际上保证的，并不是变量的值不改动，而是变量指向的那个内存地址不得改动。对于简单类型的数据（数值，字符串，布尔值），值就保存在变量指向的那个内存地址，因为等同于常量。但对于复合类型的数据（主要是数组和对象），变量指向的那个内存地址，保存的就是一个指针，const只能保证这个指针是固定，至于它指向的数据结构是不是可变的，就完全不能控制了。</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = &#123;&#125;</span><br><span class="line"></span><br><span class="line">foo.<span class="property">prop</span> = <span class="number">123</span>;</span><br><span class="line">foo.<span class="property">prop</span></span><br><span class="line"></span><br><span class="line">foo = &#123;&#125;; <span class="comment">//TypeError, &quot;foo&quot; is read-only</span></span><br></pre></td></tr></table></figure>
<p>上述代码中，常量foo储存一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把foo指向另一个地址，但对象本上是可变的，所以依然可以为其添加新属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> a = [];</span><br><span class="line">a.<span class="title function_">push</span>(<span class="string">&#x27;hello&#x27;</span>);<span class="comment">//可执行</span></span><br><span class="line">a.<span class="property">length</span> = <span class="number">0</span>;<span class="comment">//可执行</span></span><br><span class="line">a = [<span class="string">&#x27;world&#x27;</span>];<span class="comment">//Uncaught TypeError: Assignment to constant variable.</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，常量a是个数组，数组本身是可写的，但是如果将另一个数组赋值给a, 就会报错。</p>
<p>如果想冻结对象，使用Object.freeze方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="title class_">Object</span>.<span class="title function_">freeze</span>(&#123;&#125;)</span><br><span class="line"><span class="comment">//常规模式下，下面一行不起作用</span></span><br><span class="line"><span class="comment">//严格模式下，该行会报错</span></span><br><span class="line">foo.<span class="property">prop</span> = <span class="number">123</span>;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6-变量的解构赋值</title>
    <url>/2016/08/22/ES6-%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC/</url>
    <content><![CDATA[<p>ES6的解构赋值，可以让我们更加简洁、清晰的进行变量的声明与赋值，同时也减少了代码量，使得代码的可读性更强。</p>
<h2 id="什么是解构赋值？"><a href="#什么是解构赋值？" class="headerlink" title="什么是解构赋值？"></a>什么是解构赋值？</h2><blockquote>
<p>ES6允许按照一定模式，从数组和对象中提取值，对变量进行赋值，这被称为解构（Destructuring）。</p>
</blockquote>
<p>摘自阮一峰老师<a href="http://es6.ruanyifeng.com/#docs/destructuring">ECMAScript 6 入门</a> 。</p>
<span id="more"></span>

<h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><p>ES5中为多个变量赋值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>ES6中可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">a;<span class="comment">//1</span></span><br><span class="line">b;<span class="comment">//2</span></span><br><span class="line">c;<span class="comment">//3</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>本质上，这种写法属于“模式匹配”，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,[[b],c]] =[<span class="number">1</span>,[[<span class="number">2</span>],<span class="number">3</span>]];</span><br><span class="line">a;<span class="comment">//1</span></span><br><span class="line">b;<span class="comment">//2</span></span><br><span class="line">c;<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [,,d] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">d;<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, , y] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">x; <span class="comment">// 1</span></span><br><span class="line">y; <span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [e, ...f] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line">e; <span class="comment">// 1</span></span><br><span class="line">f; <span class="comment">// [2, 3, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, ...z] = [<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">x; <span class="comment">// &quot;a&quot;</span></span><br><span class="line">y; <span class="comment">// undefined</span></span><br><span class="line">z; <span class="comment">// []注意！</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果解构不成功，变量值就等于undefined</p>
</blockquote>
<h3 id="不完全解构"><a href="#不完全解构" class="headerlink" title="不完全解构"></a>不完全解构</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c] = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, [y], z] = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</span><br></pre></td></tr></table></figure>

<blockquote>
<p>如果等号右边不是数组，或者严格地说，不是可遍历的结构，那么将会报错。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 报错</span></span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="title class_">NaN</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">let</span> [foo] = &#123;&#125;;</span><br></pre></td></tr></table></figure>
<h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><blockquote>
<p>ES6内部使用严格相等运算符（===），判断一个位置是否有值。所以，如果一个数组成员不严格等于undefined，默认值是不会生效的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a = <span class="string">&#x27;hello&#x27;</span>,b =<span class="string">&#x27;world&#x27;</span>] = [];</span><br><span class="line">a;<span class="comment">//hello</span></span><br><span class="line">b;<span class="comment">//world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [c=<span class="string">&#x27;world&#x27;</span>,d=<span class="string">&#x27;world&#x27;</span>] = [<span class="string">&#x27;hello&#x27;</span>];</span><br><span class="line">c;<span class="comment">//hello</span></span><br><span class="line">d;<span class="comment">//world</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x=<span class="string">&#x27;hello&#x27;</span>,y=<span class="string">&#x27;world&#x27;</span>] = [<span class="literal">null</span>];</span><br><span class="line">x;<span class="comment">//null</span></span><br><span class="line">y;<span class="comment">//world</span></span><br></pre></td></tr></table></figure>

<p><strong>利用结构赋值，可以简单的实现两个变量的值，[x,y]=[y,x]</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [x, y] = [<span class="number">1</span>,<span class="number">2</span>];</span><br><span class="line">[x,y] = [y,x];</span><br><span class="line">x;<span class="comment">//2</span></span><br><span class="line">y;<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><blockquote>
<p>对象的解构与数组有一个重要的不同。数组的元素是按次序排列的，变量的取值由它的位置决定；而对象的属性没有次序，变量必须与属性同名，才能取到正确的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> &#123; name, age&#125; = &#123; <span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>, <span class="attr">age</span>: <span class="number">12</span>&#125;;</span><br><span class="line">name;<span class="comment">//test</span></span><br><span class="line">age;<span class="comment">//12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; grade, classes &#125; = &#123; <span class="attr">classes</span>: <span class="number">2</span>, <span class="attr">grade</span>: <span class="number">3</span>&#125;;</span><br><span class="line">grade;<span class="comment">//3</span></span><br><span class="line">classes;<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//嵌套</span></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">name</span>: &#123;<span class="attr">firstName</span>: <span class="string">&quot;Green&quot;</span>, <span class="attr">lastName</span>: <span class="string">&quot;Tom&quot;</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">name</span>: &#123;firstName, lastName&#125;&#125; = person;</span><br><span class="line">firstName;<span class="comment">//Green</span></span><br><span class="line">lastName;<span class="comment">//Tom</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = &#123;<span class="attr">dateOfBirth</span>: [<span class="number">1</span>, <span class="number">1</span>, <span class="number">1980</span>]&#125;;</span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">dateOfBirth</span>: [day, month, year]&#125; = person;</span><br><span class="line">day;<span class="comment">//1</span></span><br><span class="line">month;<span class="comment">//1</span></span><br><span class="line">year;<span class="comment">//1980</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><blockquote>
<p>字符串在解构赋值时，被转换成了一个类数组的对象。类数组的对象的length属性，也可以进行解构赋值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> [a,b,c,d,e]=<span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">a;<span class="comment">//h</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">length</span>: len&#125; = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">len;<span class="comment">//5</span></span><br></pre></td></tr></table></figure>

<h2 id="数值和布尔值的解构赋值"><a href="#数值和布尔值的解构赋值" class="headerlink" title="数值和布尔值的解构赋值"></a>数值和布尔值的解构赋值</h2><blockquote>
<p>解构赋值时，如果等号右边是数值和布尔值，则会先转为对象。等号右边是undefined、null，由于不能转换成对象，会导致解构失败。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数值和布尔值的包装对象都有toString属性，因此变量s都能取到值。</span></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="number">123</span>;</span><br><span class="line">s === <span class="title class_">Number</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123;<span class="attr">toString</span>: s&#125; = <span class="literal">true</span>;</span><br><span class="line">s === <span class="title class_">Boolean</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: x &#125; = <span class="literal">undefined</span>; <span class="comment">// TypeError</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">prop</span>: y &#125; = <span class="literal">null</span>; <span class="comment">// TypeError</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">nameString</span>(<span class="params">[firstName ,lastName]</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (lastName + <span class="string">&#x27; &#x27;</span> + firstName);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">nameString</span>([<span class="string">&#x27;Green&#x27;</span>,<span class="string">&#x27;Jim&#x27;</span>]);<span class="comment">//&quot;Jim Green&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//undefined会触发函数的默认值</span></span><br><span class="line">[<span class="number">1</span>, <span class="literal">undefined</span>, <span class="number">3</span>].<span class="title function_">map</span>(<span class="function">(<span class="params">x = <span class="string">&#x27;yes&#x27;</span></span>) =&gt;</span> x);</span><br><span class="line"><span class="comment">//[1,&#x27;yes&#x27;, 3]</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>使用HEXO搭建github个人网站</title>
    <url>/2015/11/25/HEXO/</url>
    <content><![CDATA[<p>HEXO,是一款基于Node.js的轻量的静态博客框架，利用它可以在github上快速构建个人的静态博客。下面就将我自己的构建博客的过程分享给大家。<span id="more"></span></p>
<h2 id="1-安装环境"><a href="#1-安装环境" class="headerlink" title="1 安装环境"></a>1 安装环境</h2><h3 id="1-1-安装node-js"><a href="#1-1-安装node-js" class="headerlink" title="1.1 安装node.js"></a>1.1 安装node.js</h3><p>由于HEXO是基于node.js的静态框架，我们首先要安装node环境。在<a href="http://nodejs.org/">node.js</a>官网进行下载安装.</p>
<h3 id="1-2-安装git及申请github账号"><a href="#1-2-安装git及申请github账号" class="headerlink" title="1.2 安装git及申请github账号"></a>1.2 安装git及申请github账号</h3><p>关于git的安装以及github账号的创建，可自行百度或者在官网的指引下操作，此处省略。</p>
<h3 id="1-3安装HEXO"><a href="#1-3安装HEXO" class="headerlink" title="1.3安装HEXO"></a>1.3安装HEXO</h3><p>接下来利用npm安装HEXO</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure>
<h3 id="1-4-建立本地博客目录"><a href="#1-4-建立本地博客目录" class="headerlink" title="1.4 建立本地博客目录"></a>1.4 建立本地博客目录</h3><p>安装好HEXO后，建立一个文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo init &lt;fileName&gt;</span><br></pre></td></tr></table></figure>
<p>生成的目录结构，及各目录文件作用：</p>
<blockquote>
<p>scaffolds 脚手架，也就是一个工具模板<br>scripts 写文件的js，扩展hexo的功能<br>source 存放博客正文内容<br>source/_drafts 草稿箱<br>source/_posts 文件箱<br>themes 存放皮肤的目录<br>themes/landscape 默认的皮肤<br>_config.yml 全局的配置文件<br>db.json 静态常量</p>
</blockquote>
<p>然后进入到该文件夹中，执行下面操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install</span><br></pre></td></tr></table></figure>
<p>生成静态页面（hexo\public\目录）：执行下面命令后，会在本地生成一个public目录。该目录下生成的文件，即为之后上传到github上并用于发布的静态文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>本地发布：执行下面命令后，会在启动本地服务，访问localhost:4000，即可看到博客的页面。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<h2 id="2-配置Github"><a href="#2-配置Github" class="headerlink" title="2 配置Github"></a>2 配置Github</h2><p>如何将静态博客利用github进行部署呢？下面来看下操作步骤。</p>
<h3 id="2-1-在Github上建立个人Repository"><a href="#2-1-在Github上建立个人Repository" class="headerlink" title="2.1 在Github上建立个人Repository"></a>2.1 在Github上建立个人Repository</h3><p>建立reponsity过程可参考<a href="https://pages.github.com/">Github Pages</a>.</p>
<h3 id="2-2-配置-config-yml文件"><a href="#2-2-配置-config-yml文件" class="headerlink" title="2.2 配置_config.yml文件"></a>2.2 配置_config.yml文件</h3><p>在_config.yml文件末尾，配置如下内容。其中，reposity对应的url为上一步在Github上建立的reposity地址。</p>
<blockquote>
<p>deploy:<br>  type: git<br>  repository: <a href="https://github.com/username/reposityname.github.io.git">https://github.com/username/reposityname.github.io.git</a><br>  branch: master</p>
</blockquote>
<p>  配置完成后，执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>因为我建立的reposity名字为cqu2008，所以我就直接在浏览器中访问  <a href="http://jiaochunxiao.github.io/">http://jiaochunxiao.github.io/</a></p>
<h2 id="3-建站过程中的一些问题"><a href="#3-建站过程中的一些问题" class="headerlink" title="3 建站过程中的一些问题"></a>3 建站过程中的一些问题</h2><h3 id="3-1-本地发布失败"><a href="#3-1-本地发布失败" class="headerlink" title="3.1 本地发布失败"></a>3.1 本地发布失败</h3><p>本地发布，执行 hexo server 失败。解决方案： 执行如下命令。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-server --save</span><br></pre></td></tr></table></figure>
<p>执行完此命令后，再执行</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>即可看到博客的效果。</p>
<h3 id="3-2-Github部署失败"><a href="#3-2-Github部署失败" class="headerlink" title="3.2 Github部署失败"></a>3.2 Github部署失败</h3><p>执行下面命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>会出现： Deployer not found: git<br>此时执行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<p>此时再去执行，hexo deploy ,就可以成功部署了。</p>
<h3 id="3-3-部署步骤"><a href="#3-3-部署步骤" class="headerlink" title="3.3 部署步骤"></a>3.3 部署步骤</h3><p>配置后_config.yml后，通用的三条部署命令（好比是大象装冰箱，一共分三步）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean</span><br><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<h3 id="3-4-常用命令"><a href="#3-4-常用命令" class="headerlink" title="3.4 常用命令"></a>3.4 常用命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">&quot;postName&quot;</span> <span class="comment">#新建文章</span></span><br><span class="line">hexo new page <span class="string">&quot;pageName&quot;</span> <span class="comment">#新建页面</span></span><br><span class="line">hexo generate <span class="comment">#生成静态页面至public目录</span></span><br><span class="line">hexo server <span class="comment">#开启预览访问端口（默认端口4000，&#x27;ctrl + c&#x27;关闭server）</span></span><br><span class="line">hexo deploy <span class="comment">#将.deploy目录部署到GitHub</span></span><br><span class="line">hexo <span class="built_in">help</span>  <span class="comment"># 查看帮助</span></span><br><span class="line">hexo version  <span class="comment">#查看Hexo的版本</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>ES6的Class</title>
    <url>/2019/02/25/ES6%E7%9A%84Class/</url>
    <content><![CDATA[<p>ES6 引入了一个类的概念，其实类是个特殊的函数，可以看做是一个语法糖，它的大部分功能，ES5都能做到。新的 class 写法，只是让对象原型的写法更加清晰、更像面对想象编程的语法而已。</p>
<span id="more"></span>
<h2 id="Class"><a href="#Class" class="headerlink" title="Class"></a>Class</h2><h3 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ES5</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Point</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Point</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>)`</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// ES6 Class</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>)`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数声明和类声明之间的一个重要区别是 <strong>函数声明会提升，类声明不会</strong>。需要先声明类，才能访问它。</p>
<p>在类的实例上调用方法，其实就是调用原型上的方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="keyword">let</span> b = <span class="keyword">new</span> <span class="title class_">Class</span> <span class="title function_">B</span>();</span><br><span class="line">b.<span class="property">constructor</span> === B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span>;</span><br></pre></td></tr></table></figure>
<p>b是B类的实例，它的 constructor 方法就是B类原型的 constructor 方法。<br><strong>类内部的方法，是不可枚举的</strong></p>
<h3 id="constructor-方法"><a href="#constructor-方法" class="headerlink" title="constructor 方法"></a>constructor 方法</h3><p>constructor 方法是类的默认方法，通过 new 命令生成实例对象时，自动调用该方法。一个类必须有 constructor 方法，如果没有显示定义，一个空的 constructor 方法会被默认添加。</p>
<p>constructor 方法默认会返回实例对象（即 this)，当然也可以指定返回另一个对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="title function_">create</span>(<span class="literal">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Foo</span>() <span class="keyword">instanceof</span> <span class="title class_">Foo</span>;<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>**类必须使用 new 调用，否则会报错，这也是它与普通函数的一个主要区别，后者不用 new 也可以执行。</p>
<h3 id="类的实例"><a href="#类的实例" class="headerlink" title="类的实例"></a>类的实例</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>)`</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> point = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line">point.<span class="title function_">toString</span>();<span class="comment">// (2, 3)</span></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;x&#x27;</span>);<span class="comment">// true</span></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;y&#x27;</span>);<span class="comment">// true</span></span><br><span class="line">point.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>);<span class="comment">// false</span></span><br><span class="line">point.<span class="property">__proto__</span>.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;toString&#x27;</span>);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>x 和 y 都是实例对象 point 自身的属性（因为定义在 this 上），所以 hasOwnProperty 方法返回 true，而 toString是原型对象的属性（因为定义在 point 类上），所以 hasOwnProperty 方法返回 false。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Point</span>(<span class="number">3</span>, <span class="number">2</span>);</span><br><span class="line">p1.<span class="property">__prototype</span> === p2.<span class="property">__prototype__</span>;<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="Class表达式"><a href="#Class表达式" class="headerlink" title="Class表达式"></a>Class表达式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">MyClass</span> = <span class="keyword">class</span> <span class="title class_">Me</span> &#123;</span><br><span class="line">    <span class="title function_">getClassName</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Me</span>.<span class="property">name</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面代码使用表达式定义了一个类。需要注意的是，这个类的名字是Me，但是Me只在 Class 的内部可用，指代当前类。在 Class 外部，这个类只能用MyClass引用。</p>
<h3 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h3><p>类相当于实例的原型，所有在类中定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">classMethod</span>(); <span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> foo = <span class="keyword">new</span> <span class="title class_">Foo</span>();</span><br><span class="line">foo.<span class="title function_">classMethod</span>();<span class="comment">// TypeError: foo.classMethod is not a function</span></span><br></pre></td></tr></table></figure>
<p>如果静态方法中包含 this 关键字，这个 this 指的是类，而不是实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">bar</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">baz</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">baz</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="title function_">bar</span>();<span class="comment">// hello</span></span><br></pre></td></tr></table></figure>
<p>上面代码中，静态方法bar调用了this.baz，这里的this指的是Foo类，而不是Foo的实例，等同于调用Foo.baz。另外，从这个例子还可以看出，静态方法可以与非静态方法重名。</p>
<p><strong>父类的静态方法，可以被子类继承</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Bar</span>.<span class="title function_">classMethod</span>();<span class="comment">// &#x27;hello&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>静态方法也可以从 super 对象上调用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Bar</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Foo</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">classMethod</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">super</span>.<span class="title function_">classMethod</span>() + <span class="string">&#x27;, too&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Bar</span>.<span class="title function_">classMethod</span>(); <span class="comment">// hello, too</span></span><br></pre></td></tr></table></figure>
<h3 id="实例属性的新写法"><a href="#实例属性的新写法" class="headerlink" title="实例属性的新写法"></a>实例属性的新写法</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">IncreasingCounter</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_count</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Getting the current value!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另一种写法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IncreasingCounter</span> &#123;</span><br><span class="line">    _count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">value</span>() &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Getting the current value!&#x27;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_count</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">increment</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">_count</span>++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><p>静态属性指的是 Class 本身属性，即 Class.propName， 而不是定义在实例对象（this) 上的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Foo</span> &#123;&#125;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span> = <span class="number">1</span>;</span><br><span class="line"><span class="title class_">Foo</span>.<span class="property">prop</span>;<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>

<h2 id="Class-的继承"><a href="#Class-的继承" class="headerlink" title="Class 的继承"></a>Class 的继承</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`(<span class="subst">$&#123;<span class="variable language_">this</span>.x&#125;</span>,<span class="subst">$&#123;<span class="variable language_">this</span>.y&#125;</span>)`</span>; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">x, y, color</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(x, y);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">color</span> = color;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">toString</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">color</span> + <span class="string">&#x27; &#x27;</span> + <span class="variable language_">super</span>.<span class="title function_">toString</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>子类必须在constructor方法中调用super方法，否则新建实例时会报错</strong>。这是因为子类自己的this对象，必须先通过父类的构造函数完成塑造，得到与父类同样的实例属性和方法，然后再对其进行加工，加上子类自己的实例属性和方法。如果不调用super方法，子类就得不到this对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ColorPoint</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Point</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(...args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在子类的构造函数中，只有调用super之后，才可以使用this关键字，否则会报错。这是因为子类实例的构建，基于父类实例，只有super方法才能调用父类实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> cp = <span class="keyword">new</span> <span class="title class_">ColorPoint</span>(<span class="number">25</span>, <span class="number">8</span>, <span class="string">&#x27;red&#x27;</span>);</span><br><span class="line">cp <span class="keyword">instanceof</span> <span class="title class_">ColorPoint</span>;<span class="comment">// true</span></span><br><span class="line">cp <span class="keyword">instanceof</span> <span class="title class_">Point</span>;<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>父类的静态方法，也会被子类继承。</p>
<h3 id="Object-gerPrototypeOf"><a href="#Object-gerPrototypeOf" class="headerlink" title="Object.gerPrototypeOf()"></a>Object.gerPrototypeOf()</h3><p>Object.getPrototypeOf方法可以用来从子类上获取父类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(<span class="title class_">ColorPoint</span>) === <span class="title class_">Point</span>;<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>super 关键字既可以当函数使用，也可以当做对象使用。</p>
<p>super作为函数调用时，代表父类的构造函数。ES6 要求，子类的构造函数必须执行一次super函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类B的构造函数之中的 super()，代表调用父类的构造函数。这是必须的，否则 JavaScript 引擎会报错。</p>
<p>注意，super 虽然代表了父类A的构造函数，但是返回的是子类B的实例，即 super 内部的 this 指的是B的实例，因此super()在这里相当于A.prototype.constructor.call(this)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span>.<span class="property">target</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">A</span>();</span><br><span class="line"><span class="keyword">new</span> <span class="title function_">B</span>();</span><br></pre></td></tr></table></figure>
<p><strong>new.target指向当前正在执行的函数。可以看到，在super()执行时，它指向的是子类B的构造函数，而不是父类A的构造函数。也就是说，super()内部的this指向的是B。</strong><br>作为函数时，super()只能用在子类的构造函数之中，用在其他地方就会报错。</p>
<p>super 作为对象时，在普通方法中，指向父类的原型对象，在静态方法中，指向父类。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">p</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">super</span>.<span class="title function_">p</span>());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>子类B当中的super.p()，就是将super当作一个对象使用。这时，super在普通方法之中，指向A.prototype，所以super.p()就相当于A.prototype.p()。</p>
<p>这里需要注意，由于super指向父类的原型对象，所以定义在父类实例上的方法或属性，是无法通过super调用的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;static&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;instance&#x27;</span>, msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Child</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Parent</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">myMethod</span>(<span class="params">msg</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">myMethod</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Child</span>.<span class="title function_">myMethod</span>(<span class="number">1</span>);<span class="comment">// static 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> child = <span class="keyword">new</span> <span class="title class_">Child</span>();</span><br><span class="line">child.<span class="title function_">myMythod</span>(<span class="number">2</span>);<span class="comment">// instance 2</span></span><br></pre></td></tr></table></figure>
<p>super在静态方法之中指向父类，在普通方法之中指向父类的原型对象。</p>
<p>另外，<strong>在子类的静态方法中通过super调用父类的方法时，方法内部的this指向当前的子类，而不是子类的实例</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">x</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="title function_">m</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">print</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">B.<span class="property">x</span> = <span class="number">3</span>;</span><br><span class="line">B.<span class="title function_">m</span>();<span class="comment">// 3</span></span><br></pre></td></tr></table></figure>
<p>静态方法B.m里面，super.print指向父类的静态方法。这个方法里面的this指向的是B，而不是B的实例。</p>
<h3 id="类的-prototype-和-proto"><a href="#类的-prototype-和-proto" class="headerlink" title="类的 prototype 和 proto"></a>类的 prototype 和 <strong>proto</strong></h3><ul>
<li>子类的 <strong>proto</strong> 属性，表示构造函数的继承，总是指向父类。</li>
<li>子类的 prototype 属性的 <strong>proto</strong> 属性，表示方法的继承，总是指向父类的 prototype 属性。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> <span class="keyword">extends</span> <span class="title class_ inherited__">A</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">B.<span class="property">__proto__</span> === A;</span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> === A.<span class="property"><span class="keyword">prototype</span></span>;</span><br></pre></td></tr></table></figure>
<p>之所以会产生这样的结果是因为：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span> &#123;&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">B</span> &#123;&#125;</span><br><span class="line"><span class="comment">// B的实例继承 A的实例</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B.<span class="property"><span class="keyword">prototype</span></span>, A.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">// B继承A的静态属性</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B, A);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="title function_">B</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// Object.setPrototypeOf 实现</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="property">setPrototypeOf</span> = <span class="keyword">function</span>(<span class="params">obj, proto</span>) &#123;</span><br><span class="line">    obj.<span class="property">__proto__</span> = proto;</span><br><span class="line">    <span class="keyword">return</span> obj;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//  因此上述过程为</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B.<span class="property"><span class="keyword">prototype</span></span>, A.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">B.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">__proto__</span> = A.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">setPrototypeOf</span>(B, A);</span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line">B.<span class="property">__proto__</span> = A;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>ES6</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(10)-DOM</title>
    <url>/2016/11/11/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-10/</url>
    <content><![CDATA[<p>DOM(文档对象模型)是针对HTML和XML文档的一个API。<span id="more"></span></p>
<h2 id="节点层次"><a href="#节点层次" class="headerlink" title="节点层次"></a>节点层次</h2><h3 id="节点关系及操作节点"><a href="#节点关系及操作节点" class="headerlink" title="节点关系及操作节点"></a>节点关系及操作节点</h3><img src='http://7xprrp.com1.z0.glb.clouddn.com/js/dom-nodes.png' alt='' />

<p>1、 appendChild(): 用于向childNode列表末尾添加一个节点。<br>2、 insertBefore(): 接收两个参数，要插入的节点名称和作为按照的节点。插入节点后，被插入的节点会变成参照节点的前一个同胞节点，同时被方法返回。如果参照节点是null，则insertBefore()与appendChild()执行相同的操作。<br>3、 replaceChild(): 接收两个参数，要插入的节点和要替换的节点。要替换的节点将由这个方法返回并从文档树中删除，同时由要插入的节点占据其位置。<br>4、 removeChild(): 接收一个参数，即要删除的节点。被移除的节点将成为方法的返回值。<br>5、 cloneNode(): 接收一个布尔值参数，表示是否执行深复制。</p>
<h3 id="Document类型"><a href="#Document类型" class="headerlink" title="Document类型"></a>Document类型</h3><p>Javascript中通过Document类型表示文档。在浏览器中document对象是HTMLDocument(继承自Document类型)的一个实例，表示整个HTML页面。document对象是window对象的一个属性，因为可以将其作为全局对象来访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="property">nodeType</span>;<span class="comment">//9</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">nodeValue</span>;<span class="comment">//null</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">nodeName</span>;<span class="comment">//&#x27;#document&#x27;</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">parentNode</span>;<span class="comment">// null</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> html = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="title function_">alert</span>(html == <span class="variable language_">document</span>.<span class="property">firstChld</span>);<span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>(html == <span class="variable language_">document</span>.<span class="property">childNodes</span>[<span class="number">0</span>]);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>document的body属性直接指向<body>元素。</p>
<p>document.doctype取得对&lt;!DOCTYPE&gt;的引用。浏览器支持有限！</p>
<p>document.title，取得文档标题</p>
<p>document.URL，取得完整url</p>
<p>document.domain，取得域名，可以设置，但有安全方面限制，并非可以设置任何值。</p>
<p>document.referrer,取得来源页面url</p>
<h4 id="查找元素"><a href="#查找元素" class="headerlink" title="查找元素"></a>查找元素</h4><p>document.getElementById/document.getElementsByClassName/document.getElementsByName/document.getElementsByTageName/document.getElementsByTagnameNS</p>
<h4 id="HTML元素属性"><a href="#HTML元素属性" class="headerlink" title="HTML元素属性"></a>HTML元素属性</h4><p>1、 id，元素在文档中的唯一标识符<br>2、 title，有关元素的附加说明信息<br>3、 lang，元素内容的语言代码，很少使用<br>4、 dir，语言的防线，值为’ltr’(左至右)或’rtl’，很少使用<br>5、 className，元素的class特性对应</p>
<p>取得特性：</p>
<p>getAttribute()/setAttribute()/removeAttribute()</p>
<p>Element类型是attributes属性的唯一一个DOM节点类型，attributes属性中包含一个NamedNodeMap，与NodeList类似，也是一个动态集合。元素的每一个特性都由一个Attr节点表示，每个节点都保存在NamedNodeMap对象中，NamedNodeMap对象拥有下列方法：<br>1、 getNamedItem(name): 返回nodeName属性等于name的节点<br>2、 removeNameItem(name): 从列表中移除nodeName属性等于name的节点<br>3、 setNamedItem(node): 向列表中添加节点，以节点的nodeName属性为索引<br>4、 item(pos): 返回位于数字pos位置处的节点<br>attributes属性中包含一系列节点，每个节点的nodeName就是特性的名称，而节点的nodeValue就是特性的值。要取得元素的id特性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ntp-contents&#x27;</span>).<span class="property">attributes</span>.<span class="title function_">getNamedItem</span>(<span class="string">&#x27;id&#x27;</span>).<span class="property">nodeValue</span>;<span class="comment">//ntp-contents</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ntp-contents&#x27;</span>).<span class="property">attributes</span>[<span class="string">&#x27;id&#x27;</span>].<span class="property">nodeValue</span>;<span class="comment">//ntp-contents</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//也可以通过此方法设置新的属性值</span></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;ntp-contents&#x27;</span>).<span class="property">attributes</span>[<span class="string">&#x27;id&#x27;</span>].<span class="property">nodeValue</span> = <span class="string">&#x27;newId&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>removeNamedItem()方法与removeAttribute()方法的效果相同：直接删除具有给定名称的特性。两者唯一区别资源，removeNamedItem()返回表示被删除特性的Attr节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> oldAttr = element.<span class="property">attributes</span>.<span class="title function_">removeNamedItem</span>(<span class="string">&#x27;id&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>setNamedItem()是个很不常用的方法，通过这个方法可以为元素添加一个新特性，为此需要为它传入一个特性节点。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">element.<span class="property">attributes</span>.<span class="title function_">setNamedItem</span>(newAttr);</span><br></pre></td></tr></table></figure>
<p><em>上述attributes的方法不够方便，一般使用getAttribute()/setAttribute()/removeAttribute()。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outputAttributes</span>(<span class="params">element</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> pairs = <span class="keyword">new</span> <span class="title class_">Array</span>(),</span><br><span class="line">		attrName,</span><br><span class="line">		attrValue,</span><br><span class="line">		i,</span><br><span class="line">		len = element.<span class="property">attributes</span>.<span class="property">length</span>;</span><br><span class="line">	<span class="keyword">for</span>( i = <span class="number">0</span>; i &lt; len; i++)&#123;</span><br><span class="line">		attrName = element.<span class="property">attributes</span>[i].<span class="property">nodeName</span>;</span><br><span class="line">		attrVaule = element.<span class="property">attributes</span>[i].<span class="property">nodeValue</span>;</span><br><span class="line">		<span class="keyword">if</span>(element.<span class="property">attributes</span>[i].<span class="property">specified</span>)&#123; </span><br><span class="line">			<span class="comment">//针对IE7及之前版本做兼容，确保即使在IE7及更早版本中，也会只返回指定的特性</span></span><br><span class="line">			paris.<span class="title function_">push</span>(attrName + <span class="string">&#x27;=\&#x27;&#x27;</span> + attrValue + <span class="string">&#x27;=\&#x27;&#x27;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="创建元素"><a href="#创建元素" class="headerlink" title="创建元素"></a>创建元素</h4><p>document.createElement();</p>
<h3 id="Text类型"><a href="#Text类型" class="headerlink" title="Text类型"></a>Text类型</h3><h4 id="创建文本节点"><a href="#创建文本节点" class="headerlink" title="创建文本节点"></a>创建文本节点</h4><p>document.createTextNode()</p>
<h4 id="规范化文本节点"><a href="#规范化文本节点" class="headerlink" title="规范化文本节点"></a>规范化文本节点</h4><p>normalize():如果在一个包含两个或多个文本节点的父元素上调用normalize()方法，则会将所有文本节点合并成一个节点，结果节点的nodeValue等于将合并前每个文本节点的nodeValue值拼接起来的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">element.<span class="property">className</span> = <span class="string">&#x27;message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">element.<span class="title function_">appendChild</span>(textNdoe);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode1 = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;html&#x27;</span>);</span><br><span class="line">element.<span class="title function_">appendChild</span>(textNode1);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(element.<span class="property">childNodes</span>.<span class="property">length</span>);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">element.<span class="title function_">normalize</span>();</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(element.<span class="property">childNodes</span>.<span class="property">length</span>);<span class="comment">//1</span></span><br><span class="line"><span class="title function_">alert</span>(element.<span class="property">firstChild</span>.<span class="property">nodeValue</span>);<span class="comment">// hello world!html</span></span><br></pre></td></tr></table></figure>

<p>splitText(): 作用与normalize()相反，这个方法会将一个文本节点分成两个文本节点，即按照指定的位置分割nodeValue值。原文本节点将包含开始到指定位置之前的内容，新文本节点包含剩下的文本。该方法返回一个新的文本节点，该节点与原节点的parentNode相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> element = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">element.<span class="property">className</span> = <span class="string">&#x27;message&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> textNode = <span class="variable language_">document</span>.<span class="title function_">createTextNode</span>(<span class="string">&#x27;hello world!&#x27;</span>);</span><br><span class="line">element.<span class="title function_">appendChild</span>(textNdoe);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(element);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> newNdoe = element.<span class="property">firstChild</span>.<span class="title function_">splitText</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(element.<span class="property">firstChilde</span>.<span class="property">nodeValue</span>);<span class="comment">//&#x27;hello&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(newNode.<span class="property">nodeValue</span>);<span class="comment">//&#x27; world&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(element.<span class="property">childNodes</span>.<span class="property">length</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="Comment类型"><a href="#Comment类型" class="headerlink" title="Comment类型"></a>Comment类型</h3><h2 id="DOM操作技术"><a href="#DOM操作技术" class="headerlink" title="DOM操作技术"></a>DOM操作技术</h2><p>NodeList、NamedNodeMap和HTMLCollection，这三个集合都是动态的，每当文档结构发生变化时，它们都会更新。NodeList对象都是在访问DOM文档时实时运行的查询。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(11)-DOM扩展</title>
    <url>/2016/11/15/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-11/</url>
    <content><![CDATA[<h2 id="选择符API"><a href="#选择符API" class="headerlink" title="选择符API"></a>选择符API</h2><h3 id="querySelector-方法"><a href="#querySelector-方法" class="headerlink" title="querySelector()方法"></a>querySelector()方法</h3><p>querySelector()方法接收一个css选择符，返回与该模式匹配的第一个元素，如果没有找到匹配的元素，返回null。<span id="more"></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//取得body元素</span></span><br><span class="line"><span class="keyword">var</span> body = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;body&#x27;</span>);</span><br><span class="line"><span class="comment">//取得ID为&#x27;myDiv&#x27;的元素</span></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;#myDiv&#x27;</span>);</span><br><span class="line"><span class="comment">//取得类为&#x27;selected&#x27;的第一个元素</span></span><br><span class="line"><span class="keyword">var</span> selected = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.selected&#x27;</span>);</span><br><span class="line"><span class="comment">//取得类为&#x27;button&#x27;的第一个图像元素</span></span><br><span class="line"><span class="keyword">var</span> img = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;img.button&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="querySelectorAll"><a href="#querySelectorAll" class="headerlink" title="querySelectorAll()"></a>querySelectorAll()</h3><p>querySelectorAll()方法接收的参数与querySelector()方法一样，返回一个NodeList的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> strongs = <span class="variable language_">document</span>.<span class="title function_">querySelctorAll</span>(<span class="string">&#x27;p strong&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> i, len, strong;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>, len = strongs.<span class="property">length</span>; i &lt; len; i++)&#123;</span><br><span class="line">	strong = strongs[i];<span class="comment">//或者strongs.item(i)</span></span><br><span class="line">	strong.<span class="property">className</span> = <span class="string">&#x27;important&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="matchesSelector-方法"><a href="#matchesSelector-方法" class="headerlink" title="matchesSelector()方法"></a>matchesSelector()方法</h3><h2 id="元素遍历"><a href="#元素遍历" class="headerlink" title="元素遍历"></a>元素遍历</h2><h2 id="HTML5"><a href="#HTML5" class="headerlink" title="HTML5"></a>HTML5</h2><h3 id="与类相关补充"><a href="#与类相关补充" class="headerlink" title="与类相关补充"></a>与类相关补充</h3><h4 id="getElementsByClassName"><a href="#getElementsByClassName" class="headerlink" title="getElementsByClassName()"></a>getElementsByClassName()</h4><h4 id="classList属性"><a href="#classList属性" class="headerlink" title="classList属性"></a>classList属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> classList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>).<span class="property">classList</span>;</span><br><span class="line"></span><br><span class="line">classList.<span class="title function_">remove</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line">classList.<span class="title function_">add</span>(<span class="string">&#x27;current&#x27;</span>);</span><br><span class="line">classList.<span class="title function_">toggle</span>(<span class="string">&#x27;user&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(classList.<span class="title function_">contains</span>(<span class="string">&#x27;bd&#x27;</span>)&amp;&amp;classList.<span class="title function_">contains</span>(<span class="string">&#x27;disabled&#x27;</span>))&#123;</span><br><span class="line">	<span class="comment">//执行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="焦点管理"><a href="#焦点管理" class="headerlink" title="焦点管理"></a>焦点管理</h3><p>HTML5辅助管理DOM焦点：document.activeElement</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> button = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myButton&#x27;</span>);</span><br><span class="line">button.<span class="title function_">focus</span>();</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">activeElement</span> === button);</span><br></pre></td></tr></table></figure>
<h3 id="HTMLDocument的变化"><a href="#HTMLDocument的变化" class="headerlink" title="HTMLDocument的变化"></a>HTMLDocument的变化</h3><h4 id="readyState属性"><a href="#readyState属性" class="headerlink" title="readyState属性"></a>readyState属性</h4><p>HTML5标准：Document的readyState属性有两个值：</p>
<p>1、 loading:正在加载文档<br>2、 complete:已经加载完文档</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">readyState</span> == <span class="string">&#x27;complete&#x27;</span>)&#123;</span><br><span class="line">	<span class="comment">//执行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="兼容模式"><a href="#兼容模式" class="headerlink" title="兼容模式"></a>兼容模式</h4><p>HTML5标准： document.compatMode，标准模式下该值等于’CSS1Compat’，混杂模式下，该值等于’BackCompat’。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">compatMode</span> == <span class="string">&#x27;CSS1Compat&#x27;</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Standard mode&#x27;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Quirks mode&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="head属性"><a href="#head属性" class="headerlink" title="head属性"></a>head属性</h4><p>HTML5标准：document.head</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> head = <span class="variable language_">document</span>.<span class="property">head</span>||<span class="variable language_">document</span>.<span class="title function_">getElementsByTagName</span>(<span class="string">&#x27;head&#x27;</span>)[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>

<h4 id="字符集属性"><a href="#字符集属性" class="headerlink" title="字符集属性"></a>字符集属性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">charset</span>);</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">charset</span> = <span class="string">&#x27;UTF-8&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">charset</span>!=<span class="variable language_">document</span>.<span class="property">defaultCharset</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Custom character set being used&#x27;</span>);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="自定义数据属性"><a href="#自定义数据属性" class="headerlink" title="自定义数据属性"></a>自定义数据属性</h4><blockquote>
<p>HTML5规定可以为元素添加非标准的属性，但要添加前缀 data-，目的是为元素提供与渲染无关的信息，或者提供语义信息。</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&#x27;myDiv&#x27;</span> <span class="attr">data-appId</span>=<span class="string">&#x27;2107&#x27;</span> <span class="attr">data-myname</span>=<span class="string">&#x27;hnwc&#x27;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>添加自定义属性后，通过元素的dataset属性来访问自定义属性的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="comment">//取得自定义属性值</span></span><br><span class="line"><span class="keyword">var</span> appId = div.<span class="property">dataset</span>.<span class="property">appId</span>;</span><br><span class="line"><span class="keyword">var</span> myName = div.<span class="property">dataset</span>.<span class="property">myname</span>;</span><br><span class="line"><span class="comment">//设置值</span></span><br><span class="line">div.<span class="property">dataset</span>.<span class="property">appId</span> = <span class="number">2014</span>;</span><br><span class="line">div.<span class="property">dataset</span>.<span class="property">myname</span> = <span class="string">&#x27;cq&#x27;</span>;</span><br><span class="line"><span class="comment">//判断</span></span><br><span class="line"><span class="keyword">if</span>(div.<span class="property">dataset</span>.<span class="property">myname</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hello &#x27;</span> + div.<span class="property">dataset</span>.<span class="property">myname</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="插入标记"><a href="#插入标记" class="headerlink" title="插入标记"></a>插入标记</h4><p>1、 innerHTML<br>在取模式下，innerHTML属性返回与调用元素的所有子节点对应的HTML标记。<br>在写模式下，innerHTML会根据指定值创建新的DOM树，然后用这个DOM树完全替换调用元素下原先的所有子节点。</p>
<blockquote>
<p>不支持innerHTML的元素有： col、colgroup、frameset、head、html、style、table、tbody、thead、tfoot、tr。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> text = <span class="string">&quot;&lt;a href=\&quot;#\&quot; onclick=\&quot;alert(&#x27;hi&#x27;)\&quot;&gt;&lt;/a&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> sanitized = <span class="variable language_">window</span>.<span class="title function_">toStaticHTML</span>(text); <span class="comment">//only IE8</span></span><br><span class="line"><span class="title function_">alert</span>(sanitized);</span><br></pre></td></tr></table></figure>

<p>2、 outerHTML属性<br>在读模式下，outerHTML返回调用它的元素及所有子节点的HTML标签。<br>在写模式下，outerHTML会根据指定的HTML字符串创建新的DOM子树，然后用这个DOM子树完全替换调用元素。</p>
<p>3、 insertAdjacentHTML()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//作为前一个同辈元素插入</span></span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforebegin&#x27;</span>,<span class="string">&#x27;&lt;p&gt;Hello world!&lt;/p&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">//作为第一个子元素插入</span></span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterbegin&#x27;</span>,<span class="string">&#x27;&lt;p&gt;Hello world!&lt;/p&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">//作为最后一个子元素插入</span></span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;beforeend&#x27;</span>,<span class="string">&#x27;&lt;p&gt;Hello world!&lt;/p&gt;&#x27;</span>);</span><br><span class="line"><span class="comment">//作为后一个同辈元素插入</span></span><br><span class="line">element.<span class="title function_">insertAdjacentHTML</span>(<span class="string">&#x27;afterend&#x27;</span>,<span class="string">&#x27;&lt;p&gt;Hello world!&lt;/p&gt;&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>4、 内存与性能问题</p>
<h4 id="scrollIntoView-方法"><a href="#scrollIntoView-方法" class="headerlink" title="scrollIntoView()方法"></a>scrollIntoView()方法</h4><p>scrollIntoView()可以在所有HTML元素上调用，通过滚动浏览器窗口或某个容器，调用元素就可以出现在视口中。如果给这个方法传入true作为参数，或者不传入任何参数，那么窗口滚动之后会让调用元素的顶部与视口顶部尽可能平齐。如果传入false作为参数，调用元素会尽可能全部出现在视口中，不过顶部不一定平齐。</p>
<h3 id="专有扩展"><a href="#专有扩展" class="headerlink" title="专有扩展"></a>专有扩展</h3><h4 id="文档模式"><a href="#文档模式" class="headerlink" title="文档模式"></a>文档模式</h4><h4 id="children属性"><a href="#children属性" class="headerlink" title="children属性"></a>children属性</h4><h4 id="contains"><a href="#contains" class="headerlink" title="contains"></a>contains</h4><h4 id="插入文本"><a href="#插入文本" class="headerlink" title="插入文本"></a>插入文本</h4><p>innerText</p>
<p>outerText</p>
<h4 id="滚动"><a href="#滚动" class="headerlink" title="滚动"></a>滚动</h4>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(12)-DOM2和DOM3</title>
    <url>/2016/11/20/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-12/</url>
    <content><![CDATA[<h4 id="计算的样式"><a href="#计算的样式" class="headerlink" title="计算的样式"></a>计算的样式</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = <span class="variable language_">document</span>.<span class="property">defaultView</span>.<span class="title function_">getComputedStyle</span>(myDiv, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(computedStyle.<span class="property">backgroundColor</span>);</span><br><span class="line"><span class="title function_">alert</span>(computedStyle.<span class="property">width</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//IE不支持getComputedStyle()方法，在IE中每个具有style属性的元素还要一个currentStyle属性。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myDiv = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> computedStyle = myDiv.<span class="property">currentStyle</span>;</span><br><span class="line"><span class="title function_">alert</span>(computedStyle.<span class="property">backgroundColor</span>);</span><br><span class="line"><span class="title function_">alert</span>(computedStyle.<span class="property">width</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(13)-事件</title>
    <url>/2016/11/21/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-13/</url>
    <content><![CDATA[<h2 id="事件流"><a href="#事件流" class="headerlink" title="事件流"></a>事件流</h2><p>事件流描述的是从页面中接收事件的顺序。IE的事件流是事件冒泡流，而Netscapte Communicator的事件流是事件捕获流。<span id="more"></span></p>
<h3 id="事件冒泡"><a href="#事件冒泡" class="headerlink" title="事件冒泡"></a>事件冒泡</h3><p>IE的事件流叫做事件冒泡(event bubbling)，即事件开始时由最具体的元素接收，然后逐级向上传播到较为不具体的节点。</p>
<h3 id="事件捕获"><a href="#事件捕获" class="headerlink" title="事件捕获"></a>事件捕获</h3><p>Netscapte Communicator事件捕获(event capturing)，不太具体的节点应该更早接收到事件，而最具体的节点应该最后接收到事件。</p>
<h3 id="DOM事件流"><a href="#DOM事件流" class="headerlink" title="DOM事件流"></a>DOM事件流</h3><p>“DOM2级事件”规定的事件流包括三个阶段：事件捕获阶段，处于目标阶段和事件冒泡阶段。</p>
<blockquote>
<p>IE9、Opera、FireFox、Chrome和Safari都支持DOM事件流，IE8及更早版本不支持DOM事件流。</p>
</blockquote>
<h2 id="事件处理程序"><a href="#事件处理程序" class="headerlink" title="事件处理程序"></a>事件处理程序</h2><h3 id="HTML事件处理程序"><a href="#HTML事件处理程序" class="headerlink" title="HTML事件处理程序"></a>HTML事件处理程序</h3><p>某个元素支持特定的某种事件，都可以使用一个与相应事件处理程序同名的HTML特性来指定。</p>
<h3 id="DOM0级事件处理程序"><a href="#DOM0级事件处理程序" class="headerlink" title="DOM0级事件处理程序"></a>DOM0级事件处理程序</h3><p>使用DOM0级方法指定的事件处理程序被认为是元素的方法。因此事件处理程序是在元素的作用域中运行，程序中的this引用当前元素。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);<span class="comment">//&#x27;myBtn&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>删除DOM0级方法指定的事件处理程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">btn.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<h3 id="DOM2级事件处理程序"><a href="#DOM2级事件处理程序" class="headerlink" title="DOM2级事件处理程序"></a>DOM2级事件处理程序</h3><p>“DOM2级事件”定义了两个方法，用于处理指定和删除事件处理程序的操作：addEventListener()和removeEventListener()。所有DOM节点都包含这两个方法，接收三个参数：要处理的事件名、作为事件处理程序的函数和一个布尔值。最后这个布尔值如果为true，表示在捕获阶段调用事件处理程序；如果是false，表示在冒泡阶段调用事件处理程序。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure>
<p>使用DOM2级方法添加事件处理程序主要好处是可以添加多个事件处理程序。<br><em>通过addEventListener()添加的事件处理程序，只用使用removeEventListener()来移除。移除时，传入的参数与添加处理程序时使用的参数相同。也意味着通过addEventListener()添加的匿名函数无法移除。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="comment">//没有用，不能移除匿名函数</span></span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler, <span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line">btn.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler, <span class="literal">false</span>);<span class="comment">//有效</span></span><br></pre></td></tr></table></figure>

<h3 id="IE事件处理程序"><a href="#IE事件处理程序" class="headerlink" title="IE事件处理程序"></a>IE事件处理程序</h3><p>IE实现了与DOM中类似的方法：attachEvent()和detachEvent()。两个方法接受相同的两个参数：事件处理程序名称与事件处理函数。由于IE8及更早版本只支持事件冒泡，所以通过attachEvent()添加的事件处理程序都会添加到冒泡阶段。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//注意事件处理程序名称 &#x27;onclick&#x27;，与DOM的addEventListener()方法中的&#x27;click&#x27;不同。</span></span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">id</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>IE中使用attachEvent()与使用DOM0级方法的主要区别在于事件处理程序的作用于。在使用DOM0级方法的情况下，事件处理程序会在其所属元素的作用域内运行；使用attachEvent()方法的情况下，事件处理程序会在全局作用域中运行，因此this等于window。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span> === <span class="variable language_">window</span>);<span class="comment">//true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>通过attachEvent()方法为同一个元素添加不同的事件处理程序，与DOM方法不同的是，这些事件处理程序不是以添加它们的顺序执行，而是以相反的顺序被触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;click&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hello&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">//先输出hello, 再输出click</span></span><br></pre></td></tr></table></figure>

<p>使用attachEvent()方法添加的事件可以通过detachEvent()方法来移除，条件是必须提供相同的参数。与DOM方法一样，添加的匿名函数不能被移除。</p>
<h3 id="跨浏览器事件处理程序"><a href="#跨浏览器事件处理程序" class="headerlink" title="跨浏览器事件处理程序"></a>跨浏览器事件处理程序</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EventUtil</span> = &#123;</span><br><span class="line">	<span class="attr">addHandler</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(element.<span class="property">addEventListener</span>)&#123;</span><br><span class="line">			element.<span class="title function_">addEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">attachEvent</span>)&#123;</span><br><span class="line">			element.<span class="title function_">attachEvent</span>(<span class="string">&quot;on&quot;</span> + type, handler);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			element[<span class="string">&#x27;on&#x27;</span> + type] = handler;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">removeHandler</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(element.<span class="property">removeEventListener</span>)&#123;</span><br><span class="line">			element.<span class="title function_">removeEventListener</span>(type, handler, <span class="literal">false</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span>(element.<span class="property">detachEvent</span>)&#123;</span><br><span class="line">			element.<span class="title function_">detachEvent</span>(<span class="string">&#x27;on&#x27;</span> + type, handler);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			element[<span class="string">&#x27;on&#x27;</span> + type] = <span class="literal">null</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElmentById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> hanlder = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(btn, <span class="string">&#x27;click&#x27;</span>, handler);</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventUitl</span>.<span class="title function_">removeHandler</span>(btn, <span class="string">&#x27;click&#x27;</span>, handler);</span><br></pre></td></tr></table></figure>

<h2 id="事件对象"><a href="#事件对象" class="headerlink" title="事件对象"></a>事件对象</h2><p>在触发DOM上的某个事件时，会产生一个事件对象evnet, 这个对象中包含着所有与事件有关的信息。包括导致事件的元素，事件的类型以及其他与特定事件相关的信息。</p>
<h3 id="DOM中的事件对象"><a href="#DOM中的事件对象" class="headerlink" title="DOM中的事件对象"></a>DOM中的事件对象</h3><table>
<thead>
<tr>
<th>属性/方法</th>
<th align="center">类型</th>
<th align="center">读/写</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>bubbles</td>
<td align="center">Boolean</td>
<td align="center">只读</td>
<td>表明事件是否冒泡</td>
</tr>
<tr>
<td>cancelable</td>
<td align="center">Boolean</td>
<td align="center">只读</td>
<td>表明是否可以取消默认事件</td>
</tr>
<tr>
<td>currentTarget</td>
<td align="center">Element</td>
<td align="center">只读</td>
<td>事件处理程序当前正在处理事件的对象</td>
</tr>
<tr>
<td>defaultPrevented</td>
<td align="center">Boolean</td>
<td align="center">只读</td>
<td>为true表示已经调用了preventDefault()方法</td>
</tr>
<tr>
<td>detail</td>
<td align="center">Interger</td>
<td align="center">只读</td>
<td>与事件相关的细节信息</td>
</tr>
<tr>
<td>eventPhase</td>
<td align="center">Interger</td>
<td align="center">只读</td>
<td>调用事件处理程序的阶段：1表示捕获阶段，2表示处于目标阶段，3表示冒泡阶段</td>
</tr>
<tr>
<td>preventDefault()</td>
<td align="center">Function</td>
<td align="center">只读</td>
<td>取消事件的默认行为。如果cancelable是true，可以使用该方法</td>
</tr>
<tr>
<td>stopImmediatePropagation()</td>
<td align="center">Function</td>
<td align="center">只读</td>
<td>取消事件的进一步捕获或冒泡，同时阻止任何处理程序被调用。</td>
</tr>
<tr>
<td>stopPropagation()</td>
<td align="center">Function</td>
<td align="center">只读</td>
<td>取消事件的进一步捕获或冒泡。如果bubbles为true，则可以使用该方法。</td>
</tr>
<tr>
<td>target</td>
<td align="center">Element</td>
<td align="center">Element</td>
<td>事件的目标</td>
</tr>
<tr>
<td>trusted</td>
<td align="center">Boolean</td>
<td align="center">只读</td>
<td>为true表示事件是浏览器生成的，为false表示事件是由开发人员通过Javascript创建的</td>
</tr>
<tr>
<td>type</td>
<td align="center">String</td>
<td align="center">只读</td>
<td>被触发事件的类型</td>
</tr>
<tr>
<td>view</td>
<td align="center">AbstractView</td>
<td align="center">只读</td>
<td>与事件关联的抽象视图。等同于发生事件的window对象。</td>
</tr>
</tbody></table>
<blockquote>
<p>在事件处理程序内部，对象this始终等于currentTarget的值，而target则只包含事件的实际目标。如果直接将事件处理程序指定给了目标元素，则this、currentTarget和target包含相同的值。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(event.<span class="property">currentTarget</span> == <span class="variable language_">this</span>);<span class="comment">//true</span></span><br><span class="line">	<span class="title function_">alert</span>(event.<span class="property">target</span> == <span class="variable language_">this</span>);<span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果处理程序存在于按钮的父节点</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">doument.<span class="property">body</span>.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(event.<span class="property">currentTarget</span> === <span class="variable language_">document</span>.<span class="property">body</span>); <span class="comment">//true</span></span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span> === <span class="variable language_">document</span>.<span class="property">body</span>); <span class="comment">// true</span></span><br><span class="line">	<span class="title function_">alert</span>(event.<span class="property">target</span> === <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>));<span class="comment">// true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>通过一个函数处理多个事件时，可以使用type属性。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> handler = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="keyword">switch</span>(event.<span class="property">type</span>)&#123;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;click&#x27;</span>:</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;clicked&#x27;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;mouseover&#x27;</span>:</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;mouseover&#x27;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		<span class="keyword">case</span> <span class="string">&#x27;mouseout&#x27;</span>:</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;mouseout&#x27;</span>);</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">btn.<span class="property">onclick</span> = handler;</span><br><span class="line">btn.<span class="property">onmouseover</span> = handler;</span><br><span class="line">btn.<span class="property">onmouseout</span> = handler;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>阻止特定事件的默认行为，preventDefault()。<strong>只有cancelable属性为true的事件，才可以使用preventDefault()来取消默认行为。</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> link = <span class="variable language_">document</span>.<span class="title function_">getElmentById</span>(<span class="string">&#x27;myLink&#x27;</span>);</span><br><span class="line"></span><br><span class="line">link.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event.<span class="title function_">preventDefault</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>stopPropagation()方法用于立即停止事件在DOM层次中的传播，即取消进一步的事件捕获或冒泡。</p>
</blockquote>
<h3 id="IE中的事件对象"><a href="#IE中的事件对象" class="headerlink" title="IE中的事件对象"></a>IE中的事件对象</h3><p>与访问DOM中的event对象不同，要访问IE中的event对象有几种不同的方式，取决于指定事件处理程序的方法。<br>DOM0中，event对象作为window对象的一个属性存在。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>);</span><br><span class="line">btn.<span class="property">onclick</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> event = <span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">	<span class="title function_">alert</span>(evnet.<span class="property">type</span>);<span class="comment">//&#x27;click&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果事件是使用attachEvent()添加的，那么就会有一个event对象作为参数被传入事件处理程序函数中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> btn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myBtn&#x27;</span>);</span><br><span class="line">btn.<span class="title function_">attachEvent</span>(<span class="string">&#x27;onclick&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(event.<span class="property">type</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>通过HTML特性指定的事件处理程序</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;input type=<span class="string">&#x27;button&#x27;</span> onclick=<span class="string">&#x27;alert(event.type)&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>IE中，event对象相关的属性和方法。</p>
<table>
<thead>
<tr>
<th>属性/方法</th>
<th align="center">类型</th>
<th align="center">读/写</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>cancelBubble</td>
<td align="center">Boolean</td>
<td align="center">读/写</td>
<td>默认为false,但将其设置为true，就可以取消事件冒泡（与DOM中的stopPropagation()方法的作用相同）</td>
</tr>
<tr>
<td>returnValue</td>
<td align="center">Boolean</td>
<td align="center">读/写</td>
<td>默认为true,但将其设置为false，就可以取消事件莫任性（与DOM中的preventDefault()方法的作用相同）</td>
</tr>
<tr>
<td>srcElement</td>
<td align="center">Element</td>
<td align="center">只读</td>
<td>事件目标（与DOM中的target相同）</td>
</tr>
<tr>
<td>type</td>
<td align="center">String</td>
<td align="center">只读</td>
<td>被触发的事件类型</td>
</tr>
</tbody></table>
<h3 id="跨浏览器事件对象"><a href="#跨浏览器事件对象" class="headerlink" title="跨浏览器事件对象"></a>跨浏览器事件对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">EventUtil</span> = &#123;</span><br><span class="line">	<span class="attr">addHandler</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>)&#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">getEvent</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> event ? <span class="attr">event</span>:<span class="variable language_">window</span>.<span class="property">event</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">getTarget</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> event.<span class="property">target</span>||event.<span class="property">srcElement</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">preventDefault</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(event.<span class="property">preventDefault</span>)&#123;</span><br><span class="line">			event.<span class="title function_">preventDefault</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			event.<span class="property">returnValue</span> = <span class="literal">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">removeHandler</span>: <span class="keyword">function</span>(<span class="params">element, type, handler</span>)&#123;</span><br><span class="line">		<span class="comment">//</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">stopPropagation</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(event.<span class="property">stopPropagation</span>)&#123;</span><br><span class="line">			event.<span class="title function_">stopPropagation</span>();</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			event.<span class="property">cancelBubble</span> = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h2><p>1、 UI事件<br>2、 焦点事件<br>3、 鼠标事件<br>4、 滚轮事件<br>5、 文本事件<br>6、 键盘事件<br>7、 合成事件<br>8、 变动事件</p>
<h3 id="UI事件"><a href="#UI事件" class="headerlink" title="UI事件"></a>UI事件</h3><p>1、 load事件<br>第一种: </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(<span class="variable language_">window</span>, <span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;loaded&#x27;</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>第二种:指定onload事件处理程序的方式是为 body 元素添加一个onload特性</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onload</span>=<span class="string">&quot;alert(&#x27;Loaded!&#x27;)&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>2、 unload<br>3、 abort<br>4、 error<br>5、 select<br>6、 resize</p>
<p>当浏览器窗口被调整到一个新的高度或宽度时，就会触发resize事件。这个事件在window上面触发，因此可以通过Javascript或者body元素中的onresize特性来指定事件处理程序。推荐方式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EventUitl</span>.<span class="title function_">addHandler</span>(<span class="params"><span class="variable language_">window</span>, <span class="string">&quot;resize&quot;</span>, <span class="keyword">function</span>(event)</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;resized&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7、 scroll</p>
<p>在混杂模式下，可以通过body元素的scrollLeft和scrollTop来监控这一变化，在标准模式下，通过html元素来反应这一变化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EventUitl</span>.<span class="title function_">addHandler</span>(<span class="variable language_">window</span>, <span class="string">&#x27;scroll&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">compatMode</span> ==<span class="string">&#x27;CSS1Compat&#x27;</span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollTop</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="鼠标与滚轮事件"><a href="#鼠标与滚轮事件" class="headerlink" title="鼠标与滚轮事件"></a>鼠标与滚轮事件</h3><p>DOM3级事件中定义了9个鼠标事件：</p>
<p>1、 click事件<br>2、 dbclick事件<br>3、 mousedown事件：用户按下鼠标任意按钮时触发<br>4、 mouseenter: 在鼠标光标从元素外部首次移动到元素范围之内时触发，不冒泡，且在光标移动到后代元素上不会触发。<br>5、 moouseleave: 在位于元素上方的鼠标光标移动到元素范围之外时触发，不冒泡，且在光标移动到后代元素上不会触发。<br>6、 mousemove: 当鼠标指针在元素内部移动时重复地触发。<br>7、 mouseout: 在鼠标指针位于一个元素上方，然后用户将其移入另一个元素时触发。又移入的另一个元素可能位于前一个元素的外部，也可能是这个元素的子元素。<br>8、 mouseover: 在鼠标指针位于一个元素外部，然后用户将其首次移入另一个元素边界之内时触发。<br>9、 mouseup: 用户释放鼠标按钮时触发。</p>
<p>页面上所有元素都支持鼠标事件。除了mouseenter和mouseleave，所有鼠标事件都会冒泡，也可以取消，而取消鼠标事件将会影响浏览器的默认行为。</p>
<p>只有在同一元素上相继触发mousedown和mouseup事件，才会触发click事件；如果mousedow或mouseup中的一个被取消，就不会触发click事件。</p>
<h4 id="客户区坐标位置"><a href="#客户区坐标位置" class="headerlink" title="客户区坐标位置"></a>客户区坐标位置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(div, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event = <span class="title class_">EventUtil</span>.<span class="title function_">getEvent</span>(event);</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;Client coordinates: &quot;</span> + event.<span class="property">clientX</span> + <span class="string">&quot;,&quot;</span> + event.<span class="property">clientY</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="页面坐标位置"><a href="#页面坐标位置" class="headerlink" title="页面坐标位置"></a>页面坐标位置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myDiv&quot;</span>);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(div, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event = <span class="title class_">EventUtil</span>.<span class="title function_">getEvent</span>(event);</span><br><span class="line">	<span class="keyword">var</span> pageX = event.<span class="property">pageX</span>,</span><br><span class="line">		pageY = event.<span class="property">pageY</span>;</span><br><span class="line">	<span class="keyword">if</span>(pageX == <span class="literal">undefined</span>)&#123;</span><br><span class="line">		pageX = event.<span class="property">clientX</span> + (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollLeft</span>||<span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">scrollLeft</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(pageY == <span class="literal">undefined</span>)&#123;</span><br><span class="line">		pageY = event.<span class="property">clientY</span> + (<span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">scrollTop</span>||docuemnt.<span class="property">docuemnetElement</span>.<span class="property">scrollTop</span>)<span class="string">&#x27;&#x27;</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="屏幕坐标位置"><a href="#屏幕坐标位置" class="headerlink" title="屏幕坐标位置"></a>屏幕坐标位置</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(div, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event = <span class="title class_">EventUtil</span>.<span class="title function_">getEvent</span>(event);</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;Screen coordinates: &quot;</span> + event.<span class="property">screenX</span> + <span class="string">&quot;,&quot;</span> + event.<span class="property">screenY</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="修改键"><a href="#修改键" class="headerlink" title="修改键"></a>修改键</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDiv&#x27;</span>);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(div, <span class="string">&quot;click&quot;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event = <span class="title class_">EventUtil</span>.<span class="title function_">getEvent</span>(event);</span><br><span class="line">	<span class="keyword">var</span> keys = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">	<span class="keyword">if</span>(event.<span class="property">shiftKey</span>)&#123;</span><br><span class="line">		keys.<span class="title function_">push</span>(<span class="string">&quot;shift&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(event.<span class="property">ctrlKey</span>)&#123;</span><br><span class="line">		keys.<span class="title function_">push</span>(<span class="string">&quot;ctrl&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(event.<span class="property">altKey</span>)&#123;</span><br><span class="line">		keys.<span class="title function_">push</span>(<span class="string">&#x27;alt&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span>(event.<span class="property">metaKey</span>)&#123;</span><br><span class="line">		keys.<span class="title function_">push</span>(<span class="string">&#x27;meta&#x27;</span>)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Keys:&#x27;</span> + keys.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="键盘与文本事件"><a href="#键盘与文本事件" class="headerlink" title="键盘与文本事件"></a>键盘与文本事件</h3><p>3个键盘事件：<br>1、 keydown: 用户按下键盘上的任意键时触发，而且如果按住不放的话，会重复触发此事件<br>2、 keypress: 用户按下键盘上的字符键时触发，而且如果按住不放的话，会重复触发此事件<br>3、 keyup: 当用户释放键盘上的键时触发</p>
<p>文本事件：textInput</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(14)-表单</title>
    <url>/2016/11/28/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-14/</url>
    <content><![CDATA[<h2 id="表单的基础知识"><a href="#表单的基础知识" class="headerlink" title="表单的基础知识"></a>表单的基础知识</h2><p>HTMLFormElement 独有的属性和方法：<br>1、 acceptCharset: 服务器能够处理的字符集<br>2、 action: 接受请求的url<br>3、 elements: 表单中所有空间的集合<br>4、 enctype: 请求的编码类型<br>5、 length: 表单中控件的数量<br>6、 method: 要发送HTTP请求类型<br>7、 name: 表单的名称<br>8、 reset(): 将所有表单域重置为默认值<br>9、 submit(): 提交表单<br>10、 target: 用于发送请求和接收相应的窗口名称<span id="more"></span></p>
<p>取得Form元素</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一种方式：</span></span><br><span class="line"><span class="keyword">var</span> myForm = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方式</span></span><br><span class="line"><span class="keyword">var</span> firsetForm = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> myForm = <span class="variable language_">document</span>.<span class="property">forms</span>[<span class="string">&#x27;form2&#x27;</span>];<span class="comment">//取得页面中名称为&#x27;form2&#x27;的表单</span></span><br></pre></td></tr></table></figure>

<h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>用户点击提交按钮或图像按钮时，就会提交表单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;Submit Form&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--图像按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;image&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;submit.png&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>阻止浏览器的表单提交默认事件，就会取消表单提交。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(form, <span class="string">&#x27;submit&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	event = <span class="title class_">Event</span>.<span class="title function_">getEvent</span>(event);</span><br><span class="line">	<span class="title class_">EventUtil</span>.<span class="title function_">preventDefault</span>(event);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">form.<span class="title function_">submit</span>();</span><br></pre></td></tr></table></figure>

<h3 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h3><p>点击重置表单按钮后，所有表单字段都会恢复到页面刚加载完毕时的初始值，如果某个字段值初始值为空，就会恢复为空，而带有默认值得字段，也会恢复为默认值。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用重置按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;reset&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;Reset Form&#x27;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--自定义重置按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;reset&#x27;</span>&gt;</span>Reset Form<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>);</span><br><span class="line">form.<span class="title function_">reset</span>();</span><br></pre></td></tr></table></figure>

<h3 id="表单字段"><a href="#表单字段" class="headerlink" title="表单字段"></a>表单字段</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> form = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myForm&#x27;</span>);</span><br><span class="line"><span class="comment">//取得表单中第一个字段</span></span><br><span class="line"><span class="keyword">var</span> field1 = form.<span class="property">elements</span>[<span class="number">0</span>];</span><br><span class="line"><span class="comment">//取得表单中名为&quot;textbox&quot;的字段</span></span><br><span class="line"><span class="keyword">var</span> filed2 = form.<span class="property">elements</span>[<span class="string">&#x27;textbox&#x27;</span>];</span><br><span class="line"><span class="comment">//取得表单中包含的字段的数量</span></span><br><span class="line"><span class="keyword">var</span> fieldCount = form.<span class="property">elements</span>.<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<h4 id="共有的表单字段属性"><a href="#共有的表单字段属性" class="headerlink" title="共有的表单字段属性"></a>共有的表单字段属性</h4><p>1、 disabled: 布尔值，表示当前字段是否被禁用<br>2、 form: 指向当前字段所属表单的指针，只读<br>3、 name: 当前字段名称<br>4、 readOnly: 布尔值，表示当前字段是否只读<br>5、 tabIndex: 表单当前字段的切换（tab）序号<br>6、 type: 当前字段的类型，如checkbox、radio等<br>7、 value: 当前字段将被提交给服务器的值。</p>
<h4 id="共有的表单字段方法"><a href="#共有的表单字段方法" class="headerlink" title="共有的表单字段方法"></a>共有的表单字段方法</h4><p>每个表单字段都有两个方法：focus()和blur()。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHandler</span>(<span class="variable language_">window</span>, <span class="string">&#x27;load&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="variable language_">document</span>.<span class="property">forms</span>[<span class="number">0</span>].<span class="property">elements</span>[<span class="number">0</span>].<span class="title function_">focus</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>HTML5为表单新增了一个autofocus属性，在支持该属性的浏览器中，设置该属性，不用Javascript就能自动把焦点移动到相应字段。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;input type=&#x27;text&#x27; autofocus&gt;</span><br></pre></td></tr></table></figure>

<h4 id="共有的表单字段事件"><a href="#共有的表单字段事件" class="headerlink" title="共有的表单字段事件"></a>共有的表单字段事件</h4><p>blur、change和focus</p>
<p><strong>button默认的type值为submit</strong></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(15)-Ajax与Comet</title>
    <url>/2016/12/04/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-15/</url>
    <content><![CDATA[<h3 id="XHR用法"><a href="#XHR用法" class="headerlink" title="XHR用法"></a>XHR用法</h3><p>检测XHR对象的readyState属性，该属性表示请求/响应过程的当前活动阶段。属性可取值如下：</p>
<ul>
<li>0：未初始化，尚未调用open()方法</li>
<li>1：启动，已经调用open()方法，但尚未调用send()方法</li>
<li>2：发送，已经调用send()方法，但尚未接到响应</li>
<li>3：接收，已经接收到部分数据</li>
<li>4：完成，已经接收到全部响应数据，而且已经可以在客户端使用了。<span id="more"></span><br>只要readyState属性的值由一个值变成另一个值，都会触发一次readystatechange事件。必须在调用open()方法之前指定onreadystatechange事件处理程序才能确保跨浏览器兼容性。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createXHR</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">XMLHttpRequest</span> !=<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();</span><br><span class="line">	&#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="title class_">ActiveObject</span> !=<span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> versions = [<span class="string">&#x27;MSXML2.XMLHttp.6.0&#x27;</span>,<span class="string">&#x27;MSXML2.XMLHttp.3.0&#x27;</span>,</span><br><span class="line">			<span class="string">&#x27;MSXML2.XMLHttp&#x27;</span>],</span><br><span class="line">			i, len;</span><br><span class="line">		<span class="keyword">for</span>(i=<span class="number">0</span>, len=versions.<span class="property">length</span>; i&lt; len; i++)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				<span class="keyword">new</span> <span class="title class_">ActiveObject</span>(versions[i]);</span><br><span class="line">				aregments.<span class="property">callee</span>.<span class="property">activeXString</span> = versions[i];</span><br><span class="line">			&#125;<span class="keyword">catch</span>(ex)&#123;</span><br><span class="line">				.....</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">createXHR</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt; <span class="number">300</span>||xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">			<span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;request was unsuccessful: &#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xhr.<span class="title function_">open</span>(<span class="string">&#x27;get&#x27;</span>, <span class="string">&#x27;example.txt&#x27;</span>. <span class="literal">true</span>);</span><br><span class="line">xhr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<p>在接收到响应之前可以调用abort()方法来取消异步请求。</p>
<h3 id="跨域资源共享（CORS-cross-origin-resource-sharing"><a href="#跨域资源共享（CORS-cross-origin-resource-sharing" class="headerlink" title="跨域资源共享（CORS: cross-origin resource sharing)"></a>跨域资源共享（CORS: cross-origin resource sharing)</h3><h4 id="IE对CORS实现-XDR（XDomainRequest"><a href="#IE对CORS实现-XDR（XDomainRequest" class="headerlink" title="IE对CORS实现-XDR（XDomainRequest)"></a>IE对CORS实现-XDR（XDomainRequest)</h4><ul>
<li>cookie不会随请求发送，也不会随响应返回</li>
<li>只能设置请求头部信息中的Content-Type字段</li>
<li>不能访问响应头部信息</li>
<li>只支持 GET和POST请求</li>
</ul>
<p>所有的XDR请求都是异步的，不能用来创建同步请求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xdr = <span class="keyword">new</span> <span class="title class_">XDomainRequest</span>();</span><br><span class="line">xdr.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(xdr.<span class="property">responseText</span>);</span><br><span class="line">&#125;</span><br><span class="line">xdr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.somewhere-elese.com/page&#x27;</span>);</span><br><span class="line">xdr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h4 id="其他浏览器对CORS的实现"><a href="#其他浏览器对CORS的实现" class="headerlink" title="其他浏览器对CORS的实现"></a>其他浏览器对CORS的实现</h4><p>WebKit通过XMLHttpRequest对象实现了对CORS的原生支持。</p>
<ul>
<li>不能使用setRequestHeaders()设置自定义头部</li>
<li>不能发送和接收cookie</li>
<li>调用getAllResponseHeaders()方法总会返回空字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> xhr = <span class="title function_">createXHR</span>();</span><br><span class="line">xhr.<span class="property">onreadystatechange</span> = <span class="title function_">functon</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(xhr.<span class="property">readyState</span> == <span class="number">4</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(xhr.<span class="property">status</span> &gt;= <span class="number">200</span> &amp;&amp; xhr.<span class="property">status</span> &lt;<span class="number">300</span>||xhr.<span class="property">status</span> == <span class="number">304</span>)&#123;</span><br><span class="line">			<span class="title function_">alert</span>(xhr.<span class="property">responseText</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="title function_">alert</span>(<span class="string">&#x27;request was unsuccessful: &#x27;</span> + xhr.<span class="property">status</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">xdr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://www.somewhere-elese.com/page&#x27;</span>);</span><br><span class="line">xdr.<span class="title function_">send</span>(<span class="literal">null</span>);</span><br></pre></td></tr></table></figure>

<h3 id="其他跨域技术"><a href="#其他跨域技术" class="headerlink" title="其他跨域技术"></a>其他跨域技术</h3><h4 id="图片Ping"><a href="#图片Ping" class="headerlink" title="图片Ping"></a>图片Ping</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> img = <span class="keyword">new</span> <span class="title class_">Image</span>();</span><br><span class="line">img.<span class="property">onload</span> = img.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;Done!&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line">img.<span class="property">src</span>=<span class="string">&#x27;http://www.example.com/test?name=&quot;test&quot;&#x27;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>缺点：</p>
<ul>
<li>只能发送get    请求</li>
<li>无法访问服务的响应文本</li>
</ul>
<h4 id="JSONP（JSON-with-padding，填充式JSON或参数式JSON）"><a href="#JSONP（JSON-with-padding，填充式JSON或参数式JSON）" class="headerlink" title="JSONP（JSON with padding，填充式JSON或参数式JSON）"></a>JSONP（JSON with padding，填充式JSON或参数式JSON）</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handleResponse</span>(<span class="params">response</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;You&#x27;re at IP address &quot;</span> + response.<span class="property">ip</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> script = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">script.<span class="property">src</span>=<span class="string">&#x27;http://freegeoip.net/json/?callback=handleResponse&#x27;</span>;</span><br><span class="line"><span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">insertBefore</span>(script, <span class="variable language_">document</span>.<span class="property">body</span>,firstChild);</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>优点：能够直接访问响应文本，支持在浏览器与服务器之间双向通信。<br>缺点：</p>
<ul>
<li>JSONP是从其他域中加载代码执行，如果其他域不安全，很可能会在响应中夹带一些恶意代码</li>
<li>要确定JSONP请求是否失败并不容易</li>
</ul>
<h4 id="Comet"><a href="#Comet" class="headerlink" title="Comet"></a>Comet</h4><p>Ajax是一种从页面向服务器请求数据的技术，而Comet则是一种服务器向页面推送数据的技术。两种实现Comet的方法：长轮询和流。</p>
<h4 id="服务器发送事件"><a href="#服务器发送事件" class="headerlink" title="服务器发送事件"></a>服务器发送事件</h4><p>SSE(Server-Sent Events).<br>SSE API用于创建到服务器的单向连接，服务器通过这个连接可以发送任意数量的数据。服务器响应的MIME类型必须是text/event-stream，而且浏览器中的Javascript AP能解析格式输出。SSE支持短轮询、长轮询和HTTP流，而且能在断开连接时自动确定何时重新连接。</p>
<p>1、 SSE API<br> 创建一个新的EventSource 对象，并传进一个入口点</p>
 <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> source = <span class="keyword">new</span> <span class="title class_">EventSource</span>(<span class="string">&#x27;myevents.php&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p> 注意：传入的URL必须与创建对象的页面同源（相同的URL模式、域及端口）。EventSource的实例有一个readyState属性，值为0表示正连接到服务器，值为1表示打开了连接，值为2表示关闭了连接。<br> 三个事件：</p>
<ul>
<li><p>open: 在建立连接时触发。</p>
</li>
<li><p>message: 在从服务器接收到新事件时触发。</p>
</li>
<li><p>error: 在无法建立连接时触发。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source.onmessage = function(event)&#123;</span><br><span class="line">	var data = event.data;</span><br><span class="line">	//处理数据</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务器发送的数据以字符串形式保存在event.data中。<br>默认情况下，EventSource对象会保持与服务器的活动连接。如果连接断开，还会重新连接。这就意味着SSE适合长轮询和HTTP流。如果想强制立即断开连接并且不再重新连接，可以调用close()方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">source.close();</span><br><span class="line"></span><br><span class="line">#### Web Sockets</span><br><span class="line"></span><br><span class="line">1、 Web Sockets API</span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var socket = new WebSocket(&#x27;ws://www.example.com/server.php&#x27;);</span><br></pre></td></tr></table></figure>
<p>必须给WebSocket构造函数传入绝对URL。</p>
</li>
</ul>
<p>实例化WebSocket对象后，浏览器就会马上尝试连接，与XHR类似，WebSocket也有一个readyState属性：</p>
<ul>
<li>WebSocket.OPENING(0): 正在建立连接</li>
<li>WebSocket.OPEN(1): 已经建立连接</li>
<li>WebSocket.CLOSING(2): 正关闭连接</li>
<li>WebSocket.CLOSE(3): 已经关闭连接</li>
</ul>
<p>WebSocket没有readystatechange事件。不过，有其它事件对应着不同状态。readyState的值永远从0开始</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">socket.<span class="title function_">close</span>();<span class="comment">//关闭socket连接，调用close()之后，readyState的值，立即变为2（正在关闭），关闭连接后变成3</span></span><br></pre></td></tr></table></figure>

<p>2、 发送和接收数据</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.example.com/server.php&#x27;</span>);</span><br><span class="line">socket.<span class="title function_">send</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> message = &#123;</span><br><span class="line">	<span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>(),</span><br><span class="line">	<span class="attr">text</span>: <span class="string">&#x27;Hello world&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">socket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(message));</span><br><span class="line"></span><br><span class="line"><span class="comment">//当服务器向客户端发送消息时，WebSocket对象就会触发message事件。</span></span><br><span class="line">socket.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">	<span class="comment">//处理数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>3、 其它事件</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> socket = <span class="keyword">new</span> <span class="title class_">WebSocket</span>(<span class="string">&#x27;ws://www.example.com/server.php&#x27;</span>);</span><br><span class="line">socket.<span class="property">onopen</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;connection established!&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">socket.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;connection error&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">socket.<span class="property">onclose</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;connection closed&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(16)-高级技巧</title>
    <url>/2016/12/11/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-16/</url>
    <content><![CDATA[<h2 id="高级函数"><a href="#高级函数" class="headerlink" title="高级函数"></a>高级函数</h2><h3 id="函数柯里化"><a href="#函数柯里化" class="headerlink" title="函数柯里化"></a>函数柯里化</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">curry</span>(<span class="params">fn</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> innerArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">		<span class="keyword">var</span> finalArgs = args.<span class="title function_">concat</span>(innerArgs);</span><br><span class="line">		<span class="keyword">return</span> fn.<span class="title function_">apply</span>(<span class="literal">null</span>, finalArgs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curriedAdd = <span class="title function_">curry</span>(add, <span class="number">5</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd</span>(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> curriedAdd1 = <span class="title function_">curry</span>(add, <span class="number">5</span>, <span class="number">13</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">curriedAdd1</span>());</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>利用函数柯里化，可以构造出更为复杂的bind()函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">bind</span>(<span class="params">fn, context</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>, <span class="number">2</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> innerArgs = <span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">		<span class="keyword">var</span> finalArgs = args.<span class="title function_">concat</span>(innerArgs);</span><br><span class="line">		<span class="keyword">return</span> fn.<span class="title function_">apply</span>(context, finalArgs);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="防篡改对象"><a href="#防篡改对象" class="headerlink" title="防篡改对象"></a>防篡改对象</h2><h3 id="不可扩展对象"><a href="#不可扩展对象" class="headerlink" title="不可扩展对象"></a>不可扩展对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;2107&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person);</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>调用Object.preverExtensions()方法后，就不能给person对象添加新属性和方法了，对于已有属性和方法，仍然可以修改和删除。另外使用Object.isExtensible()方法可以确定对象是否可以扩展。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;2107&#x27;</span>&#125;;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person));<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">preventExtensions</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Object</span>.<span class="title function_">isExtensible</span>(person));<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<h3 id="密封对象"><a href="#密封对象" class="headerlink" title="密封对象"></a>密封对象</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123; <span class="attr">name</span>: <span class="string">&#x27;2107&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">seal</span>(person);</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">1</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">//2107</span></span><br></pre></td></tr></table></figure>

<p>Object.isSealed()方法可以确定对象是否被密封了。</p>
<h3 id="冻结对象"><a href="#冻结对象" class="headerlink" title="冻结对象"></a>冻结对象</h3><p>最严格的防止篡改级别是冻结对象。冻结的对象既不可扩展，又是密封的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = &#123;<span class="attr">name</span>: <span class="string">&#x27;2107&#x27;</span>&#125;;</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(person);</span><br><span class="line"></span><br><span class="line">person.<span class="property">age</span> = <span class="number">29</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">age</span>);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.<span class="property">name</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">// 2107</span></span><br><span class="line"></span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;1901&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">// 2107</span></span><br></pre></td></tr></table></figure>

<h2 id="高级定时器"><a href="#高级定时器" class="headerlink" title="高级定时器"></a>高级定时器</h2><h3 id="重复定时器"><a href="#重复定时器" class="headerlink" title="重复定时器"></a>重复定时器</h3><p>setInterval()定时器有两个问题：<br>1、 某些间隔会跳过；<br>2、 多个定时器代码执行之间的间隔可能会比预期的小。<br>为了避免setInterval()重复定时器的缺点，可以使用链式setTimeout()调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">setTimeout(function()&#123;</span><br><span class="line">	//事件处理程序</span><br><span class="line">	setTimeout(arguments.callee, 1000);</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure>

<h3 id="Yielding-Processes"><a href="#Yielding-Processes" class="headerlink" title="Yielding Processes"></a>Yielding Processes</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">chunk</span>(<span class="params">array, process, context</span>)&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">var</span> item  = array.<span class="title function_">shift</span>();</span><br><span class="line">		prcoess.<span class="title function_">call</span>(context, item);</span><br><span class="line">		<span class="keyword">if</span>(array.<span class="property">length</span> &gt; <span class="number">1</span>)&#123;</span><br><span class="line">			<span class="title function_">setTimout</span>(argumenets.<span class="property">callee</span>, <span class="number">100</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h3><p>第一次调用函数，创建一个定时器，在指定的时间间隔之后运行代码。当第二次调用该函数时，清除前一次的定时器，并设置另一个。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> processor = &#123;</span><br><span class="line">	<span class="attr">timeoutId</span>: <span class="literal">null</span>,</span><br><span class="line">	<span class="attr">preformProcessing</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="comment">//实际执行代码</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">process</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timeoutId</span>);</span><br><span class="line">		<span class="keyword">var</span> that = <span class="variable language_">this</span>;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">timoutId</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			that.<span class="title function_">performProcessing</span>();</span><br><span class="line">		&#125;, <span class="number">1000</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">processor.<span class="title function_">process</span>();</span><br></pre></td></tr></table></figure>
<p>简化：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">method, context</span>)&#123;</span><br><span class="line">	<span class="built_in">clearTimeout</span>(method.<span class="property">tId</span>);</span><br><span class="line">	method.<span class="property">tId</span> = <span class="title function_">setTimout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		method.<span class="title function_">call</span>(context);</span><br><span class="line">	&#125;, <span class="number">100</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>对于onresize:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">resizeDiv</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> div = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myDIv&#x27;</span>);</span><br><span class="line">	div.<span class="property">style</span>.<span class="property">height</span> = div.<span class="property">offsetWidth</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">onresize</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">throttle</span>(resizeDiv);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">EventTarget</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">handlers</span> = &#123;&#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">EventTarget</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	<span class="attr">constructor</span>: <span class="title class_">EventTarget</span>,</span><br><span class="line">	<span class="attr">addHandler</span>: <span class="keyword">function</span>(<span class="params">type, handler</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">handlers</span>[type] == <span class="string">&#x27;undefined&#x27;</span>)&#123;</span><br><span class="line">			<span class="variable language_">this</span>.<span class="property">handlers</span>[type] = [];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable language_">this</span>.<span class="property">handlers</span>[type].<span class="title function_">push</span>(handler);</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">fire</span>: <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(!event.<span class="property">target</span>)&#123;</span><br><span class="line">			event.<span class="property">target</span> = <span class="variable language_">this</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>[event.<span class="property">type</span>] <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> handlers = <span class="variable language_">this</span>.<span class="property">handlers</span>[event.<span class="property">type</span>];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.<span class="property">length</span>; i &lt; len; i++)&#123;</span><br><span class="line">				handlers[i](event);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">removeHandler</span>: <span class="keyword">function</span>(<span class="params">type, handler</span>)&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="variable language_">this</span>.<span class="property">handlers</span>[type] <span class="keyword">instanceof</span> <span class="title class_">Array</span>)&#123;</span><br><span class="line">			<span class="keyword">var</span> handlers = <span class="variable language_">this</span>.<span class="property">handlers</span>[type];</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>, len = handlers.<span class="property">length</span>; i &lt; len; i++)&#123;</span><br><span class="line">				<span class="keyword">if</span>(handlers[i] === handler)&#123;</span><br><span class="line">					<span class="keyword">break</span>;</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			handlers.<span class="property">splice</span>[i, <span class="number">1</span>];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handlerMessage</span>(<span class="params">event</span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Message received: &#x27;</span> + event.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//创建一个新对象</span></span><br><span class="line"><span class="keyword">var</span> target = <span class="keyword">new</span> <span class="title class_">EventTarget</span>();</span><br><span class="line"><span class="comment">//添加一个事件处理程序</span></span><br><span class="line">target.<span class="title function_">addHandler</span>(<span class="string">&#x27;message&#x27;</span>, handlerMessage);</span><br><span class="line"><span class="comment">//触发事件</span></span><br><span class="line">target.<span class="title function_">fire</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;message&#x27;</span>, <span class="attr">message</span>:<span class="string">&#x27;hello world!&#x27;</span>&#125;);</span><br><span class="line"><span class="comment">//删除事件处理程序</span></span><br><span class="line">target.<span class="title function_">removeHandler</span>(<span class="string">&#x27;message&#x27;</span>, handlerMessage);</span><br><span class="line"><span class="comment">//再次触发，无响应</span></span><br><span class="line">target.<span class="title function_">fire</span>(&#123;<span class="attr">type</span>:<span class="string">&#x27;message&#x27;</span>, <span class="attr">message</span>: <span class="string">&#x27;hello world&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(17)-离线应用与客户端存储</title>
    <url>/2016/12/16/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-17/</url>
    <content><![CDATA[<h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><h3 id="Cookie"><a href="#Cookie" class="headerlink" title="Cookie"></a>Cookie</h3><p>构成：</p>
<ul>
<li>名称：一个唯一确定cookie的名称，cookie的名称必须是经过URL编码的。</li>
<li>值：储存在cookie中的字符串值，值必须被URL编码。</li>
<li>域：cookie对哪个域是有效的，所有向该域发送的请求中都包含这个cookie信息。</li>
<li>路径：对于指定域中的那个路径，应该向服务器发送cookie。</li>
<li>失效时间：表示cookie何时应该被删除的时间戳。</li>
<li>安全标志<span id="more"></span>
cookie的读取、写入和删除。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">CookieUtil</span> = &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">&#x27;=&#x27;</span>,</span><br><span class="line">            cookieStart = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(cookieName),</span><br><span class="line">            cookieValue = <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(cookieStart &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">var</span> cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;;&#x27;</span>, cookieStart);</span><br><span class="line">            <span class="keyword">if</span>(cookieEnd == -<span class="number">1</span>)&#123;</span><br><span class="line">                cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="property">length</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">substring</span>(cookieStart + cookieName.<span class="property">length</span>, cookieEnd));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cookieValue;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">set</span>: <span class="keyword">function</span>(<span class="params">name, value, expires, path, domain, secure</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieText = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">&#x27;=&#x27;</span> + <span class="built_in">encodeURIComponent</span>(value);</span><br><span class="line">        <span class="keyword">if</span>(expires <span class="keyword">instanceof</span> <span class="title class_">Date</span>)&#123;</span><br><span class="line">            cookieText += <span class="string">&#x27;; expires=&#x27;</span> + expires.<span class="title function_">toGMTString</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(path)&#123;</span><br><span class="line">            cookieText +=<span class="string">&#x27;; path=&#x27;</span> + path;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(domain)&#123;</span><br><span class="line">            cookieText +=<span class="string">&#x27;; domain=&#x27;</span> + domain;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(secure)&#123;</span><br><span class="line">            cookieText +=<span class="string">&#x27;; secure&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">cookie</span> = cookieText;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">unset</span>: <span class="keyword">function</span>(<span class="params">name, path, domain, secure</span>)&#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">set</span>(name,<span class="string">&#x27;&#x27;</span>,<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">0</span>), path, domain, secure);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Web存储机制"><a href="#Web存储机制" class="headerlink" title="Web存储机制"></a>Web存储机制</h3><p>1、 Storage提供如下方法：</p>
<ul>
<li>clear(): 删除所有值</li>
<li>getItem(name): 根据指定名字name获取对应的值</li>
<li>key(index): 或得index位置处的名字</li>
<li>removeItem(name): 删除指定的name的键值对</li>
<li>setItem(name, value): 为指定的name设置一个对应的值</li>
</ul>
<h4 id="sessionStorage-对象"><a href="#sessionStorage-对象" class="headerlink" title="sessionStorage 对象"></a>sessionStorage 对象</h4><h4 id="localStorage"><a href="#localStorage" class="headerlink" title="localStorage"></a>localStorage</h4><h4 id="indexedDB"><a href="#indexedDB" class="headerlink" title="indexedDB"></a>indexedDB</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> request, database;</span><br><span class="line">request = indexedDB.<span class="title function_">open</span>(<span class="string">&#x27;admin&#x27;</span>);</span><br><span class="line">request.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(event.<span class="property">target</span>.<span class="property">errorCode</span>);</span><br><span class="line">&#125;</span><br><span class="line">request.<span class="property">onsuccess</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    database = event.<span class="property">target</span>.<span class="property">result</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(18)-新兴API</title>
    <url>/2016/12/17/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-18/</url>
    <content><![CDATA[<h2 id="Page-Visibility-API"><a href="#Page-Visibility-API" class="headerlink" title="Page Visibility API"></a>Page Visibility API</h2><ul>
<li>document.hidden: 表示页面是否隐藏的布尔值</li>
<li>document.VisibilityState: 表示下列4个可能状态的值<ul>
<li>页面在后台标签页中或浏览器最小化</li>
<li>页面在前台标签页中</li>
<li>实际的页面已经隐藏，但用户可以看到页面的预览</li>
<li>页面在屏幕外执行预渲染处理</li>
</ul>
</li>
<li>visibilitychange事件: 当文档从可见变为不可见或从不可见变为可见时，触发该事件<span id="more"></span>

</li>
</ul>
<h2 id="Geolocation-API"><a href="#Geolocation-API" class="headerlink" title="Geolocation API"></a>Geolocation API</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.<span class="property">geolocation</span>.<span class="title function_">getCurrentPosition</span>(<span class="keyword">function</span>(<span class="params">position</span>)&#123;</span><br><span class="line">    <span class="comment">//position对象有两个属性：coords和timestamp</span></span><br><span class="line">    <span class="comment">//而coords对象将包含latitude(维度)、longitude(经度)、accuracy(经纬度坐标的精度，以米为单位)</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(position.<span class="property">coords</span>.<span class="property">latitude</span> + <span class="string">&#x27;,&#x27;</span> + position.<span class="property">coords</span>.<span class="property">longitude</span>);</span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(error.<span class="property">code</span> + <span class="string">&#x27;,&#x27;</span> + error.<span class="property">message</span>);</span><br><span class="line">&#125;,&#123;</span><br><span class="line">    <span class="attr">enableHighAccuracy</span>: <span class="literal">true</span>,<span class="comment">//表示是否必须尽可能使用最准确的位置信息</span></span><br><span class="line">    <span class="attr">timeout</span>: <span class="number">5000</span>,<span class="comment">//等待位置信息的最长时间</span></span><br><span class="line">    <span class="attr">maximumAge</span>: <span class="number">25000</span><span class="comment">//表示上一次取得坐标信息的有效时间，如果时间到，则重新取得新坐标信息</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> watchId = navigator.<span class="property">geolocation</span>.<span class="title function_">watchPosition</span>(<span class="keyword">function</span>(<span class="params">position</span>)&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title function_">clearWatch</span>(watchId);</span><br></pre></td></tr></table></figure>
<h2 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> filesList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;myFile&quot;</span>);</span><br><span class="line"><span class="title class_">EventUtil</span>.<span class="title function_">addHander</span>(fileList, <span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> files = <span class="title class_">EventUtil</span>.<span class="title function_">getTarget</span>(event).<span class="property">files</span>,</span><br><span class="line">        i = <span class="number">0</span>,</span><br><span class="line">        len = files.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">while</span>(i &lt; len)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(files[i].<span class="property">name</span> + <span class="string">&#x27;(&#x27;</span> + files[i].<span class="property">type</span> + <span class="string">&#x27;,&#x27;</span> files[i].<span class="property">size</span> + <span class="string">&#x27;bytes)&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="FileReader类型"><a href="#FileReader类型" class="headerlink" title="FileReader类型"></a>FileReader类型</h3><ul>
<li>readAsText(file, encoding): 以纯文本形式读取文件，将读取到的文件保存在result属性中，第二个参数是指定编码类型，可选。</li>
<li>readAsDataURL(file): 读取文件并将文件以数据URI的形式存放在result属性中；</li>
<li>readAsBinaryString(file): 读取文件并将一个字符串保存在result属性中，字符传中的每个字符表示一个字节。</li>
<li>readAsArrayBuffer(file): 读取文件并将一个包含文件内容的ArrayBuffer保存在result属性中。</li>
</ul>
<p>由于读取过程是异步的，FileReader也提供了几个事件，最有用的三个：progress、error和load。error只有一个属性code，1表示未找到文件，2表示安全性错误，3表示读取中断，4表示文件不可读，5表示编码错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fileList = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;myFile&#x27;</span>);</span><br><span class="line"><span class="title class_">EventUitl</span>.<span class="title function_">addHander</span>(fileList, <span class="string">&#x27;cchange&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> info = <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        output = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;output&#x27;</span>),</span><br><span class="line">        progress = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;progress&#x27;</span>),</span><br><span class="line">        files = <span class="title class_">EventUtil</span>.<span class="title function_">getTarget</span>(event).<span class="property">files</span>,</span><br><span class="line">        type = <span class="string">&#x27;default&#x27;</span>,</span><br><span class="line">        reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>();</span><br><span class="line">    <span class="keyword">if</span>(<span class="regexp">/image/</span>.<span class="title function_">test</span>(files[<span class="number">0</span>].<span class="property">type</span>))&#123;</span><br><span class="line">        reader.<span class="title function_">readAsDataURL</span>(files[<span class="number">0</span>]);</span><br><span class="line">        type = <span class="string">&#x27;image&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        reader.<span class="title function_">readAsText</span>(files[<span class="number">0</span>]);</span><br><span class="line">        type = <span class="string">&#x27;text&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">error</span>)&#123;</span><br><span class="line">        output.<span class="property">innerHTML</span> = <span class="string">&#x27;Could not read file, error code is &#x27;</span> + reader.<span class="property">error</span>.<span class="property">code</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="property">onprogress</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(event.<span class="property">lengthComputable</span>)&#123;</span><br><span class="line">            progress.<span class="property">innerHTML</span> = event.<span class="property">loaded</span> + <span class="string">&#x27;/&#x27;</span> + event.<span class="property">total</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> html = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">switch</span>(type)&#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&#x27;image&#x27;</span>:</span><br><span class="line">                html = <span class="string">&#x27;&lt;img src=\&quot;&quot;+ reader.result + &quot;\&quot; &gt;&quot;;</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">            case &#x27;</span>text<span class="string">&#x27;:</span></span><br><span class="line"><span class="string">                html = reader.result;</span></span><br><span class="line"><span class="string">                break;</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">        output.innerHTML = html;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;)</span></span><br></pre></td></tr></table></figure>

<h3 id="读取部分内容"><a href="#读取部分内容" class="headerlink" title="读取部分内容"></a>读取部分内容</h3><p>blob是File类型的服类型。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">blobSlice</span>(<span class="params">blob, startByte, length</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(blob.<span class="property">slice</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> blob.<span class="title function_">slice</span>(startByte, length);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blob.<span class="property">webkitSlice</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> blob.<span class="title function_">webkitSlice</span>(startByte, length);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(blob.<span class="property">mozSlice</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> blob.<span class="title function_">mozSlice</span>(startByte, length);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象URL"><a href="#对象URL" class="headerlink" title="对象URL"></a>对象URL</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createObjectURL</span>(<span class="params">blob</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">URL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">URL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">webkitURL</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">window</span>.<span class="property">webkitURL</span>.<span class="title function_">createObjectURL</span>(blob);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数返回的是一个字符串，指向一块内存地址。</p>
<p>如果不需要相应的数据，最好释放它占用的内存，可以把对象URL传给window.URL.revokeObjectURL()</p>
<h3 id="读取拖放的文件"><a href="#读取拖放的文件" class="headerlink" title="读取拖放的文件"></a>读取拖放的文件</h3><h3 id="使用XHR上传文件"><a href="#使用XHR上传文件" class="headerlink" title="使用XHR上传文件"></a>使用XHR上传文件</h3><h2 id="Web计时"><a href="#Web计时" class="headerlink" title="Web计时"></a>Web计时</h2><p>window.performance对象</p>
<p>window.performance.navigation包含属性：</p>
<ul>
<li>redirectCount: 页面加载的重定向次数</li>
<li>type: 数值常量，表示刚刚发生的导航类型<ul>
<li>performance.navigation.TYPE_NAVIGATE(0): 页面第一次加载</li>
<li>performance.navigation.TYPE_RELOAD(1): 页面重载过</li>
<li>performance.navigation.TYPE_BACK_FORWARD(2): 页面通过后退或前进按钮打开</li>
</ul>
</li>
</ul>
<p>performance.timing属性也是一个对象，每个对象属性都是时间戳。</p>
<ul>
<li>navigationStart: 开始导航到当前页面的时间。</li>
<li>unloadEventStart: 前一个页面的unload事件开始的时间。只有在前一个页面与当前页面来自同一个域时，这个属性值才有值，否则值为0</li>
<li>….</li>
</ul>
<h2 id="Web-Workers"><a href="#Web-Workers" class="headerlink" title="Web Workers"></a>Web Workers</h2><h3 id="使用worker"><a href="#使用worker" class="headerlink" title="使用worker"></a>使用worker</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> worker = <span class="keyword">new</span> <span class="title class_">Worker</span>(<span class="string">&#x27;xxx.js&#x27;</span>);</span><br><span class="line">worker.<span class="title function_">postMessage</span>(<span class="string">&#x27;start!&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>Worker通过message和error事件与页面通信。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">worker.<span class="property">onmessage</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> data = event.<span class="property">data</span>;</span><br><span class="line">    <span class="comment">//数据处理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>Worker不能完成给定的任务时会触发error事件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">worker.<span class="property">onerror</span> = <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Error: &#x27;</span> + event.<span class="property">fielname</span> + <span class="string">&#x27; (&#x27;</span> + event.<span class="property">lineno</span> + <span class="string">&quot;):&quot;</span> + event.<span class="property">message</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>终止Worker动作， terminate()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">worker.<span class="title function_">terminate</span>();</span><br></pre></td></tr></table></figure>

<h3 id="Worker的全局作用域"><a href="#Worker的全局作用域" class="headerlink" title="Worker的全局作用域"></a>Worker的全局作用域</h3><p>Web Worker所执行的Javascript代码完全在另一个作用域中，与当前网页中的代码不共享作用域。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(6)-引用类型之单体内置对象</title>
    <url>/2016/11/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-6/</url>
    <content><![CDATA[<p>由ECMAScript实现提供的，不依赖宿主环境的对象，这些对象在ECMAScript程序执行之前就已经存在了。比如： Object、Array、String，还有两个单体内置对象：Global和Math。<span id="more"></span></p>
<h2 id="Global对象"><a href="#Global对象" class="headerlink" title="Global对象"></a>Global对象</h2><p>1、 encodeURI():主要用于整个URI，而encodeURIComponent()主要用于URI中的某一段进行编码。两者主要区别在于：encodeURI()方法不会对本身属于URI的特殊字符进行编码，比如：冒号、正斜杠、问号和井号；而encodeURIComponent则会对它发现的任何非标准字符进行编码。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;https://www.zhihu.com/topic#Web 开发&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURI</span>(s));<span class="comment">//&#x27;https://www.zhihu.com/topic#Web%20%E5%BC%80%E5%8F%91&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">encodeURIComponent</span>(s));<span class="comment">//&#x27;https%3A%2F%2Fwww.zhihu.com%2Ftopic%23Web%20%E5%BC%80%E5%8F%91&#x27;</span></span><br></pre></td></tr></table></figure>
<p>与encodeURI()和encodeURICompoent()方法对应的，有decodeURI()和decodeURIComponent()方法。decodeURI()方法只能对使用encodeURI()方法替换的字符进行解码。同样，decodeURIComponent()方法能够解码encodeURIComponent()方法编码的所有字符，即他可以解码任何特殊字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> uri = <span class="string">&#x27;https%3A%2F%2Fwww.zhihu.com%2Ftopic%23Web%20%E5%BC%80%E5%8F%91&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURI</span>(uri));<span class="comment">//&#x27;https%3A%2F%2Fwww.zhihu.com%2Ftopic%23Web 开发&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">decodeURIComponent</span>(uri));<span class="string">&#x27;https://www.zhihu.com/topic#Web 开发&#x27;</span></span><br></pre></td></tr></table></figure>

<p>2、eval()方法</p>
<p>eval()方法，大概是ECMAScript语言中最强大的一个方法。通过eval()执行的代码被认为是包含该次调用的执行环境的一部分。因此被执行的代码具有与该环境相同的作用域链。因此eval()方法可以调用包含在环境中的变量。</p>
<p>严格模式下，在外部访问不到eval()中创建的任何变量或函数。</p>
<p>3、 Global对象的属性</p>
<p>4、 window对象</p>
<p>在web中，全局对象作为window的一部分加以实现。因此全局作用域中所有声明的属性和方法，都成了window对象的属性。</p>
<p>另一种取得Global对象的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="variable language_">global</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure>

<h2 id="Math对象"><a href="#Math对象" class="headerlink" title="Math对象"></a>Math对象</h2><p>1、 Math对象的属性</p>
<p>Math.E/Math.LN10/Math.PI等。</p>
<p>2、 min()和max()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="title function_">max</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br><span class="line"><span class="keyword">var</span> min = <span class="title class_">Math</span>.<span class="title function_">min</span>(<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span>);</span><br></pre></td></tr></table></figure>
<p>要获得数组中的最大/最小值可以使用apply()方法</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> vaules = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</span><br><span class="line"><span class="keyword">var</span> max = <span class="title class_">Math</span>.<span class="property">max</span>.<span class="title function_">apply</span>(<span class="title class_">Math</span>, values);</span><br></pre></td></tr></table></figure>

<p>3、 舍入方法</p>
<p>Math.ceil(): 上舍入，即数值向上舍入为最接近的整数。<br>Math.floor(): 下舍入<br>Math.round(): 执行标准输入</p>
<p>4、 random()方法： 返回大于0小于1的一个随机数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//返回一个1到10之间的数值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * <span class="number">10</span> + <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回一个2到10之间的数值</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()* <span class="number">9</span> + <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定范围</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">selectFrom</span>(<span class="params">lowerValue, upperValue</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> choices = upperValue - lowerValue + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * choices + lowerValue);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>5、 其他方法</p>
<p>Math.abs(num)/Math.exp(num)/Math.log(num)/Math.pow(num, power)等等</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(7)-面向对象的程序设计</title>
    <url>/2016/11/07/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-7/</url>
    <content><![CDATA[<p>ECMA-262定义对象：</p>
<blockquote>
<p>无序属性的集合，其属性可以包含基本值、对象或者函数。</p>
</blockquote>
<p>每个对象都是基于一个引用类型创建的。<span id="more"></span></p>
<h2 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h2><h3 id="工厂模式"><a href="#工厂模式" class="headerlink" title="工厂模式"></a>工厂模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name,age,job</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	o.<span class="property">name</span> = name;</span><br><span class="line">	o.<span class="property">age</span> = age;</span><br><span class="line">	o.<span class="property">job</span> = job;</span><br><span class="line">	o.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title function_">createPerson</span>( <span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">18</span>, </span><br><span class="line"><span class="string">&#x27;Teacher&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>缺点： 没有解决对象识别问题，即怎样知道一个对象的类型。</p>
<h3 id="构造函数模式"><a href="#构造函数模式" class="headerlink" title="构造函数模式"></a>构造函数模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Engineer&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Lily&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;Teacher&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>经历了一下四个步骤：<br>1、 创建一个新对象；<br>2、 将构造函数的作用于赋给新对象（this指向了这个新对象）；<br>3、执行构造函数中的代码（为新对象添加属性)；<br>4、返回新对象。</p>
<p>上例中，person1和person2保存着Person的一个不同的实例，但它们拥有一个constructor属性，该属性指向person。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2 <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2 <span class="keyword">instanceof</span> <span class="title class_">Person</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>以这种方式定义的构造函数是定义在Global对象上中的（在浏览器中是window对象）。</p>
<p>1、 将构造函数当做函数</p>
<p>构造函数与普通函数唯一的区别在于调用方式不同。任何函数，只要通过new操作符来调用，那它就可以作为构造函数，如果不通过new操作符，那它跟普通函数没有区别。</p>
<p>2、 构造函数问题<br>每个方法都要在每个实例上重新创建一遍，person1和person2都有一个名为sayName()的方法，但两个方法不是同一个Function的实例。ECMAScript中函数式对象，因此每定义一个函数，也就是实例化一个对象。因此，构造函数可以这样定义：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">sayName</span> = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;alert(this.name&#x27;</span>);<span class="comment">//与声明函数在逻辑上是等价的。</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>显然，每个Person实例都包含一个不同的Function实例来显示name。这种方式创建函数，会导致不同的作用域链和标识符解析，但新创建Function新实例的机制仍然相同，因此，不同实例上的同名函数式不等的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">sayname</span> == person2.<span class="property">sayName</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>


<h3 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h3><p>每个函数都有一个prototype(原型)属性，这个属性是一个指针，指向一个对象，而这个对象的用途是包含可以有特定类型的所有实例共享的属性和方法。prototype就是通过调用构造函数而创建的那个对象实例的原型对象。使用原型对象的好处就是，可以让所有实例共享它所包含的属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&#x27;fe&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">sayName</span>());<span class="comment">//&#x27;test&#x27;</span></span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">sayName</span>());<span class="comment">//&#x27;test&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person3 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">person3.<span class="property">name</span> = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person3.<span class="title function_">sayName</span>());<span class="comment">//&#x27;Tom&#x27;，来自实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">sayName</span>());<span class="comment">//&#x27;test&#x27;, 来自原型</span></span><br></pre></td></tr></table></figure>
<p>原型对象测试</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="title function_">isPorotypeOf</span>(person1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">getPrototypeOf</span>(person1 == person.<span class="property"><span class="keyword">prototype</span></span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<p>在对象实例中添加属性，这个属性就是屏蔽原型对象中的同名属性，但不会修改该那个属性。即使在实例中将属性设置为null，也只会在实例中设置该属性。使用delete操作符可以完全删除实例属性，从而能够重新访问原型中的属性。</p>
<p>hasOwnProperty()方法可以检测一个属性是存在于实例中是还是原型中。只有属性存在于对象实例中，才会返回true。</p>
<h4 id="原型与-in-操作符"><a href="#原型与-in-操作符" class="headerlink" title="原型与 in 操作符"></a>原型与 in 操作符</h4><p>in操作符会在通过对象能够访问给定属性时返回true，无论该属性存在于实例中还是原型中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&#x27;fe&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person1); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">person1.<span class="property">name</span> = <span class="string">&#x27;dd&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">name</span>);<span class="comment">//&#x27;dd&#x27;-来自实例</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> person1); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="property">name</span>);<span class="comment">// &#x27;test&#x27;-来自原型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person2.<span class="title function_">hasOwnProperty</span>(<span class="string">&#x27;name&#x27;</span>));<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;name&#x27;</span> <span class="keyword">in</span> perosn2);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p>Object.keys()枚举对象上所有可枚举的实例属性</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">name</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">job</span> = <span class="string">&#x27;fe&#x27;</span>;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(keys);<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;, &#x27;job&#x27;, &#x27;sayName&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//通过实例调用</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="property">name</span> = <span class="string">&#x27;Lilei&#x27;</span>;</span><br><span class="line">p1.<span class="property">age</span> = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">var</span> p1keys = <span class="title class_">Object</span>.<span class="title function_">keys</span>(p1);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1keys);<span class="comment">//[&#x27;name&#x27;, &#x27;age&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>Object.getOwnPropertyNames()可以得到所有实例属性，无论它是否可枚举。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.getOwnPropertyNames(Person.prototype);//[&quot;constructor&quot;, &quot;name&quot;, &quot;age&quot;, &quot;job&quot;, &quot;sayName&quot;]</span><br></pre></td></tr></table></figure>
<h4 id="原型的动态性"><a href="#原型的动态性" class="headerlink" title="原型的动态性"></a>原型的动态性</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayHi</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hi&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">friend.<span class="title function_">sayHi</span>();<span class="comment">//&#x27;hi&#x27;</span></span><br></pre></td></tr></table></figure>
<p>这是因为实例与原型之间的松散连接关系。可以随时为原型添加属性和方法，并且修改后能够立即在所有对象实例中反映出了。<br>但是如果重写整个原型对象，情况就不一样了。调用构造函数时回味实例添加一个指向最初原型的[[prototype]]指针，而把原型修改为另外一个对象，就等于切断了构造函数与最初原型之间的联系。<strong>实例中的指针仅指向原型，而不指向构造函数。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	<span class="attr">constructor</span>: <span class="title class_">Person</span>,</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;test&#x27;</span>,</span><br><span class="line">	<span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">	<span class="attr">job</span>: <span class="string">&#x27;fe&#x27;</span>,</span><br><span class="line">	<span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">friend.<span class="title function_">sayName</span>();<span class="comment">//error</span></span><br></pre></td></tr></table></figure>

<img src='http://7xprrp.com1.z0.glb.clouddn.com/js/prototype.png' alt=''/>

<h4 id="原型对象的问题"><a href="#原型对象的问题" class="headerlink" title="原型对象的问题"></a>原型对象的问题</h4><p>最大问题是由其共享的本性导致的。</p>
<h3 id="组合使用构造函数模式和原型模式"><a href="#组合使用构造函数模式和原型模式" class="headerlink" title="组合使用构造函数模式和原型模式"></a>组合使用构造函数模式和原型模式</h3><p>构造函数模式用于定义实例属性，而原型模式用于定义方法和共享的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">friends</span> = [<span class="string">&#x27;Tom&#x27;</span>,<span class="string">&#x27;Lilei&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	<span class="attr">constructor</span>: <span class="title class_">Person</span>,</span><br><span class="line">	<span class="attr">sayName</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;fe&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;p2&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;fe&#x27;</span>);</span><br><span class="line"></span><br><span class="line">person1.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;Lily&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person1.<span class="property">friends</span> === preson2.<span class="property">friends</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(preson1.<span class="property">sayName</span> === person2.<span class="property">sayName</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<h3 id="动态原型模式"><a href="#动态原型模式" class="headerlink" title="动态原型模式"></a>动态原型模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">job</span> = job;</span><br><span class="line">	<span class="keyword">if</span>(<span class="keyword">typeof</span> <span class="variable language_">this</span>.<span class="property">sayName</span> != <span class="string">&#x27;function&#x27;</span>)&#123;</span><br><span class="line">		<span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Test&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;fe&#x27;</span>);</span><br><span class="line">friend.<span class="title function_">sayName</span>();</span><br></pre></td></tr></table></figure>
<p>使用动态原型模式，就不能使用对象字面量重写原型了。因为，如果已经创建了实例的情况下重写原型，会切断现有实例与新原型之间的联系。</p>
<h3 id="寄生构造函数模式"><a href="#寄生构造函数模式" class="headerlink" title="寄生构造函数模式"></a>寄生构造函数模式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">Person</span>(<span class="params">name, age, job</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> o = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	o.<span class="property">name</span> = name;</span><br><span class="line">	o.<span class="property">age</span> = age;</span><br><span class="line">	o.<span class="property">job</span> = job;</span><br><span class="line">	o.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> friend = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&#x27;Tom&#x27;</span>, <span class="number">18</span>, <span class="string">&#x27;fe&#x27;</span>);</span><br><span class="line">friend.<span class="title function_">sayName</span>();<span class="comment">//&#x27;Tom&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="稳妥构造函数模式"><a href="#稳妥构造函数模式" class="headerlink" title="稳妥构造函数模式"></a>稳妥构造函数模式</h3><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>ECMAScript支持实现继承，主要依靠原型链来实现。</p>
<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>将原型链作为实现继承的主要方法，其基本思想是利用原型让一个引用类型继承另一个引用类型的属性和方法。<br>构造函数、原型和实例的关系：每个构造函数都要一个原型对象，原型对象都包含一个指向构造函数的指针，而实例都包含一个指向原型对象的内部指针。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">property</span> = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSuperValue</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">property</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">subproperty</span> = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">getSubValue</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">subproperty</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance = <span class="keyword">new</span> <span class="title class_">SubType</span>();</span><br><span class="line"><span class="title function_">alert</span>(instance.<span class="title function_">getSuperValue</span>());<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<img src='http://7xprrp.com1.z0.glb.clouddn.com/prototype/jicheng.png' alt=''/>

<p>原型链问题:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(instance1.<span class="property">colors</span>);<span class="comment">//&#x27;red,green,blue,black&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title function_">alert</span>(instance2.<span class="property">colors</span>);<span class="comment">//&#x27;red,green,blue,black&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="借用构造函数"><a href="#借用构造函数" class="headerlink" title="借用构造函数"></a>借用构造函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;green&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">subType</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="comment">//继承了SuperType</span></span><br><span class="line">	<span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> instance1 = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(instance1.<span class="property">colors</span>);<span class="comment">//&#x27;red,green,blue,black&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title function_">alert</span>(instance2.<span class="property">colors</span>);<span class="comment">//&#x27;red,green,blue&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>使用apply或call方法，通过call()或apply()方法，实际上在新创建的SubType实例环境下调用了SuperType构造函数。</p>
<h3 id="组合继承"><a href="#组合继承" class="headerlink" title="组合继承"></a>组合继承</h3><p>将原型链和借用构造函数的技术组合到一起，发挥二者之长的继承模式。思路：使用原型链实现对原型属性和方法的继承，而通过构造函数来实现对实例属性的继承。通过原型上定义方法实现了函数复用，又能保证没给个实例都有自己的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">SuperType</span>(<span class="params">name</span>)&#123;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">colors</span> = [<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;green&#x27;</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SuperType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayName</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">SubType</span>(<span class="params">name, age</span>)&#123;</span><br><span class="line">	<span class="title class_">SuperType</span>.<span class="title function_">call</span>(<span class="variable language_">this</span>, name);</span><br><span class="line">	<span class="variable language_">this</span>.<span class="property">age</span> = age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">SuperType</span>();</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">constructor</span> = <span class="title class_">SubType</span>;</span><br><span class="line"><span class="title class_">SubType</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">sayAge</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance1 =  <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;test&#x27;</span>, <span class="number">18</span>);</span><br><span class="line">instance1.<span class="property">colors</span>.<span class="title function_">push</span>(<span class="string">&#x27;black&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(instance1.<span class="property">colors</span>);<span class="comment">//&#x27;red,blue,green,black&#x27;</span></span><br><span class="line">instance1.<span class="title function_">sayName</span>();<span class="comment">//&#x27;test&#x27;</span></span><br><span class="line">instance1.<span class="title function_">sayAge</span>();<span class="comment">//18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> instance2 =  <span class="keyword">new</span> <span class="title class_">SubType</span>(<span class="string">&#x27;fe&#x27;</span>, <span class="number">17</span>);</span><br><span class="line"><span class="title function_">alert</span>(instance2.<span class="property">colors</span>);<span class="comment">//&#x27;red,blue,green&#x27;</span></span><br><span class="line">instance2.<span class="title function_">sayName</span>();<span class="comment">//&#x27;fe&#x27;</span></span><br><span class="line">instance2.<span class="title function_">sayAge</span>();<span class="comment">//17</span></span><br></pre></td></tr></table></figure>

<h3 id="原型式继承"><a href="#原型式继承" class="headerlink" title="原型式继承"></a>原型式继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">object</span>(<span class="params">o</span>)&#123;</span><br><span class="line">	<span class="keyword">function</span> <span class="title function_">F</span>(<span class="params"></span>)&#123;&#125;;</span><br><span class="line">	F.<span class="property"><span class="keyword">prototype</span></span> = o;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">F</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = &#123;</span><br><span class="line">	<span class="attr">name</span>: <span class="string">&#x27;fe&#x27;</span>,</span><br><span class="line">	<span class="attr">friends</span>: [<span class="string">&#x27;js&#x27;</span>,<span class="string">&#x27;html&#x27;</span>, <span class="string">&#x27;css&#x27;</span>]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> anotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">anotherPerson.<span class="property">name</span> = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">anotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;java&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> yetAnotherPerson = <span class="title function_">object</span>(person);</span><br><span class="line">yetAnotherPerson.<span class="property">name</span> = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line">yetAnotherPerson.<span class="property">friends</span>.<span class="title function_">push</span>(<span class="string">&#x27;node&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(person.<span class="property">friends</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="寄生式继承"><a href="#寄生式继承" class="headerlink" title="寄生式继承"></a>寄生式继承</h3><h3 id="寄生组合式继承"><a href="#寄生组合式继承" class="headerlink" title="寄生组合式继承"></a>寄生组合式继承</h3>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(8)-函数表达式</title>
    <url>/2016/11/09/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-8/</url>
    <content><![CDATA[<p>定义函数有两种方式：函数声明和函数表达式。<br>函数声明：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">functionName</span>(<span class="params">arg0, arg1, ...</span>)&#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数声明，一个重要特征是<strong>函数声明提升（function declaration hoisting）</strong>，在执行代码之前会先读取声明。意味着可以把函数声明放在调用它的语句后面。<span id="more"></span></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">sayHi</span>();</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayHi</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;Hi!&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> functionName = <span class="keyword">function</span>(<span class="params"></span>)(<span class="params">arg0, arg1, ...</span>)&#123;</span><br><span class="line">	<span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>形式类似常规的变量赋值语句，即创建一个函数并将它赋值给变量functionName。这种情况下创建的函数叫做匿名函数（anonymous function)，因为function关键字后面灭有标识符。<br>函数表达式与其他表达式一样，在使用前必须先赋值。</p>
<p>理解函数提升的关键就是理解函数声明与函数表达式之间的区别。</p>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="title function_">factorial</span>(num -<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解耦</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用arguments.callee虽然能够解耦，但是在严格模式下，访问这个属性会导致错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> factorial = (<span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="title function_">f</span>(num - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上述代码创建了一个名为f()的命名函数表达式，然后将它赋值给变量factorial。即便把函数赋值给另一个变量，函数的名字f仍然有效，所以递归调用照样能正确完成。</p>
<h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><p><strong>闭包，是值有权访问另一个函数作用域中的变量的函数。</strong>创建闭包的常见方式，就是在一个函数内部创建另一个函数。</p>
<h3 id="闭包与变量"><a href="#闭包与变量" class="headerlink" title="闭包与变量"></a>闭包与变量</h3><p>作用域链的配置机制，会引出一个副作用，即闭包只能取得包含函数中任何变量的最后一个值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createFunctions</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> result = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line">	<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">		result[i] = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">			<span class="keyword">return</span> i;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="私有变量"><a href="#私有变量" class="headerlink" title="私有变量"></a>私有变量</h2><p>严格讲，Javascript中没有私有成员概念。但有私有变量的概念。任何定义在函数中的变量，都可以认为是私有变量，因为函数外部不能访问这些变量。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记(9)-BOM</title>
    <url>/2016/11/10/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0-9/</url>
    <content><![CDATA[<p>ECMAScript是Javascript的核心，但在Web中使用Javascript，那么BOM则是真正的核心。<span id="more"></span></p>
<h2 id="window对象"><a href="#window对象" class="headerlink" title="window对象"></a>window对象</h2><p>BOM的核心对象是window，它表示浏览器的一个实例。在浏览器中，它既是通过Javascript访问浏览器窗口的一个接口，又是ECMAScript规定的Global对象。</p>
<h3 id="全局作用域"><a href="#全局作用域" class="headerlink" title="全局作用域"></a>全局作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayAge</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">age</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">age</span>);<span class="comment">//18</span></span><br><span class="line"><span class="title function_">sayAge</span>();<span class="comment">//18</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">sayAage</span>();<span class="comment">//18</span></span><br></pre></td></tr></table></figure>
<p>在全局作用域中定义的变量和函数，自动归在了window对象名下。</p>
<p>但是，定义全局变量与在window对象上直接定义属性还是有一点差别：全部变量不能通过delete操作符删除，而在window对象上定义的属性和可以。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">age</span>;<span class="comment">//IE&lt;9，报错，其他返回false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> <span class="variable language_">window</span>.<span class="property">color</span>;<span class="comment">//IE&lt;9，报错，其他返回true</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">age</span>);<span class="comment">//18</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="variable language_">window</span>.<span class="property">color</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h3 id="窗口关系及框架"><a href="#窗口关系及框架" class="headerlink" title="窗口关系及框架"></a>窗口关系及框架</h3><h3 id="窗口位置"><a href="#窗口位置" class="headerlink" title="窗口位置"></a>窗口位置</h3><p>IE、Safari、Opera和Chrome提供了screenLeft和screenTop属性，分别表示用于表示窗口相对于屏幕左边和上边的位置。FireFox则在screenX和screenTop属性中提供相同的窗口位置信息，Safari和Chrome也同时支持这连个属性。</p>
<p>moveTo()与moveBy()方法有可能将窗口精确地移动到一个新位置。两个方法都接收两个参数，其中，moveTo()接收的是新位置的x和y坐标值，而moveBy()接收的是水平和垂直方向上移动的像素数。<em>这两个方法有可能被浏览器禁用，而且都不适用与框架，只能对最外层的window对象使用。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveTo</span>(<span class="number">0</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveBy</span>(<span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">moveBy</span>(-<span class="number">50</span>, <span class="number">0</span>);</span><br></pre></td></tr></table></figure>

<h3 id="窗口大小"><a href="#窗口大小" class="headerlink" title="窗口大小"></a>窗口大小</h3><p>IE9+、FireFox、Safari、Opera和Chrome均为此提供了四个属性：innerWidth、innerHeight、outerWidth、outerHeight。</p>
<blockquote>
<p>在IE9+、Safari和FireFox中，outerWidth和outerHeight返回浏览器窗口本身的尺寸（无论是从最外层window对象还是从某个框架访问）。innerWidth和innerHeight则表示该容器中页面视图的大小（减去边框宽度）。<br>在Chrome中，outerWidth、outerHeight与innerWidth、innerHeight返回相同的值，即视口大小，而非浏览器窗口大小。<br>在IE、FireFox、Safari、Opera和Chrome中， document.documentElement.clientWidth和document.documentElement.clientHeight中保存了页面视口信息。IE6中，这些属性必须在标准模式下才生效；如果是混杂模式，就必须通过document.body.clientWidth和document.body.clientHeight取得相同信息。对于混杂模式下的chrome浏览器，无论是document.documentElement还是document.body的clientWidth和clientHeight属性，都可以获得视口大小。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> pageWidth = <span class="variable language_">window</span>.<span class="property">innerWidth</span>;</span><br><span class="line">	pageHeight = <span class="variable language_">window</span>.<span class="property">innerHeight</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> pageWidth != <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(<span class="variable language_">document</span>.<span class="property">compatMode</span> ==<span class="string">&#x27;CSS1Compat&#x27;</span>)&#123;</span><br><span class="line">		pageWidth = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientWidth</span>;</span><br><span class="line">		pageHeight = <span class="variable language_">document</span>.<span class="property">documentElement</span>.<span class="property">clientHeight</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		pageWidth = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientWidth</span>;</span><br><span class="line">		pageHeight = <span class="variable language_">document</span>.<span class="property">body</span>.<span class="property">clientHeight</span>;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用resizeTo()和resizeBy()方法可以调整浏览器窗口的大小。这两个方法都接收两个参数，其中resizeTo()接收浏览器窗口的新宽度和新高度， resizeBy()接收新窗口与原窗口的宽度和高度之差。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//调整到100 * 100</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeTo</span>(<span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//调整到200 * 150</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">resizeBy</span>(<span class="number">100</span>,<span class="number">50</span>);</span><br></pre></td></tr></table></figure>
<h3 id="导航和打开窗口"><a href="#导航和打开窗口" class="headerlink" title="导航和打开窗口"></a>导航和打开窗口</h3><p>window.open():接收四个参数-要加载的url、窗口目标、一个特性字符串以及一个标识新页面是否取代浏览器历史记录中当前加载页面的布尔值。通常只传递第一个参数，最后一个参数只在不打开新窗口的情况下使用。<br>如果window.open()传递了第二个参数，而且该参数是已有窗口或框架的名称，那么就会在具有该名称的窗口或框架中加载第一个参数指定的url。此外第二个参数也可以是任何一个特殊的窗口名称：_self、_parent、_top或_blank。</p>
<h4 id="弹出窗口"><a href="#弹出窗口" class="headerlink" title="弹出窗口"></a>弹出窗口</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>,<span class="string">&#x27;_blank&#x27;</span>,<span class="string">&#x27;height=400,width=400,top=60,left=60,resize=yes&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>调用close()方法可以关闭新打开的窗口。这方法仅适用于通过window.open()打开的弹出窗口。对于浏览器的住窗口，如果没有得到用户允许是不能关闭它的。</p>
<p>新创建的window对象都有一个opener属性，其中保存着打开它的原始窗口对象。这个属性只在弹出窗口中的最外层window对象（top）中有定义，而且指向调用window.open()的窗口或框架。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newWin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>,<span class="string">&#x27;newWin&#x27;</span>,<span class="string">&#x27;height=400,width=400&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(newWin.<span class="property">opener</span> == <span class="variable language_">window</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
<p>有些浏览器会在独立的进程中运行每个标签页，当一个标签页打开另一个标签页，如果两个window对象需要彼此通信，那么新标签也就不能运行在独立的进程中。在chrome中，将新创建的标签页的opener属性设置为null，即表示在单独的进程中运行新标签页。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> newWin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>,<span class="string">&#x27;newWin&#x27;</span>,<span class="string">&#x27;height=400,width=400&#x27;</span>);</span><br><span class="line">newWin.<span class="property">opener</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>将opener属性设置为null，就是告诉浏览器新创建的标签页不需要与打开它的标签页通信，因此可在独立进程中运行。标签页之间一旦切断，将没有办法恢复。</p>
<h4 id="弹出窗口屏蔽"><a href="#弹出窗口屏蔽" class="headerlink" title="弹出窗口屏蔽"></a>弹出窗口屏蔽</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> blocked = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">	<span class="keyword">var</span> newWin = <span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>, <span class="string">&#x27;_blank&#x27;</span>);</span><br><span class="line">	<span class="keyword">if</span>(newWin == <span class="literal">null</span>)&#123;</span><br><span class="line">		blocked = <span class="literal">true</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;<span class="keyword">catch</span>(e)&#123;</span><br><span class="line">	blocked = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(blocked)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;弹窗被屏蔽掉了&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="间歇调用和超时调用"><a href="#间歇调用和超时调用" class="headerlink" title="间歇调用和超时调用"></a>间歇调用和超时调用</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不建议</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="string">&#x27;alert(&quot;hello world&quot;)&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//推荐</span></span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> timeoutId = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;hello world&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//取消</span></span><br><span class="line"><span class="built_in">clearTimeout</span>(timeoutId);</span><br></pre></td></tr></table></figure>
<blockquote>
<p>setTimout代码在全局作用域中执行，因此函数的this在非严格模式下指向window对象，严格模式下是undefined。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> max = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> intervalId = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">increamentNumber</span>(<span class="params"></span>)&#123;</span><br><span class="line">	num ++;</span><br><span class="line">	<span class="keyword">if</span>(num == max)&#123;</span><br><span class="line">		<span class="built_in">clearInterval</span>(intervalId);</span><br><span class="line">		<span class="title function_">alert</span>(<span class="string">&#x27;done&#x27;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">intervalId = <span class="built_in">setInterval</span>(incrementNumber, <span class="number">500</span>);</span><br></pre></td></tr></table></figure>

<h3 id="系统对话框"><a href="#系统对话框" class="headerlink" title="系统对话框"></a>系统对话框</h3><p>alert()/confirm()/prompt()/print()/find()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> con = <span class="title function_">confirm</span>(<span class="string">&#x27;确定关闭吗？&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(con)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;确定关闭&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&quot;取消关系&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> pro = <span class="title function_">prompt</span>(<span class="string">&#x27;你的姓名？&#x27;</span>);</span><br><span class="line"><span class="keyword">if</span>(pro != <span class="literal">null</span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;welcom &#x27;</span> + pro);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="string">&#x27;你没有输入名字&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="location对象"><a href="#location对象" class="headerlink" title="location对象"></a>location对象</h2><p>location既是window对象的属性，也是document对象的属性。<br>location对象的所有属性：</p>
<table>
<thead>
<tr>
<th>属性名</th>
<th align="center">例子</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>hash</td>
<td align="center">‘#content’</td>
<td align="center">返回url中的hash(#号后跟零或多个字符），如果URL中不包含散列，则返回空字符串</td>
</tr>
<tr>
<td>host</td>
<td align="center">‘<a href="http://jiaochunxiao.github.io:80&#39;">http://jiaochunxiao.github.io:80&#39;</a></td>
<td align="center">返回服务器名称和端口号(如果有)</td>
</tr>
<tr>
<td>hostname</td>
<td align="center">‘<a href="http://jiaochunxiao.github.io&/#39;">http://jiaochunxiao.github.io&#39;</a></td>
<td align="center">返回不带端口号的服务器名称</td>
</tr>
<tr>
<td>href</td>
<td align="center">‘<a href="http://jiaochunxiao.github.io&/#39;">http://jiaochunxiao.github.io&#39;</a></td>
<td align="center">返回当前加载页面的完整url。而location对象的toString()方法也返回这个值。</td>
</tr>
<tr>
<td>pathname</td>
<td align="center">“/file/page”</td>
<td align="center">返回url中的目录和文件名</td>
</tr>
<tr>
<td>port</td>
<td align="center">“8080”</td>
<td align="center">返回URL中指定的端口号。如果URL中不包含端口号，则这个属性返回空字符串</td>
</tr>
<tr>
<td>protocol</td>
<td align="center">“http:”</td>
<td align="center">返回页面使用的协议。通常是http:或https:</td>
</tr>
<tr>
<td>search</td>
<td align="center">“?name=’test’”</td>
<td align="center">返回url的查询字符串，这个字符串以问号开头。</td>
</tr>
</tbody></table>
<h3 id="查询字符串参数"><a href="#查询字符串参数" class="headerlink" title="查询字符串参数"></a>查询字符串参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryStringArgs</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> qs = (location.<span class="property">search</span>.<span class="property">length</span> &gt; <span class="number">0</span> ? location.<span class="property">search</span>.<span class="title function_">substring</span>(<span class="number">1</span>): <span class="string">&#x27;&#x27;</span>),</span><br><span class="line">	args = &#123;&#125;,</span><br><span class="line">	items = qs.<span class="property">length</span>? qs.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>): [],</span><br><span class="line">	item = <span class="literal">null</span>,</span><br><span class="line">	name = <span class="literal">null</span>,</span><br><span class="line">	value = <span class="literal">null</span>,</span><br><span class="line">	i = <span class="number">0</span>,</span><br><span class="line">	len = items.<span class="property">length</span>;</span><br><span class="line">	<span class="keyword">for</span>(i; i &lt; len; i++)&#123;</span><br><span class="line">		item = items[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">		name = <span class="built_in">decodeURIComponent</span>(item[<span class="number">0</span>]);</span><br><span class="line">		value = <span class="built_in">decodeURIComponent</span>(item[<span class="number">1</span>]);</span><br><span class="line">		<span class="keyword">if</span>(name.<span class="property">length</span>)&#123;</span><br><span class="line">			args[name] = value;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> args;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="位置操作"><a href="#位置操作" class="headerlink" title="位置操作"></a>位置操作</h3><p>assign()方法：改变浏览器的位置，接收一个url参数。</p>
<p>location.href或window.location设置为一个url，也会以该值调用assign()方法。下面两种方式与显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">location</span> = <span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>;</span><br><span class="line"></span><br><span class="line">location.<span class="property">href</span> = <span class="string">&#x27;http://jiaochunxiao.github.io&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>location的属性可以修改，每次修改后（hash除外），页面都以新的url重新加载。</p>
<p>通过上述任一方式修改url后，浏览器的历史记录中会生成一条新记录，因此用户通过后退按钮可导航到前一页面。要禁用这种行为，可以使用replace()方法。该方法接收一个url作为参数。浏览器位置改变，但不会在历史记录中产生新记录。</p>
<p>reload()重新加载当前显示的页面。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">location.<span class="title function_">reload</span>();<span class="comment">//重新加载，又可能从缓存中加载</span></span><br><span class="line">location.<span class="title function_">reload</span>(<span class="literal">true</span>);<span class="comment">//重新加载，从服务器重新加载</span></span><br></pre></td></tr></table></figure>

<h2 id="navigator对象"><a href="#navigator对象" class="headerlink" title="navigator对象"></a>navigator对象</h2><ul>
<li>appCodeName: 浏览器名称，通常是Mozilla。</li>
<li>appName: 完整的浏览器名称</li>
<li>appVersion: 浏览器版本</li>
<li>cookieEnabled: 表示cookie是否启用</li>
<li>geolocation: 地理位置信息</li>
<li>language: 浏览器语言</li>
<li>javaEnabled: 浏览器是否启用了java</li>
<li>mimeTypes: MIME类型数组</li>
<li>onLine: 是否连接到网络</li>
<li>platform: 浏览器所在系统平台</li>
<li>plugins: 浏览期插件</li>
<li>product: 产品名称</li>
<li>productSub: 次要信息</li>
<li>userAgent: 浏览器的用户代理字符串</li>
<li>vendor: 浏览器品牌</li>
<li>vendorSub: 供应商次要信息</li>
</ul>
<h2 id="screen对象"><a href="#screen对象" class="headerlink" title="screen对象"></a>screen对象</h2><h2 id="history对象"><a href="#history对象" class="headerlink" title="history对象"></a>history对象</h2><p>go()方法可以用在用户的历史记录中任意跳转，可以向前，可以向后。接收一个参数，负数表示向后跳转，类似点击浏览器后退按钮去，正数表示向前，类似前进按钮。也可以向go()方法传递一个字符串参数，可能前进可能后退，如果历史记录中不包含该字符串，就什么都不做。<br>另外可以使用back()和forward()来代替go()。模拟浏览器的后退和前进按钮。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记（1）</title>
    <url>/2016/06/02/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%EF%BC%881%EF%BC%89/</url>
    <content><![CDATA[<h2 id="script-type"><a href="#script-type" class="headerlink" title="script type"></a>script type</h2><p>向HTML页面插入Javascript标签，主要通过 script 标签。script标签中的type属性， 用来表示编写代码使用的脚本语言的内容类型（MIME）。 text/script 和 text/ecmascript 都已经不推荐使用， 但我们一般还是用 text/script。<span id="more"></span><br>实际上，服务器在传送 Javascript 时，使用的MIME类型通常是 application/x-javascript。 但在 type 中设置这个值可能导致脚本被忽略。 在非IE浏览器下还可以使用 application/javascript 和 application/ecmascript。 从约定俗称和浏览器兼容性考虑， 目前 type 属性值还是text/javascript。该属性非必须，如果没有指定，默认为 text/javascript。</p>
<h2 id="javascript-数据类型"><a href="#javascript-数据类型" class="headerlink" title="javascript 数据类型"></a>javascript 数据类型</h2><p>ECMAScript中有5中简单数据类型： Undefined、Null、 Boolean、 Number 和 String。还包括一种复杂数据类型： Object。</p>
<h2 id="typeof-操作符"><a href="#typeof-操作符" class="headerlink" title="typeof 操作符"></a>typeof 操作符</h2><p>用来检测变量的数据类型，返回值为： undefined、 boolean、 number、 string、 object、 function。</p>
<ul>
<li>关于 null，从逻辑角度讲， null值表示一个空指针，所有 typeof null 会返回 ‘object’。</li>
<li>实际上 undefined 值是派生自 null值。因此 ECMAScript 规定 null == undefined 为 true.</li>
</ul>
<h2 id="关于浮点数计算问题"><a href="#关于浮点数计算问题" class="headerlink" title="关于浮点数计算问题"></a>关于浮点数计算问题</h2><p>所谓浮点数值，就是数值中必须包含小数点，且小数点后必须至少有一位数字。 但是浮点数的计算精度远低于整数，因此不推荐在js中做大量的浮点数运算。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">0.1</span>+<span class="number">0.2</span>);<span class="comment">//0.30000000000000004</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>((<span class="number">1</span>-<span class="number">0.9</span>)==<span class="number">0.1</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>-<span class="number">0.9</span>);<span class="number">0.09999999999999998</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>关于浮点数计算精度问题，是所有使用基于IEEE754数值的浮点计算问题，并非ECMAScript一家。一般浮点计算，先转换成整数运算再去换算。</p>
</blockquote>
<p>来看一道关于number的笔试题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> two   = <span class="number">0.2</span></span><br><span class="line"><span class="keyword">var</span> one   = <span class="number">0.1</span></span><br><span class="line"><span class="keyword">var</span> eight = <span class="number">0.8</span></span><br><span class="line"><span class="keyword">var</span> six   = <span class="number">0.6</span></span><br><span class="line">[two - one == one, eight - six == two]</span><br></pre></td></tr></table></figure>
<p>答案是：[true, false].</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">if(a + b == 0.3)&#123;</span><br><span class="line">	console.log(&quot;You&#x27;ve got 0.3&quot;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>在这个例子中我们测试，两个数的和是否等于0.3：如果连个数是0.05和0.25，那么测试可以通过；如果是0.1和0.2就不能通过，因此永远不要测试某个特定的浮点数值。</strong></p>
<h2 id="还是关于Number"><a href="#还是关于Number" class="headerlink" title="还是关于Number"></a>还是关于Number</h2><p>首先来看一个问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="number">070</span>));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">paresInt</span>(<span class="string">&#x27;070&#x27;</span>));</span><br></pre></td></tr></table></figure>
<p>上面最后的输出是什么呢？第一条命令输出的是 56， 第二条命令输出的是 70（基于Chrome浏览器的输出）。同一条命令在Ecscript3和5上解析的是有问题的， 第二条命令，Ecsript3会把‘070’解析成八进制字面量，解析成56，而Ecscript5则会解析成 70。为了使用者消除困惑，parseInt函数允许接收第二个参数，按照指定进制解析字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;070&#x27;</span>,<span class="number">10</span>));<span class="comment">//70</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="string">&#x27;070&#x27;</span>,<span class="number">8</span>));<span class="comment">//56</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">parseInt</span>(<span class="number">070</span>,<span class="number">8</span>));<span class="comment">//46,这个是因为070，转换成十进制后是56，8进制的56换算成十进制是46</span></span><br></pre></td></tr></table></figure>
<p>在这里讲一下，parseInt方法：</p>
<blockquote>
<p>1、定义和用法<br>parseInt() 函数可解析一个字符串，并返回一个整数。<br>2、语法<br>parseInt(string, radix)<br>其中，string    必需，要被解析的字符串；radix 可选，表示要解析的数字的基数。<strong>该值介于 2 ~ 36 之间。<br>如果省略该参数或其值为 0，则数字将以 10 为基础来解析。如果它以 “0x” 或 “0X” 开头，将以 16 为基数。<br>如果该参数小于 2 或者大于 36，则 parseInt() 将返回 NaN。</strong><br>3、返回值：返回解析后的数字。<br>4、tips:当参数 radix 的值为 0，或没有设置该参数时，parseInt() 会根据 string 来判断数字的基数。<br>举例，如果 string 以 “0x” 开头，parseInt() 会把 string 的其余部分解析为十六进制的整数。如果 string 以 0 开头，那么 ECMAScript v3 允许 parseInt()的一个实现把其后的字符解析为八进制或十六进制的数字。如果 string 以 1 ~ 9 的数字开头，parseInt() 将把它解析为十进制的整数。</p>
</blockquote>
<p>再来一道笔试题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="string">&quot;1&quot;</span>, <span class="string">&quot;2&quot;</span>, <span class="string">&quot;3&quot;</span>].<span class="title function_">map</span>(<span class="built_in">parseInt</span>)</span><br></pre></td></tr></table></figure>
<p><strong>知识点:</strong><br>1、Array/map<br>2、Number/parseInt<br>3、JavaScript parseInt<br>首先, map接受两个参数, 一个回调函数 callback, 一个回调函数的this值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">array.<span class="title function_">map</span>(callback,[ thisObject]);</span><br></pre></td></tr></table></figure>
<p>其中的callback相当于：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[].<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">value, index, array</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>callback接收三个参数：value, index, array. 在本题目中, map只传入了回调函数–parseInt.<br>其次, parseInt 只接受两个两个参数 string, radix(基数)，关于parseInt的介绍，参照上文。<br>所以本题相当于</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//第一个参数为array[index],第二个参数为 index。</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;1&#x27;</span>, <span class="number">0</span>);</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;2&#x27;</span>, <span class="number">1</span>);<span class="comment">//radix值，介于2到36之间。该参数不合法，返回NaN</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="string">&#x27;3&#x27;</span>, <span class="number">2</span>);<span class="comment">//二进制数值0/1,string参数不合法，返回NaN</span></span><br></pre></td></tr></table></figure>
<p>后两者参数不合法，所以答案是 [1, NaN, NaN]</p>
<h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>重点来了，Object类型。在ECMAScript中，对象其实是一组数据和功能的集合。对象可通过执行new操作符后跟要创建的对象类型的名称来创建。创建Object类型的实例，并为其添加属性和（或）方法，就可以创建自定义对象。<br>关于对象，要理解一个重要思想：</p>
<blockquote>
<p>在ECMAScript中，Object类型是它所有实例的基础。即Object类型所具有的任何属性和方法，同样存在于更具体的对象中。</p>
</blockquote>
<p>Object每个实例都具有以下属性和方法：</p>
<blockquote>
<ul>
<li>Constructor: 保存着用于创建当前对象的函数。</li>
</ul>
</blockquote>
<ul>
<li>hasOwnProperty(propertyname): 用于检查给定的属性在当前对象实例中（而不是在实例的原型中）是否存在。其中作为属性名（propertyname）必须以字符串形式指定。</li>
<li>isProperyOf(object): 用于检查传入的对象是否是另一个对象的原型。</li>
<li>propertyIsEnumberable(propertyname): 用于检查给定的属性能否用for-in来枚举。参数名必须以字符串形式指定。 </li>
<li>toLocaleString(): 返回对象的字符串表示，该字符串于执行环境的地区相对应。</li>
<li>toString(): 返回对象的字符串表示。</li>
<li>valueOf(): 返回对象的字符串、数字或布尔值表示。通常与toString()方法返回值相同。</li>
</ul>
<p><strong>由于在ECMAScript中，Object是所有对象的基础，因此所有对象都具有这些属性和方法。</strong></p>
<h2 id="逗号操作符"><a href="#逗号操作符" class="headerlink" title="逗号操作符"></a>逗号操作符</h2><p>逗号操作符多用于声明多个变量，除此之外逗号操作符还可以用于赋值。在用于赋值时，逗号操作符总会返回表达式中的最后一项。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num1 = 1, num2 = 2, num3 = 3;</span><br><span class="line">var num = (1, 2, 3, 4, 5);//num值为5</span><br></pre></td></tr></table></figure>
<h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><ul>
<li>if语句</li>
<li>do-while语句<br>后测试循环语句，只有在循环体中的代码执行之后，才会对条件表达式求值。(即循环体内的代码至少执行一次后才进行判断。)</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i =;</span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">	i += <span class="number">2</span>;</span><br><span class="line">&#125; <span class="keyword">while</span>(i &lt; <span class="number">10</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<ul>
<li>while语句<br>与do-while相反，属于先测试语句，在循环体代码执行之前，先对表达式求值，循环体内的代码有可能永远不会被执行。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (i &lt; <span class="number">10</span>)&#123;</span><br><span class="line">	i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(i);<span class="comment">//10</span></span><br></pre></td></tr></table></figure>
<ul>
<li><p>for语句<br>前测试循环语句，具有执行循环之前初始化变量和定义循环后要执行代码的能力。</p>
</li>
<li><p>for-in语句<br>精准迭代语句，用于枚举对象属性。但是循环输出的对象属性名顺序是不可预测的。</p>
</li>
<li><p>label语句</p>
</li>
<li><p>break和continue语句<br>break:立即退出循环，强制继续执行循环后面的语句。<br>continue:立即退出循环，从循环顶部继续执行。</p>
</li>
</ul>
<p>break demo:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">1</span>; i &lt; <span class="number">10</span>; i++)&#123;</span><br><span class="line">	<span class="keyword">if</span>(i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	num++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(num);<span class="comment">//4</span></span><br></pre></td></tr></table></figure>
<p>continue demo:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var num = 0;</span><br><span class="line">for(var i = 1; i &lt; 10; i++)&#123;</span><br><span class="line">	if(i % 5 == 0)&#123;</span><br><span class="line">		continue;</span><br><span class="line">	&#125;</span><br><span class="line">	num++;</span><br><span class="line">&#125;</span><br><span class="line">console.log(num);//8</span><br></pre></td></tr></table></figure>
<ul>
<li>with语句<br>将代码的作用于设定到一个特定的对象中。<br>with(expression) statement;</li>
</ul>
<p>demo:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> qs = location.<span class="property">search</span>.<span class="title function_">sbustring</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> hostname = location.<span class="property">hostname</span>;</span><br><span class="line"><span class="keyword">var</span> url = location.<span class="property">href</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">with</span>(<span class="params">location</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> qs = search.<span class="title function_">substring</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">var</span> hostname = hostname;</span><br><span class="line">	<span class="keyword">var</span> url = href;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码块中，使用with语句关联了location对象，在with语句代码块内部，每个变量首先被认为是一个局部变量，如果局部环境中找不到该变量定义，就会查询location对象中是否有同名属性，如果发现同名属性，则以location对象属性值作为变量的值。</p>
<p><strong>严格模式下，不允许使用with语句，否则将视为语法错误！</strong></p>
<ul>
<li>switch语句<br>流控制语句</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(expression)&#123;</span><br><span class="line">	<span class="keyword">case</span> <span class="attr">value</span>: statement</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="attr">value</span>: statement</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	<span class="keyword">case</span> <span class="attr">value</span>: statement</span><br><span class="line">		<span class="keyword">break</span>;</span><br><span class="line">	...</span><br><span class="line">	<span class="attr">default</span>: statement</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记（2）</title>
    <url>/2016/07/01/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%EF%BC%882%EF%BC%89/</url>
    <content><![CDATA[<h1 id="变量、作用域及内存问题"><a href="#变量、作用域及内存问题" class="headerlink" title="变量、作用域及内存问题"></a>变量、作用域及内存问题</h1><h2 id="基本类型与引用类型的值"><a href="#基本类型与引用类型的值" class="headerlink" title="基本类型与引用类型的值"></a>基本类型与引用类型的值</h2><blockquote>
<p>基本类型值是简单的数据段，基本类型是按值访问的，可以操作保存在变量中的实际的值。</p>
</blockquote>
<blockquote>
<p>引用变量值可能有多个值构成的对象，引用类型的值是保存在内存中的对象，Javascript不允许直接访问内存中的位置，也就是说不能直接操作对象的内存空间。在操作对象时，实际上是在操作对象的的引用而不是实际对象。为此，引用类型的值是按引用访问的。</p>
</blockquote>
<span id="more"></span>

<h2 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h2><p>ECMAScript中所有函数的参数都是按值传递的。即把函数外部的值复制给函数内部的参数，就和把值从一个变量复制到另一个变量一样。基本类型值得传递如同基本类型变量的复制一样，而引用类型值得传递，则如同引用类型变量的复制一样。注意：访问变量有按值和按引用两种方式，而参数只能按值传递。</p>
<p>基本类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">addTen</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	num += <span class="number">10</span>;</span><br><span class="line">	<span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> count = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="title function_">addTen</span>(count);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count); <span class="comment">//10，没有变化，按值传递</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(result);<span class="comment">//20</span></span><br></pre></td></tr></table></figure>

<p>引用类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">	obj.<span class="property">name</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">setName</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">//js</span></span><br></pre></td></tr></table></figure>

<p>另一个例子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">setName</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">	obj.<span class="property">name</span> = <span class="string">&#x27;js&#x27;</span>;</span><br><span class="line">	obj = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">	obj.<span class="property">name</span> = <span class="string">&#x27;node&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="title function_">setName</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>);<span class="comment">//js</span></span><br></pre></td></tr></table></figure>
<p>引用类型的第二个例子和第一个例子的不同之处：在setName（）函数中添加了两行代码：一行代码为obj重新定义了一个对象，另一行代码为该对象定义了一个带有不同值的name属性。在把person传递给setName()后，其name属性被设置成了js,然后又将一个新的对象赋给变量obj，同时将name属性设置成node。如果person是按引用传递的，那么person就会自动被修改为指向其name属性值为node的对象。但是，当我们访问person.name时，其值仍然是js。这说明，即使在函数内部修改了参数的值，但原始引用仍然保持不变。实际上，挡在函数内部重写obj时，这个变量的引用就是一个局部对象。而局部对象，在函数执行完毕后立即被销毁。</p>
<h2 id="检测类型"><a href="#检测类型" class="headerlink" title="检测类型"></a>检测类型</h2><h3 id="typeof"><a href="#typeof" class="headerlink" title="typeof"></a>typeof</h3><p>要检测一个变量是否是基本数据类型，typeof操作符是一个最佳的工具：确定一个变量是字符串、数值、布尔值还是undefined。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&#x27;122222&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> d;</span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">var</span> f = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> a);<span class="comment">//string</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> b);<span class="comment">//boolean</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> c);<span class="comment">//number</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> d);<span class="comment">//undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> e);<span class="comment">//object</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">typeof</span> f);<span class="comment">//object</span></span><br></pre></td></tr></table></figure>

<h3 id="instanceof"><a href="#instanceof" class="headerlink" title="instanceof"></a>instanceof</h3><p>如果变量值是一个对象或者null值，则typeof操作符会返回上述例子最后的object。在检测引用类型的值时，typeof操作符的用处不大。当我们想知道某个对象是什么类型的对象，ECMASCript提供了instanceof操作符：</p>
<p><strong>result = varibale instanceof constructor</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Object</span>);<span class="comment">//变量person是Object吗？</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//变量person是Array吗？</span></span><br></pre></td></tr></table></figure>
<h2 id="执行环境及作用域"><a href="#执行环境及作用域" class="headerlink" title="执行环境及作用域"></a>执行环境及作用域</h2><h3 id="执行环境"><a href="#执行环境" class="headerlink" title="执行环境"></a>执行环境</h3><p>执行环境定义了变量或函数有权访问的其他数据，决定了它们各自的行为。每个执行环境都有一个与之关联的变量对象（variable object），环境中定义的所有变量和函数都保存在这个对象中。</p>
<h3 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h3><p>当代码在一个环境中执行时，会创建变量对象的一个作用域链。作用域链的用途，是保证当前执行环境有权访问的所有变量和函数的有序访问。作用域链的前端，始终都是当前执的代码所在环境的变量对象。如果这个环境是函数，则将其活动对象（activation object)作为变量对象。<br>标识符解析是沿着作用域链一级一级地搜索标示符的过程。搜索过程始终从作用域链的前端开始，然后逐级向后回溯，直至找到标识符为止（如果找不到标识符，通常会导致错误发生）。</p>
<p>内部环境可以通过作用域链访问所有的外部环境，但外部环境不能访问内部环境中的任何变量和函数。</p>
<h4 id="延长作用域链"><a href="#延长作用域链" class="headerlink" title="延长作用域链"></a>延长作用域链</h4><ul>
<li>try-catch语句的catch块</li>
<li>with语句 </li>
</ul>
<h2 id="垃圾收集"><a href="#垃圾收集" class="headerlink" title="垃圾收集"></a>垃圾收集</h2><ul>
<li>标记清除</li>
<li>引用计数</li>
</ul>
<h2 id="管理内存"><a href="#管理内存" class="headerlink" title="管理内存"></a>管理内存</h2>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记（3）-引用类型</title>
    <url>/2016/08/03/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%EF%BC%883%EF%BC%89/</url>
    <content><![CDATA[<h1 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h1><p>引用类型的值（对象）是引用类型的一个实例。对象是某个特定引用类型的实例。新对象是使用new 操作符后跟一个构造函数来创建的。</p>
<h2 id="Object类型"><a href="#Object类型" class="headerlink" title="Object类型"></a>Object类型</h2><p>创建Object实例的方式有两种：</p>
<ul>
<li>使用new操作符后跟Object构造函数</li>
<li>使用对象字面量表示法<span id="more"></span></li>
</ul>
<p><em>通过对象字面量定义对象时，实际上不会调用Object构造函数。</em></p>
<h2 id="Array类型"><a href="#Array类型" class="headerlink" title="Array类型"></a>Array类型</h2><p>创建数组的两种方式：</p>
<ul>
<li>使用Array构造函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="number">20</span>);<span class="comment">//length值为20的数组</span></span><br><span class="line"><span class="keyword">var</span> colors=<span class="keyword">new</span> <span class="title class_">Array</span>(<span class="string">&quot;red&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;green&quot;</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>使用数组字面量表示法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>,<span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> colors=[];<span class="comment">//创建一个空数组</span></span><br><span class="line"><span class="keyword">var</span> colors=[<span class="number">1</span>,<span class="number">2</span>,];<span class="comment">//不建议，会创建一个2或3项的数组</span></span><br><span class="line"><span class="keyword">var</span> colors=[,,,,,];<span class="comment">//不建议，会创建一个包含5或6项的数组</span></span><br></pre></td></tr></table></figure>

<h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><p>对于一个网页或者全局作用域，使用instanceof操作符可以检测。instanceof操作符的问题在于，它假定了单一的全局执行环境。如果网页中包含多个框架，那实际就存在两个以上的不同全局执行环境，从而存在两个以上不同版本的的Array构造函数。如果从一个框架向另一个框架传入一个数组，那么传入的数组与第二个框架中原生创建的数组分别具有各自不同的构造函数。解决方案：Array.isArray()方法。</p>
<h3 id="转换方法"><a href="#转换方法" class="headerlink" title="转换方法"></a>转换方法</h3><p>所有对象都具有toLocaleString()/toString()/valueOf()方法。调用数组的toString()方法会返回数组中每个值的字符串形式拼接而成一个以逗号分隔的字符串。而调用valueOf()返回的还是数组。实际上为了创建这个字符串会调用数组每一项的toString()方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors=[<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;green&#x27;</span>,<span class="string">&#x27;yellow&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">toString</span>());<span class="comment">//red,green,yellow</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">valueOf</span>());<span class="comment">//[&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);<span class="comment">//[&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure>
<p>toLocaleString()方法经常返回与toString()、valueOf()方法相同的值，但也非总如此。当调用数组的toLocaleString()方法时，它也会创建一个数组值的以逗号分隔的字符串。而与前两种方法唯一不同的是，这一次为了取得每一项的值，调用的是每一项的toLocaleString()方法，而不是toString()方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line">	<span class="attr">toLocaleString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;toLocaleString1&quot;</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;toString1&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line">	<span class="attr">toLocaleString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;toLocaleString2&quot;</span>;</span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">toString</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;toString2&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> people = [person1, person2];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">toString</span>());<span class="comment">//toString1,toString2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(people.<span class="title function_">toLocaleString</span>());<span class="comment">//toLocaleString1,toLocaleString2</span></span><br></pre></td></tr></table></figure>
<p><strong>Array.toLocaleString()和Array.toString()都是返回数组值的字符串形式，Array.valueOf()返回数组。</strong></p>
<p>Array.join()方法可以使用不同分隔符来构建数组值的字符串形式;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors =[<span class="string">&#x27;red&#x27;</span>, <span class="string">&#x27;blue&#x27;</span>, <span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));<span class="comment">//red,blue,green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">join</span>(<span class="string">&#x27;!&#x27;</span>));<span class="comment">//red!blue!green</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<blockquote>
<p><strong>如果数组中某一项值是null或者undefined，那么该值在join()、toLocaleString()、toString()方法返回的结果中以空字符串表示。</strong></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> array = [<span class="string">&#x27;red&#x27;</span>,<span class="literal">null</span>,<span class="string">&#x27;green&#x27;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">join</span>(<span class="string">&#x27;,&#x27;</span>));<span class="comment">//red,,green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">toString</span>());<span class="comment">//red,,green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(array.<span class="title function_">valueOf</span>());<span class="comment">//[&#x27;red&#x27;,null,&#x27;green&#x27;]</span></span><br></pre></td></tr></table></figure>

<h3 id="栈方法"><a href="#栈方法" class="headerlink" title="栈方法"></a>栈方法</h3><p>栈是一种LIFO(Last-In-First-Out,后进先出)的数据结构，栈中数据的插入（推入）和删除（弹出），只发生在栈的顶部。数组通过push()和pop()方法，实现类似栈的行为。</p>
<blockquote>
<p>push()方法接受任意数量的参数，把它们添加到数组末尾，并返回修改后数组的长度。<br>pop()方法则从数组末尾移除最后一项，并返回移除项。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>();<span class="comment">//创建新数组</span></span><br><span class="line"><span class="keyword">var</span> count = colors.<span class="title function_">push</span>(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>);<span class="comment">//推入两项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">count = colors.<span class="title function_">push</span>(<span class="string">&#x27;green&#x27;</span>);<span class="comment">//推入另一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.<span class="title function_">pop</span>();<span class="comment">//移除并取得最后一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);<span class="comment">//green</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<h3 id="队列方法"><a href="#队列方法" class="headerlink" title="队列方法"></a>队列方法</h3><p>队列数据的访问规则是FIFO(First-In-First-Out，先进先出)。队列在列表最末尾添加数据，在列表前端删除。数组通过shift()和push()方法，实现类似队列行为。</p>
<blockquote>
<p>shift()方法移除数组第一项，并返回该项，同时数组长度减一。<br>push()方法接受任意数量的参数，把它们添加到数组末尾，并返回修改后数组的长度。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> count = colors.<span class="title function_">push</span>(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line">count = colors.<span class="title function_">push</span>(<span class="string">&#x27;green&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">//3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.<span class="title function_">shift</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);<span class="comment">//red</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>);<span class="comment">//2</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>ECMAScript还为数组提供了一个unshift()方法，与shift()方法相反，用于在数组前端添加任意个项，并返回数组的长度。</p>
</blockquote>
<p><strong>注意，shift()方法返回的是移除项，unshift()方法返回的是数组的长度</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = <span class="keyword">new</span> <span class="title class_">Array</span>();</span><br><span class="line"><span class="keyword">var</span> count = colors.<span class="title function_">unshift</span>(<span class="string">&#x27;red&#x27;</span>,<span class="string">&#x27;blue&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(count);<span class="comment">//2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> item = colors.<span class="title function_">pop</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(item);<span class="comment">//blue</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="property">length</span>);<span class="comment">//1</span></span><br></pre></td></tr></table></figure>
<p><em>tips:数组操作添加元素方法(unshift,push)返回的都是数组长度，删除元素方法(shift,pop)返回的是删除项</em></p>
<h3 id="重排序方法"><a href="#重排序方法" class="headerlink" title="重排序方法"></a>重排序方法</h3><blockquote>
<p>reverse()方法反转数组项的顺序<br>sort()方法按升序排列数组项</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> values = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line">values.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values);<span class="comment">//[5,4,3,2,1];</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> val = [<span class="number">0</span>,<span class="number">1</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">15</span>];</span><br><span class="line">val.<span class="title function_">sort</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(val);<span class="comment">//[0,1,10,15,5];</span></span><br></pre></td></tr></table></figure>
<p><strong>sort方法升序排列实际上是调用每个数组项的toString()方法，所以最后比较的是字符串，无论原数组项是否是数值。</strong></p>
<p>如何实现对数组的数值的排序呢？sort()方法可以接收一个比较函数作为参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compare</span>(<span class="params">value1,value2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> value2-value1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> values=[<span class="number">0</span>,<span class="number">1</span>,<span class="number">10</span>,<span class="number">8</span>,<span class="number">5</span>];</span><br><span class="line">values.<span class="title function_">sort</span>(compare);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(values);<span class="comment">//[10, 8, 5, 1, 0]</span></span><br></pre></td></tr></table></figure>

<h3 id="操作方法"><a href="#操作方法" class="headerlink" title="操作方法"></a>操作方法</h3><ul>
<li>concat():创建当前数组一个副本，将接收到的参数添加到该副本的末尾，最后返回新构建的数组。如果没有给concat()方法传参，就只是复制当前数组并返回副本。若传递给concat()方法是一个或多个数组，则该方法会将这些数组中的的每一项添加到结果数组中。如果传递的值不是数组，就将这些值添加到数组的末尾。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.<span class="title function_">concat</span>(<span class="string">&quot;yellow&quot;</span>,[<span class="string">&quot;black&quot;</span>,<span class="string">&quot;white&quot;</span>]);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);<span class="comment">//[&quot;red&quot;,&quot;green&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors2);<span class="comment">//[&quot;red&quot;, &quot;green&quot;, &quot;yellow&quot;, &quot;black&quot;, &quot;white&quot;]</span></span><br></pre></td></tr></table></figure>
<ul>
<li>slice():基于当前数组的一项或者多项，创建一个新数组。接受一或两个参数，即要返回项的起始和结束位置。若只有一个参数，则返回该参数指定位置到数组末尾所有项。若两个参数，则返回起始和结束位置之间的项–但不包括结束位置的项。slice()方法不会影响原数组。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;purple&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> colors2 = colors.<span class="title function_">slice</span>(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> colors3 = colors.<span class="title function_">slice</span>(<span class="number">1</span>,<span class="number">4</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors2);<span class="comment">//[&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;,&quot;purple&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors3);<span class="comment">//[&quot;green&quot;,&quot;blue&quot;,&quot;yellow&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>如果slice()方法传入的参数有负数，则用数组的长度加上该数来确定相应的位置。</strong></p>
<ul>
<li>splice()方法:主要用途是向数组的中部插入项：</li>
</ul>
<p>1、删除：可以删除任意数量的项，只需指定两个参数：删除项起始位置和要删除项数。例如splice(0,2)会删除数组前两项。<br>2、插入：可以向指定位置插入任意数量的项，只需提供3个参数：其实位置、0（要删除的项数）、要插入项。例如：splice(2,0,”red”,”green”)会从数组的位置2开始插入字符串。<br>3、替换：可以向指定位置插入任意数量的项，且同时删除任意项，只需指定3个参数：起始位置、要删除项数、要插入的任意数量的项。例如：splice(2,1,”red”,”green”)会删除数组位置2的项，然后从位置2开始插入字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> colors = [<span class="string">&quot;red&quot;</span>,<span class="string">&quot;green&quot;</span>,<span class="string">&quot;blue&quot;</span>];</span><br><span class="line"><span class="keyword">var</span> removed = colors.<span class="title function_">splice</span>(<span class="number">0</span>,<span class="number">1</span>);<span class="comment">//删除第一项</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);<span class="comment">//[&#x27;green&#x27;,&quot;blue&quot;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed);<span class="comment">//[&quot;red&quot;]</span></span><br><span class="line"></span><br><span class="line">removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">0</span>,<span class="string">&quot;yellow&quot;</span>,<span class="string">&quot;orange&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);<span class="comment">//[&quot;green&quot;,&quot;yellow&quot;,&quot;orange&quot;,&quot;blue&quot;];</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(remove);<span class="comment">//[]</span></span><br><span class="line"></span><br><span class="line">removed = colors.<span class="title function_">splice</span>(<span class="number">1</span>,<span class="number">1</span>,<span class="string">&quot;red&quot;</span>,<span class="string">&quot;purple&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors);<span class="comment">//[green,red,purple,orange,blue]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(removed);<span class="comment">//[&quot;yellow&quot;]</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="位置方法"><a href="#位置方法" class="headerlink" title="位置方法"></a>位置方法</h3><ul>
<li>indexOf():从数组开始向后查找。</li>
<li>lastIndexOf(): 从数组末尾向前查找。<br>两个方法都接受两个参数：要查找的项和查找起点位置的索引。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">indexOf</span>(<span class="number">3</span>));<span class="comment">//2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">lastIndexOf</span>(<span class="number">3</span>));<span class="comment">//6</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">indexOf</span>(<span class="number">4</span>,<span class="number">4</span>));<span class="comment">//5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(numbers.<span class="title function_">lastIndexOf</span>(<span class="number">4</span>,<span class="number">4</span>));<span class="comment">//3</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="迭代方法"><a href="#迭代方法" class="headerlink" title="迭代方法"></a>迭代方法</h3><p>ECMAScript为数组提供了5个迭代方法，每个方法接受两个参数：要在每一项上运行的函数和运行该函数的作用域对象（可选）————影响this值。对于传入的函数会接受三个参数：数组项的值，该项在数组中的位置和数组对象本身。</p>
<ul>
<li>every():对数组中每一项运行给定函数，如果该函数对每一项都返回true，则返回true。</li>
<li>filter():对数组中每一项运行给定函数，返回该函数会返回true的项组成的数组。</li>
<li>forEach(): 对数组的每一项运行给定函数。该方法无返回值。</li>
<li>map():对数组的每一项运行给定函数，返回每次函数调用的结果组成的数组。</li>
<li>some():对数组每一项运行给定函数，如果该函数对任一项返回true，就返回true。</li>
</ul>
<p><strong>注意every()和some()的用法区别：every()方法的每一项返回为true，才返回true；some()方法只要其中有一项返回为true，就返回true。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//every()和some()方法</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> flag = array.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &gt; <span class="number">0</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> flag0 = array.<span class="title function_">every</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> flag1 = array.<span class="title function_">some</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag0);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(flag1);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//filter()方法</span></span><br><span class="line"><span class="keyword">var</span> filterArray = array.<span class="title function_">filter</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (item &gt; <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(filterArray);<span class="comment">//[3,4,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//map()方法</span></span><br><span class="line"><span class="keyword">var</span> mapArray = array.<span class="title function_">map</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (item * <span class="number">2</span>);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(mapArray);<span class="comment">//[2,4,6,8,10]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//forEach()方法</span></span><br><span class="line">array.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item,index,array</span>)&#123;</span><br><span class="line">	<span class="comment">//执行某些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="归并方法"><a href="#归并方法" class="headerlink" title="归并方法"></a>归并方法</h3><p>ECMAScript 5为Array提供了reduce()和reduceRight()方法，都会迭代数组中所有项，然后构建一个返回值。reduce()方法从数组第一项遍历到最后。reduceRight()方法则反之。两个方法都接受两个参数：一个在每一项上调用的函数和作为缩小基础的初始值（可选)。传给reduce()和reduceRight()的函数接受四个参数：前一个值，当前值，项的索引和数组对象。这个函数返回的任何值都会作为第一个参数自动传给下一项。第一次迭代发生在数组的第二项上，因此第一个参数是数组的第一项，第二个参数是数组的第二项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numbers = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"><span class="keyword">var</span> value = numbers.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (prev + cur);<span class="comment">//第一次迭代 1，2</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> value1 = numbers.<span class="title function_">reduceRight</span>(<span class="keyword">function</span>(<span class="params">prev,cur,index,array</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> (prev + cur);<span class="comment">//第一次迭代 5，4</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value);<span class="comment">//15</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(value1);<span class="comment">//15</span></span><br></pre></td></tr></table></figure>

<h2 id="Date类型"><a href="#Date类型" class="headerlink" title="Date类型"></a>Date类型</h2><p>ECMAScript中的Date类型，使用UTC(Coordinated Universal Time,国际协调时间)1970年1月1日零时开始经过的毫秒数来保存日期。<br>创建一个日期对象，使用new操作符和Date构造函数即可。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br></pre></td></tr></table></figure>
<ul>
<li>Date.parse():接受一个表示日期的字符串，然后根据字符串返回相应的日期毫秒数，如果该字符串不能表示日期，则返回NaN。</li>
<li>Date.UTC():同样返回表示日期的毫秒数，但接受的参数信息不同。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&quot;May 1, 2004&quot;</span>));</span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">parse</span>(<span class="string">&#x27;2016-08-17&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date3 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2016</span>,<span class="number">0</span>));</span><br><span class="line"><span class="keyword">var</span> date4 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="title class_">Date</span>.<span class="title function_">UTC</span>(<span class="number">2016</span>,<span class="number">7</span>,<span class="number">16</span>));<span class="comment">//表示2016年8月16日。</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>ECMAScript5添加了Date.now()返回该方法调用时的日期和时间的毫秒数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Date</span>.<span class="title function_">now</span>();</span><br></pre></td></tr></table></figure>

<h3 id="继承的方法"><a href="#继承的方法" class="headerlink" title="继承的方法"></a>继承的方法</h3><p>Date类型重写了toLocaleString()、toString()和valueOf()方法。但这些方法的返回值与其他类型中的方法不同。</p>
<ul>
<li>Date类型的toLocaleString()方法会按照浏览器设置的地区相适应的格式返回日期和时间，会包含AM/PM，但不会包含时区信息。</li>
<li>toString()方法通常返回带有时区信息的日期和时间，其中时间一般以军用时间（0-23）表示。</li>
<li>valueOf()方法，返回日期的毫秒表示，一般用来比较日期值。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//具体显示结果，因浏览器差异或输出不同</span></span><br><span class="line"><span class="keyword">var</span> date1 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2016</span>,<span class="number">07</span>,<span class="number">17</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1);<span class="comment">//Wed Aug 17 2016 00:00:00 GMT+0800 (CST)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> date2 = <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">2016</span>,<span class="number">07</span>,<span class="number">16</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date2);<span class="comment">//Tue Aug 16 2016 00:00:00 GMT+0800 (CST)</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(date1 &gt; date2);<span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<h3 id="日期格式化方法"><a href="#日期格式化方法" class="headerlink" title="日期格式化方法"></a>日期格式化方法</h3><ul>
<li>toDateString():实现特定格式显示星期几、月、日和年</li>
<li>toTimeString():实现特定格式显示时、分、秒和时区</li>
<li>toLocaleDateString():实现特定格式显示星期几、月日和年</li>
<li>toLocaleTimeString():实现特定格式显示时、分、秒</li>
<li>toUTCString():以特定于实现的格式显示完整的UTC日期</li>
</ul>
<p><strong>以上这些字符串格式方法的输出因浏览器而异，没有那一个方法能够用来在用户界面显示一致的日期信息。</strong></p>
<h3 id="日期-时间组件方法"><a href="#日期-时间组件方法" class="headerlink" title="日期/时间组件方法"></a>日期/时间组件方法</h3><table>
<thead>
<tr>
<th>方法</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>getTime()</td>
<td>返回表示日期的毫秒数</td>
</tr>
<tr>
<td>setTime(毫秒数)</td>
<td>以毫秒数设置日期，会改变整个日期</td>
</tr>
<tr>
<td>getFullYear()</td>
<td>取得4位数年份（如2016）</td>
</tr>
<tr>
<td>getUTCFullYear()</td>
<td>返回UTC日期的4位数年份</td>
</tr>
<tr>
<td>setFullYear(年)</td>
<td>设置日期的年份，必须是4为数字</td>
</tr>
<tr>
<td>setUTCFullYear(年)</td>
<td>设置UTC日期的年份，必须为4位数字</td>
</tr>
<tr>
<td>getMonth()</td>
<td>返回日期中月份，0表示一月，11表示十二月</td>
</tr>
<tr>
<td>getUTCMonth()</td>
<td>返回UTC日期中的月份，0表示一月，11表示十二月</td>
</tr>
<tr>
<td>setMonth(月)</td>
<td>设置日期中的月份，传入月份值必须大于0 ，超过11则增加年份</td>
</tr>
<tr>
<td>setUTCMonth(月)</td>
<td>设置UTC日期中的月份，传入月份值必须大于0 ，超过11则增加年份</td>
</tr>
<tr>
<td>getDate()</td>
<td>返回日期月份中的天数（1到31）</td>
</tr>
<tr>
<td>getUTCDate()</td>
<td>返回UTC日期月份中的天数（1到31）</td>
</tr>
<tr>
<td>setDate(日)</td>
<td>设置日期月份中的天数，如果传入值超过该月实际天数，则增加月份</td>
</tr>
<tr>
<td>setUTCDate(日)</td>
<td>设置UTC日期月份中的天数，如果传入值超过该月实际天数，则增加月份</td>
</tr>
<tr>
<td>getDay()</td>
<td>返回日期中的星期几（0表示周日，6表示周六）</td>
</tr>
<tr>
<td>getUTCDay()</td>
<td>返回UTC日期中的星期几（0表示周日，6表示周六）</td>
</tr>
<tr>
<td>getHours()</td>
<td>返回日期中的小时数（0-23）</td>
</tr>
<tr>
<td>getUTCHours</td>
<td>返回UTC日期中的小时数（0-23）</td>
</tr>
<tr>
<td>setHours(时)</td>
<td>设置日期中的小时数，传入值大于23则增加月份中的天数</td>
</tr>
<tr>
<td>setUTCHours(时)</td>
<td>设置UTC日期中的小时数，传入值大于23则增加月份中的天数</td>
</tr>
<tr>
<td>getMinutes()</td>
<td>返回日期中的分钟数（0-59）</td>
</tr>
<tr>
<td>getUTCMinutes()</td>
<td>返回UTC日期中的分钟数（0-59）</td>
</tr>
<tr>
<td>setMinutes(分)</td>
<td>设置日期中的分钟数，传入值超过59则增加小时数</td>
</tr>
<tr>
<td>setUTCMinutes(分)</td>
<td>设置UTC日期中的分钟数，传入值超过59则增加小时数</td>
</tr>
<tr>
<td>getSeconds()</td>
<td>返回日期中的秒数（0-59）</td>
</tr>
<tr>
<td>getUTCSeconds()</td>
<td>返回UTC日期中的秒数（0-59）</td>
</tr>
<tr>
<td>setSeconds(秒)</td>
<td>设置日期中的秒数，传入值超过59则增加分钟数</td>
</tr>
<tr>
<td>setUTCSeconds(秒)</td>
<td>设置UTC日期中的秒数，传入值超过59则增加分钟数</td>
</tr>
<tr>
<td>getMilliSeconds()</td>
<td>返回日期中的毫秒数</td>
</tr>
<tr>
<td>getUTCMilliSeconds()</td>
<td>返回UTC日期中的毫秒数</td>
</tr>
<tr>
<td>setMillisecons(毫秒)</td>
<td>设置日期中的毫秒数</td>
</tr>
<tr>
<td>setUTCMillisecons(毫秒)</td>
<td>设置UTC日期中的毫秒数</td>
</tr>
<tr>
<td>getTimezoneOffset()</td>
<td>返回本地时间与UTC时间相差分钟数</td>
</tr>
</tbody></table>
<h2 id="RegExp类型"><a href="#RegExp类型" class="headerlink" title="RegExp类型"></a>RegExp类型</h2><p>创建正则表达式：</p>
<p>var expression = / pattern / flags;</p>
<p>其中的模式（pattern）部分可以是任何简单或复杂的正则表达式，可以包含字符类、限定符、分组、向前查找以及反向作用。每个正则表达式可带有一个或多个标志(flags)，用以标明正则表达式的行为。正则表达式的匹配模式支持下列3个标志：</p>
<ul>
<li>g: 表示全局（global)模式，即模式将被应用与所有字符串，而非发现第一个匹配就停止；</li>
<li>i: 表示不区分大小写（case-insensitive)模式，即在确定匹配项时忽略大小写；</li>
<li>m: 表示多行(multiline)模式，即在到达一行文本末尾时还会继续查找下一行中是否存在匹配项。</li>
</ul>
<p>正则表达式中的元字符包括：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">([&#123;\^$|)?*+.]&#125;</span><br></pre></td></tr></table></figure>
<p>利用RegExp构造函数创建正则表达式，接受两个参数–要匹配字符串的模式，可选的标志字符串：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//字面量创建</span></span><br><span class="line"><span class="keyword">var</span> pattern1 = <span class="regexp">/[bc]at/i</span>;</span><br><span class="line"><span class="comment">//使用构造函数</span></span><br><span class="line"><span class="keyword">var</span> pattern2 = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&quot;[bc]at&quot;</span>, i);</span><br></pre></td></tr></table></figure>
<h3 id="RegExp实例方法"><a href="#RegExp实例方法" class="headerlink" title="RegExp实例方法"></a>RegExp实例方法</h3><ul>
<li>exec()接受一个参数，即要应用模式的字符串，然后返回包含第一个匹配信息的数组；或则在没有匹配项的情况下返回null。返回的数组虽然是Array实例，但包含两个额外属性：index和input。</li>
<li>test()方法接受一个字符串参数，在模式与该参数匹配下返回true，否则返回false。</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记（4）-引用类型之Function</title>
    <url>/2016/08/18/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%EF%BC%884%EF%BC%89/</url>
    <content><![CDATA[<h2 id="Function"><a href="#Function" class="headerlink" title="Function"></a>Function</h2><p>函数实际上是对象，每个函数都是Function类型的实例，而且都与其他引用类型一样具有属性和方法。由于函数实际对象，因为函数名实际上也是一个指向函数对象的指针，不会与某个函数绑定。函数通常是使用函数声明语法定义的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//函数声明语法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//函数表达式定义</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//Function构造函数，不推荐</span></span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">new</span> <span class="title class_">Function</span>(<span class="string">&#x27;num1&#x27;</span>,<span class="string">&#x27;num2&#x27;</span>,<span class="string">&#x27;return num1 + num2&#x27;</span>);</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>由Function构造函数可以直观看出：函数是对象，函数名是指针。</p>
<h3 id="没有重载"><a href="#没有重载" class="headerlink" title="没有重载"></a>没有重载</h3><p>在javascript中，如果声明了两个同名函数，后面的函数会覆盖前面的函数。</p>
<p><em>tips:</em></p>
<blockquote>
<p>重载，简单说，就是函数或者方法有相同的名称，但是参数列表不相同的情形，这样的同名不同参数的函数或者方法之间，互相称之为重载函数或者方法。</p>
</blockquote>
<h3 id="函数声明与函数表达式"><a href="#函数声明与函数表达式" class="headerlink" title="函数声明与函数表达式"></a>函数声明与函数表达式</h3><blockquote>
<p>解析器在向执行环境中加载数据时，对函数声明和函数表达式并非一视同仁。解析器会率先读取函数声明，并使其在执行任何代码之前可用（可以访问）；函数表达式，则必须等到解析器执行到它所在的代码行，才会被真正解释执行。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>以上代码可正常执行，代码开始前，解析器已经通过一个函数声明提升的过程，读取并将函数声明添加到执行环境。对代码求值时，Javascript引擎在第一遍会声明函数并将它们放到源代码树的顶部。所以即使声明函数的代码在调用它的代码后面，Javascrit引擎也能把函数声明提升到顶部。<br>下面的代码将函数声明改为函数表达式，执行期间就会导致错误。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="title function_">sum</span>(<span class="number">10</span>,<span class="number">10</span>));</span><br><span class="line"><span class="keyword">var</span> sum = <span class="keyword">function</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> sum1 + sum2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码产生错误的原因在于函数位于一个初始化语句中，而不是一个函数声明。在执行到函数所在语句之前，变量sum中不会保存有对函数的引用。而且由于第一行代码就会导致”unexpected identifier”错误，实际上也不会去执行到下一行。</p>
<p>除了通过变量访问函数的时间不同这一点除外，函数声明与函数表达式的语法其实是等价的。</p>
<h3 id="作为值的函数"><a href="#作为值的函数" class="headerlink" title="作为值的函数"></a>作为值的函数</h3><p>ECMAScript中的函数名本身就是变量，所以函数也可以作为值来使用。不仅可以像传递参数一样把一个函数传递给另一个函数，而且也可以将一个函数作为另一个函数的结果返回。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">callSomeFun</span>(<span class="params">somFun, somArgs</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">somFun</span>(somArgs);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">add10</span>(<span class="params">num</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> num + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result1 = <span class="title function_">callSomeFunction</span>(add10, <span class="number">10</span>);</span><br><span class="line"><span class="title function_">alert</span>(result1);   <span class="comment">//20</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getGreeting</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> result2 = <span class="title function_">callSomeFunction</span>(getGreeting, <span class="string">&quot;Nicholas&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(result2);   <span class="comment">//&quot;Hello, Nicholas&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createComparisonFunction</span>(<span class="params">propertyName</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">object1, object2</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> value1 = object1[propertyName];</span><br><span class="line">        <span class="keyword">var</span> value2 = object2[propertyName];</span><br><span class="line">        <span class="keyword">if</span> (value1 &lt; value2)&#123;</span><br><span class="line">            <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (value1 &gt; value2)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> data = [&#123;<span class="attr">name</span>: <span class="string">&quot;Zachary&quot;</span>, <span class="attr">age</span>: <span class="number">28</span>&#125;, &#123;<span class="attr">name</span>: <span class="string">&quot;Nicholas&quot;</span>, <span class="attr">age</span>: <span class="number">29</span>&#125;];</span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">createComparisonFunction</span>(<span class="string">&quot;name&quot;</span>));</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="number">0</span>].<span class="property">name</span>);  <span class="comment">//Nicholas</span></span><br><span class="line">data.<span class="title function_">sort</span>(<span class="title function_">createComparisonFunction</span>(<span class="string">&quot;age&quot;</span>));</span><br><span class="line"><span class="title function_">alert</span>(data[<span class="number">0</span>].<span class="property">name</span>);  <span class="comment">//Zachary</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="函数内部属性"><a href="#函数内部属性" class="headerlink" title="函数内部属性"></a>函数内部属性</h3><p>函数内部有两个特殊对象：arguments和this。argements的主要用途是保存函数参数，此外这个对象还有一个callee属性。该属性是一个指针，指向拥有这个arguments对象的函数。<br>callee经典实现–阶乘函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">factorial</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="title function_">factorial</span>(num -<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>定义阶乘函数一般用到递归算法。上面的代码所示，在函数有名字，且名字不会变的情况下，没有问题。但这个函数的执行与函数名factorial紧紧耦合了。为了消除这种耦合，使用arguments.callee。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">functino <span class="title function_">factorial</span>(<span class="params">num</span>)&#123;</span><br><span class="line">	<span class="keyword">if</span>(num &lt; <span class="number">1</span>)&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> num * <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(num - <span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>函数内部特殊对象：this。this引用的是函数据以执行的环境对象-或者可以说是this值（当网页在全局作用域中调用函数时，this对象的引用就是window）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123; <span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">sayColor</span>();<span class="comment">//red</span></span><br><span class="line">o.<span class="property">sayColor</span> = sayColor;</span><br><span class="line">o.<span class="title function_">sayColor</span>();<span class="comment">//blue</span></span><br></pre></td></tr></table></figure>
<p>上面函数sayColor()是在全局作用域中定义的，它引用了this对象。由于在调用函数之前，this的值并不确定，因此this可能会在代码执行过程中引用不同的对象。当在全局作用中调用sayColor()时，this引用的是全局对象window。当把函数赋给对象o并调用o.sayColor()时，this引用的对象是o，因此对this.color求值会转换成对o.color求值，结果返回blue。</p>
<p>ECMAScript5规范化了另一个函数属性 caller。这个属性保存着调用当前函数的函数的引用，如果是在全局作用域中调用当前函数，它的值是null。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">outer</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">inner</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(inner.<span class="property">caller</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">outer</span>();</span><br><span class="line"><span class="comment">//同样为了实现松散的耦合，使用arguments.callee.caller</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">inner</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">arguments</span>.<span class="property">callee</span>.<span class="property">caller</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&gt;当函数在严格模式下运行时，访问<span class="variable language_">arguments</span>.<span class="property">callee</span>会导致错误。<span class="title class_">ECMAScript5</span>还定义了<span class="variable language_">arguments</span>.<span class="property">caller</span>属性。但在严格模式下，访问也会导致错误，在非严格模式下，这个属性始终是<span class="literal">undefined</span>。定义这个属性是为了区分<span class="variable language_">arguments</span>.<span class="property">caller</span>和函数caller属性。</span><br><span class="line">严格模式还有一个限制，不能为函数的caller属性赋值，否则会导致错误。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 函数的属性和方法</span><br><span class="line"><span class="title class_">ECMAScript</span>中函数也是对象，因此函数也具有属性和方法。每个函数都包含两个属性： length和prototype。其中，length表示函数希望接收的命名参数个数。</span><br><span class="line">对于<span class="title class_">ECMAScript</span>中的引用类型而言，prototype是保存它们所有实例方法的真正所在。换言之，诸如<span class="title function_">toString</span>()/<span class="title function_">valueOf</span>()等方法实际上都保存在prototype名下。只不过是通过各自对象的实例访问。在创建自定义引用类型以及实现继承时，prototype属性的作用极为重要。**在<span class="title class_">ECMAScript</span>中，prototype属性是不可枚举的，因此使用<span class="keyword">for</span>-<span class="keyword">in</span>无法发现。</span><br><span class="line">&gt;每个函数都包含两个非继承而来的方法：<span class="title function_">apply</span>()和<span class="title function_">call</span>()。这两个方法的用途是在特定的作用域中调用函数，实际上等于设置函数体内<span class="variable language_">this</span>对象的值。</span><br><span class="line"></span><br><span class="line">首先，apply接受两个参数：一个是在其中运行函数的作用域，另一个是参数数组。其中第二个参数可以是<span class="title class_">Array</span>实例，也可以是<span class="variable language_">arguments</span>对象。</span><br><span class="line"></span><br><span class="line"><span class="string">``</span><span class="string">`javascript</span></span><br><span class="line"><span class="string">function sum(num1, num2)&#123;</span></span><br><span class="line"><span class="string">	return num1 + num2;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function callSum1(num1, num2)&#123;</span></span><br><span class="line"><span class="string">	return sum.apply(this, arguments);//传入arguments对象</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">function callSum2(num1, num2)&#123;</span></span><br><span class="line"><span class="string">	return sum.apply(this, [num1, num2])</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">alert(callSum1(10,10));</span></span><br><span class="line"><span class="string">alert(callSum2(10,10));</span></span><br></pre></td></tr></table></figure>

<p>call()方法与apply()方法的作用相同，它们的区别在于仅在于接收参数的方式不同。对于call方法而言，第一个参数是this值没有变化，变化的<br>是其余参数都直接传递给函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">sum</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> num1 + num2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sum1</span>(<span class="params">num1, num2</span>)&#123;</span><br><span class="line">	<span class="keyword">return</span> sum.<span class="title function_">apply</span>(<span class="variable language_">this</span>, num1, num2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>apply()和call()最强大的地方在于能够扩充函数赖以运行的作用域。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sayColor.<span class="title function_">call</span>(<span class="variable language_">this</span>);<span class="comment">//red</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(<span class="variable language_">window</span>);<span class="comment">//window</span></span><br><span class="line">sayColor.<span class="title function_">call</span>(o);<span class="comment">//blue</span></span><br></pre></td></tr></table></figure>

<p>ECMAScript5还定义了一个方法: bind()。该方法会创建一个函数实例，其this值会绑定到传给bind函数的值。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">window</span>.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> o = &#123;<span class="attr">color</span>: <span class="string">&#x27;blue&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sayColor</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="title function_">alert</span>(<span class="variable language_">this</span>.<span class="property">color</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objectSayColor = sayColor.<span class="title function_">bind</span>(o);</span><br><span class="line"><span class="title function_">objectSayColor</span>();<span class="comment">//blue</span></span><br></pre></td></tr></table></figure>
<p>sayColor()调用bind()并传入对象o，创建了objectSayColor()函数。objectSayColor()函数的this值等于o。因此即使在全局作用于中调用这个函数，也是输出blue。</p>
<blockquote>
<p>每个函数继承toLocaleString()和toString()方法始终返回函数的代码。另外继承的valueOf()方法同样也只返回函数代码。</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript高级程序设计笔记（5）-引用类型之基本包装类型</title>
    <url>/2016/11/03/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%EF%BC%885%EF%BC%89/</url>
    <content><![CDATA[<h2 id="基本包装类型"><a href="#基本包装类型" class="headerlink" title="基本包装类型"></a>基本包装类型</h2><blockquote>
<p>ECMAScript提供了三个特殊引用类型： Boolean、 Number 和 String。这些类型与其他引用类型相似，但同时具有与各自基本类型相应的特殊行为。<strong>实际上，每当读取一个基本类型值的时候，后台就会创建一个对应的基本类型的包装对象，从而我们能够调用一些方法，来处理数据。</strong><span id="more"></span></p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;some text&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> s2 = s1.<span class="title function_">substring</span>(<span class="number">2</span>);</span><br></pre></td></tr></table></figure>
<p>上面，s1包含一个字符串，自然是基本类型了，而下一行调用了substring方法，并将结果保存在s2中。基本类型从逻辑上讲，不应该有方法，为什么s1还能调用方法呢。实际上，为了实现上述直观操作，后台已完成了一系列处理。当第二行代码访问s1时，访问过程处于一种读取状态，也就是从内存中读取字符串的值。在读取模式中访问字符串时，后台会自动完成以下处理：</p>
<blockquote>
<p>1、创建一个String类型的实例<br>2、在实例上调用指定方法<br>3、销毁这个实例</p>
</blockquote>
<p>引用类型和基本包装类型的主要区别在于对象的生存期。使用new操作符创建的引用类型的实例，在执行流离开当前作用域之前，都一直保存在内存中。而自动创建的基本包装类型的对象，则只存在于一行代码执行瞬间，然后立即被销毁。这意味着我们不能再运行时为基本类型值添加属性和方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s1 = <span class="string">&#x27;some text&#x27;</span>;</span><br><span class="line">s1.<span class="property">color</span> = <span class="string">&#x27;red&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(s1.<span class="property">color</span>);<span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p><em>之所以是undefined，就是因为第二行创建的String对象在执行第三行代码时，已经被销毁了。第三行代码又创建了自己的String对象，而该对象没有color属性。</em></p>
<p>可以显示调用Boolen、Number和String来创建基本包装类型的对象。但应该在绝对必要的情况下再这样做，因为这种做法容易让人分不清自己在处理基本类型还是引用类型的值。基本包装类型调用typeof 会返回 object，<em>而且所有基本包装类型的对象都会被转换为布尔值 true</em>。</p>
<p>Object构造函数也会像工厂方法一样，根据传入值的类型返回相应基本包装类型的实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Object</span>(<span class="string">&#x27;some text&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(obj <span class="keyword">instanceof</span> <span class="title class_">String</span>); <span class="comment">//true</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>使用new 调用基本包装类型的构造函数，与直接调用同名的转型函数是不一样的。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="string">&#x27;25&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> number = <span class="title class_">Number</span>(value);<span class="comment">//转型函数</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> number);<span class="comment">//&#x27;number&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="title class_">Number</span>(value);<span class="comment">//构造函数</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> obj);<span class="comment">//&#x27;object&#x27;</span></span><br></pre></td></tr></table></figure>
<p>在上例中，变量number中保存的基本类型的值25， 而变量obj中保存的是Number的实例。</p>
<p>tips: <em>尽管不建议直接显示创建基本包装类型的对象，但它们操作基本类型值的能力还是相当重要的，而每个基本包装类型都提供了操作相应值得便捷方法。</em></p>
<h3 id="Boolean类型"><a href="#Boolean类型" class="headerlink" title="Boolean类型"></a>Boolean类型</h3><p>Boolean类型是与布尔值对应的引用类型。要创建Boolean对象，可如下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> booleanObject = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure>

<p>Boolean类型的实例重写了valueof()方法，返回基本类型值true或false；重写了toString()方法，返回字符串”true”和”false”。Boolean对象在ECMAScript中用处不大，经常会造成误解。其中最常见的问题就是在布尔表达式中使用Boolean对象。例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> falseObject = <span class="keyword">new</span> <span class="title class_">Boolean</span>(<span class="literal">false</span>);</span><br><span class="line"><span class="keyword">var</span> result = falseObject &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(result); <span class="comment">//true</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> falseValue = <span class="literal">false</span>;</span><br><span class="line">result = falseVaule &amp;&amp; <span class="literal">true</span>;</span><br><span class="line"><span class="title function_">alert</span>(result); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>上述第一个alert之所以输出true，是因为布尔表达式中所有对象都会被转换为true。</p>
<blockquote>
<p>基本类型与引用类型的布尔值有两个区别：<br>1、typeof 操作符对基本类型返回’boolean’，对引用类型返回’object’<br>2、由于Boolean 对象是Boolean类型的实例，所以使用instanceof 操作符测试Boolean对象会返回true, 而测试基本类型的布尔值则返回false。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> falseObject); <span class="comment">//&#x27;object&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> falseVaule);<span class="comment">//&#x27;boolean&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(falseObject <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>); <span class="comment">//true</span></span><br><span class="line"><span class="title function_">alert</span>(falseValue <span class="keyword">instanceof</span> <span class="title class_">Boolean</span>);<span class="comment">//false</span></span><br></pre></td></tr></table></figure>

<p><strong>建议永远不要使用Boolean对象</strong></p>
<h3 id="Number-类型"><a href="#Number-类型" class="headerlink" title="Number 类型"></a>Number 类型</h3><p>Number是数字值对应的引用类型。要创建Number对象，可以调用Number构造函数时，向其中传递相应的数值。例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numberObject = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>);</span><br></pre></td></tr></table></figure>

<p>与Boolean类型一样，Number类型也重写了valueof()、toLocaleString()和toString()。valueof()方法返回对象表示基本类型的数值，另外两个方法则返回字符串形式的数值。toString()方法传递一个表示基数的参数，告诉它以几进制的方式返回数值的字符串形式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>());<span class="comment">//&#x27;10&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">2</span>));<span class="comment">//&#x27;1010&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">8</span>));<span class="comment">//&#x27;12&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toString</span>(<span class="number">10</span>)); <span class="string">&#x27;10&#x27;</span></span><br></pre></td></tr></table></figure>

<p>除了继承的方法之外，Number类型还提供了一些用于将数值格式化为字符串的方法。</p>
<h4 id="toFixed-方法会按指定的小数位数返回数值的字符串表示"><a href="#toFixed-方法会按指定的小数位数返回数值的字符串表示" class="headerlink" title="toFixed()方法会按指定的小数位数返回数值的字符串表示"></a>toFixed()方法会按指定的小数位数返回数值的字符串表示</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">//10.00</span></span><br><span class="line"><span class="keyword">var</span> num1 = <span class="number">10.005</span>;</span><br><span class="line"><span class="title function_">alert</span>(num1.<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">//10.01</span></span><br><span class="line"><span class="keyword">var</span> num2 = <span class="number">10.007</span>;</span><br><span class="line"><span class="title function_">alert</span>(num2.<span class="title function_">toFixed</span>(<span class="number">2</span>));<span class="comment">//10.01</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>toFixed()方法可以处理0-20个小数位的数字，但这只是规范而已，有些浏览器支持更多位数。</p>
</blockquote>
<h4 id="toExponential-该方法返回指数表示法（e表示法）"><a href="#toExponential-该方法返回指数表示法（e表示法）" class="headerlink" title="toExponential(),该方法返回指数表示法（e表示法）"></a>toExponential(),该方法返回指数表示法（e表示法）</h4><p>与toFixed()方法一样，toExponential()也接收一个参数，而且该参数同样也是指定输出结果中的小数位数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toExponential</span>(<span class="number">1</span>));<span class="comment">//1.0e+1</span></span><br></pre></td></tr></table></figure>

<h4 id="toPrecision"><a href="#toPrecision" class="headerlink" title="toPrecision()"></a>toPrecision()</h4><p>对于一个数值来说，toPrecision()方法可能返回固定大小（fixed）格式，也可能返回指数（exponential)格式，具体规则看哪种格式最合适。该方法接收一个参数，即表示数值的所有数字的位数（不包括指数部分)。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="number">99</span>;</span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toPrecision</span>(<span class="number">1</span>));<span class="comment">//&#x27;1e+2&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toPrecision</span>(<span class="number">2</span>));<span class="comment">//&#x27;99&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(num.<span class="title function_">toPrecision</span>(<span class="number">2</span>));<span class="string">&#x27;99.0&#x27;</span></span><br></pre></td></tr></table></figure>
<p>实际上，toPrecision()会根据要处理的数值，决定到底调用toFixed()还是调用toExponential()。这三种方法都可以通过向上或向下舍入，做到以最准确的形式来表示带有正确的小数位数。</p>
<blockquote>
<p>toPrecision()方法可以表现1到21位小数。某些浏览器支持范围更大。</p>
</blockquote>
<p><em>与Boolean一样，不建议直接实例化Number类型。</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> numberObject = <span class="keyword">new</span> <span class="title class_">Number</span>(<span class="number">10</span>);</span><br><span class="line"><span class="keyword">var</span> numberVaule = <span class="number">10</span>;</span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> numberObject); <span class="comment">//&#x27;Object&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(<span class="keyword">typeof</span> numberValue);<span class="comment">//&#x27;number&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(numberObject <span class="keyword">instanceof</span> <span class="title class_">Number</span>);<span class="comment">//&#x27;true&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(numberValue <span class="keyword">instanceof</span> <span class="title class_">Number</span>); <span class="comment">//&#x27;false&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="String类型"><a href="#String类型" class="headerlink" title="String类型"></a>String类型</h3><p>String类型是字符串的对象包装类型，可以使用String构造函数来创建。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">StringObject</span> = <span class="keyword">new</span> <span class="title class_">String</span>(<span class="string">&#x27;Hello world&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>String对象的方法，也可以在所有基本的字符串值中来访问。其中，继承的valueOf()、toLocaleString()和toString()方法，都返回对象所表示的基本字符串值。</p>
<p>String类型的每个实例都有一个length属性，表示字符串中包含多少个字符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringVlue.<span class="property">length</span>);<span class="comment">//11</span></span><br></pre></td></tr></table></figure>

<p>String类型提供了很多方法，用于辅助完成对ECMAScript中字符串的解析和操作。</p>
<h4 id="字符方法"><a href="#字符方法" class="headerlink" title="字符方法"></a>字符方法</h4><p>charAt()和charCodeAt()两个方法都接收一个参数，即基于0的字符位置。</p>
<p>charAt(): 以单字符字符串的形式返回给定位置的那个字符。<br>charCodeAt():返回指定位置的字符的字符编码</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">charAt</span>(<span class="number">1</span>)); <span class="comment">//&#x27;e&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(<span class="title function_">stringCodeAt</span>(<span class="number">1</span>));<span class="comment">//&#x27;101&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//ECMAScript还定义另一个访问个别字符的方法</span></span><br><span class="line"><span class="title function_">alert</span>(stringVlaue[<span class="number">1</span>]);<span class="comment">//&#x27;e&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="字符串操作方法"><a href="#字符串操作方法" class="headerlink" title="字符串操作方法"></a>字符串操作方法</h4><p>1、 concat()方法： 用于将一个或多个字符串拼接起来，返回拼接得到的心字符串。实际应用中，拼接字符串使用更多的是加号操作符（+）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello &#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> result = stringValue.<span class="title function_">conat</span>(<span class="string">&#x27;world&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(result) = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringVaule) = <span class="string">&#x27;hello &#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> result1 = stringValue.<span class="title function_">concat</span>(<span class="string">&#x27;world&#x27;</span>, <span class="string">&#x27;!&#x27;</span>);</span><br><span class="line"><span class="title function_">alert</span>(result1);<span class="comment">//&#x27;hello world!&#x27;</span></span><br></pre></td></tr></table></figure>
<p>2 、 ECMAScript还提供了三个基于字符串创建新字符串的方法： slice()、substr()、substring()。这三种方法都会返回备操作字符串的一个子字符串，而且都接收一或两个参数。第一个参数指定子字符串的起始位置，第二个参数（在指定的情况下）表示字符串结束的位置。<br>slice()和substring()的第二个参数指定的是子字符串最后一个字符后面的位置。而substr()的第二个参数指定的则是返回的字符个数。如果没有传递第二个参数，则将字符串的长度作为结束位置，不包含该字符。与concat方法一样，slice()、substr()和substring()也不会修改字符串本身的值，它们只是返回一个基本类型的字符串值，对原始字符串没有任何影响。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>));<span class="comment">//&#x27;lo world&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>));<span class="comment">//&#x27;lo world&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>));<span class="comment">//&#x27;lo world&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(stringVaule.<span class="title function_">slice</span>(<span class="number">3</span>, <span class="number">7</span>));<span class="comment">//&#x27;lo w&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="string">&#x27;lo w&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, <span class="number">7</span>)); <span class="string">&#x27;lo worl&#x27;</span></span><br></pre></td></tr></table></figure>
<p>substr()第二个参数表示返回的字符串个数，所以返回了7个字符。</p>
<p>在传递给这些方法的参数是负值的情况下，它们的行为就不尽相同了。slice()方法会将传入的负值与字符串的长度相加，substr()方法将负的第一个参数加上字符串长度，而将第二个参数转换为0。最后，substring()方法会将所有负值参数都转换为0.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">slice</span>(-<span class="number">3</span>));<span class="comment">//&#x27;rld&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substring</span>(-<span class="number">3</span>));<span class="string">&#x27;hello world&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substr</span>(-<span class="number">3</span>)); <span class="string">&#x27;rld&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">slice</span>(<span class="number">3</span>, -<span class="number">4</span>));<span class="comment">//&#x27;lo w&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substring</span>(<span class="number">3</span>, -<span class="number">4</span>));<span class="string">&#x27;hel&#x27;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">substr</span>(<span class="number">3</span>, -<span class="number">4</span>)); <span class="string">&#x27;&#x27;</span>(空字符串)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>IE的Javascript实现在处理向substr()方法传递负值得情况时存在问题，它会返回原始的字符串。IE9修复了这个问题。</p>
</blockquote>
<p>3、 字符串位置方法</p>
<p>indexOf()和lastIndexOf():这两个方法都是从一个字符串中搜索给定的子字符串，然后返回子字符串的位置，如果没有找到就返回-1。<br>idnexOf()从字符串开头向后寻找，而lastIndexOf()方法是从字符串末尾向前搜索。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">indexof</span>(<span class="string">&#x27;o&#x27;</span>));<span class="comment">// 4,第一次出现位置</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>));<span class="comment">// 7</span></span><br></pre></td></tr></table></figure>

<p>这两个方法都可接受第二个参数，表示从字符串的哪个位置开始搜索。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;hello world&#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">indexof</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">6</span>));<span class="comment">// 7</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">lastIndexOf</span>(<span class="string">&#x27;o&#x27;</span>, <span class="number">6</span>));<span class="comment">// 4</span></span><br></pre></td></tr></table></figure>
<p>通过循环调用indexOf()或lastIndexOf()来找到所有匹配的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringValue = <span class="string">&#x27;Lorem ipsum dolor sit amet, consectetur adipisicing elit&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> positions = [];</span><br><span class="line"><span class="keyword">var</span> pos = stringValue.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(pos &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">	positions.<span class="title function_">push</span>(pos);</span><br><span class="line">	pos = stringValue.<span class="title function_">indexOf</span>(<span class="string">&#x27;e&#x27;</span>, pos + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">alert</span>(positions);<span class="comment">//3, 24, 32, 35, 52</span></span><br></pre></td></tr></table></figure>

<p>4、 trim()方法<br>trim()方法会创建一个字符串的副本，删除前置及后缀所有的空格，然后返回结果。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> stringVaule = <span class="string">&#x27;  hello wolrd  &#x27;</span>;</span><br><span class="line"><span class="title function_">alert</span>(stringValue.<span class="title function_">trim</span>());<span class="comment">//&#x27;hello world&#x27;;</span></span><br><span class="line"><span class="title function_">alert</span>(stringValue);<span class="comment">//&#x27;  hello world  &#x27;</span></span><br></pre></td></tr></table></figure>

<p><em>部分浏览器还支持非标准的trimLeft()和trimRight()方法</em></p>
<p>5、字符串大小写转换<br>toLowerCase()/toLocaleCase(): 小写转换，后一种针对地区语言保证实现。<br>toUperCase()/toLocaleUpercase(): 大写转换，后一种针对地区语言保证实现。</p>
<p>6、字符串模式匹配</p>
<p>第一种方法： match()。本质上与调用RegExp的exec()方法相同。macth()只接受一个参数，要么是一个正则表达式，要么是一个RegExp对象。该方法返回一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hat, cat, at, bat&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> pattern = <span class="regexp">/.at/</span>;</span><br><span class="line"><span class="keyword">var</span> pattern0 = <span class="regexp">/.at/g</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">match</span>(pattern));<span class="comment">//[&quot;cat&quot;, index: 0, input: &quot;cat,hat,at,bat&quot;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">match</span>(pattern).<span class="property">index</span>);<span class="comment">//0</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">match</span>(pattern0));<span class="comment">//[&quot;cat&quot;, &quot;hat&quot;, &quot;,at&quot;, &quot;bat&quot;]</span></span><br></pre></td></tr></table></figure>

<p>第二种方法： search()。该方法的唯一参数与match()方法参数相同：由字符串或者RegExp对象指定的一个正则表达式。search()方法返回字符中第一个匹配项的索引；如果没有找到匹配项，返回 -1。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hat, cat, at, bat&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">search</span>(<span class="regexp">/at/</span>));<span class="comment">//1</span></span><br></pre></td></tr></table></figure>

<p>第三种方法： replace()。该方法接受两个参数，第一个参数：可以是一个RegExp对象或者一个字符串，第二个参数可以是一个字符串，或者一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;hat, cat, at, bat&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> rs = s.<span class="title function_">replace</span>(<span class="string">&#x27;at&#x27;</span>,<span class="string">&#x27;ond&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rs); <span class="comment">//&#x27;hond, cat, at, bat&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> rs0 = s.<span class="title function_">replace</span>(<span class="regexp">/at/g</span>, <span class="string">&#x27;ond&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(rs0);<span class="comment">//&#x27;hond, cond, ond, bond&#x27;;</span></span><br></pre></td></tr></table></figure>

<h4 id="localeCompare-方法。"><a href="#localeCompare-方法。" class="headerlink" title="localeCompare()方法。"></a>localeCompare()方法。</h4><p>localeCompare()返回三个值： 负数（大部分是-1）、0 、正数（大部分是1）。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> s = <span class="string">&#x27;yellow&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">localeCompare</span>(<span class="string">&#x27;brick&#x27;</span>));<span class="comment">// 1，字符串(&#x27;yellow&#x27;)在字母表中应该排在字符串参数(&#x27;brick&#x27;)之后，则返回一个正数。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">localeCompare</span>(<span class="string">&#x27;yellow&#x27;</span>));<span class="comment">// 0,字符串(&#x27;yellow&#x27;)在字母表中与字符串参数(&#x27;yellow&#x27;)相等，则返回0。</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(s.<span class="title function_">localeCompare</span>(<span class="string">&#x27;zoo&#x27;</span>));<span class="comment">// -1，字符串(&#x27;yellow&#x27;)在字母表中应该排在字符串参数(&#x27;zoo&#x27;)之前，则返回一个负数。</span></span><br></pre></td></tr></table></figure>

<h4 id="fromCharCode-方法"><a href="#fromCharCode-方法" class="headerlink" title="fromCharCode()方法"></a>fromCharCode()方法</h4><p>与charCodeAt()执行的是相反的操作，该方法接收一或多个字符编码，然后将他们转换成一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">String</span>.<span class="title function_">fromCharCode</span>(<span class="number">104</span>,<span class="number">101</span>,<span class="number">108</span>,<span class="number">108</span>,<span class="number">111</span>));<span class="comment">//&#x27;hello&#x27;</span></span><br></pre></td></tr></table></figure>

<h4 id="HTML方法"><a href="#HTML方法" class="headerlink" title="HTML方法"></a>HTML方法</h4>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript数据基本类型与引用类型</title>
    <url>/2017/02/21/Javascript%E6%95%B0%E6%8D%AE%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%BC%95%E7%94%A8%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="JavaScript-数据类型"><a href="#JavaScript-数据类型" class="headerlink" title="JavaScript 数据类型"></a>JavaScript 数据类型</h2><p>说起Javascript的数据类型，通常我们会看到下面两种分类。</p>
<blockquote>
<p>字符串、数字、布尔、数组、对象、Null、Undefined(w3c)</p>
</blockquote>
<p>还有一种经常看到的就是把数组归类在对象中(这大概也是大家通常认为的吧)：<span id="more"></span></p>
<blockquote>
<p>数值（number）：整数和小数（比如1和3.14）<br>字符串（string）：字符组成的文本（比如”Hello World”）<br>布尔值（boolean）：true（真）和false（假）两个特定值<br>undefined：表示“未定义”或不存在，即此处目前没有任何值<br>null：表示空缺，即此处应该有一个值，但目前为空<br>对象（object）：各种值组成的集合</p>
</blockquote>
<p><em>现在又要多加一种了，ES6新增 符号(symbol)</em></p>
<p>其中对象又可以分为：</p>
<blockquote>
<p>狭义的对象（object）<br>数组（array）<br>函数（function）</p>
</blockquote>
<p>js的数据类型根据在内存中的存储方式，又可以分为两类：</p>
<blockquote>
<p>(1)值类型：数值、布尔值、null、undefined、String。<br>(2)引用类型：对象、数组、函数。</p>
</blockquote>
<p>js基本数据类型有： number、string、boolean、undefined、null，对于基本类型，它们在内存中占有固定的大小空间，通过值的形式保存在桟内存中，我们通过按值来访问。</p>
<p>对于引用类型的赋值，需要在堆内存中为这个值分配空间。由于值的大小不固定（数组大小、对象属性和方法个数都不确定），因此不能把把它们保存在桟内存中。但是我们可以在桟内存中保存值的内存地址，因为内存地址大小是固定的。引用类型对象存储的实际是它们的引用地址，对象的实际内容单独存放，因为引用对象通常比较庞大，这是数据开销和内存开销优化的手段。</p>
<p>简而言之，堆内存存放引用值，栈内存存放固定类型值。“引用”是一个指向对象实际位置的指针。</p>
<h2 id="举个栗子"><a href="#举个栗子" class="headerlink" title="举个栗子"></a>举个栗子</h2><h3 id="1、基本数据类型"><a href="#1、基本数据类型" class="headerlink" title="1、基本数据类型"></a>1、基本数据类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">// 1</span></span><br><span class="line"><span class="keyword">var</span> c = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> d = c;</span><br><span class="line">c = <span class="string">&#x27;1234&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(c);<span class="comment">//&#x27;1234&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(d);<span class="comment">//&#x27;123&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="2、引用类型"><a href="#2、引用类型" class="headerlink" title="2、引用类型"></a>2、引用类型</h3><p>在这里需注意的是，引用指向的是具体的对象，而不是另一个引用。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a; <span class="comment">//此时b.name为&#x27;a&#x27;</span></span><br><span class="line">a.<span class="property">name</span> = <span class="string">&#x27;c&#x27;</span>; <span class="comment">//b.name = a.name = &#x27;c&#x27;</span></span><br><span class="line">b.<span class="property">name</span> = <span class="string">&#x27;d&#x27;</span>; <span class="comment">//b.name = a.name = &#x27;d&#x27;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);<span class="comment">// d</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);<span class="comment">// d</span></span><br></pre></td></tr></table></figure>

<p>对象的克隆：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;age&#x27;</span>:<span class="string">&#x27;1&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> a)&#123;</span><br><span class="line">	b[key] = a[key];</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="property">name</span> = <span class="string">&#x27;b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);<span class="comment">//&#123; &#x27;name&#x27;: &#x27;a&#x27;,&#x27;age&#x27;:&#x27;1&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);<span class="comment">//&#123; &#x27;name&#x27;: &#x27;b&#x27;,&#x27;age&#x27;:&#x27;1&#x27;&#125;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>);<span class="comment">// a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>);<span class="comment">// b</span></span><br></pre></td></tr></table></figure>

<p>再来看另一个栗子：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = &#123; <span class="string">&#x27;name&#x27;</span>:<span class="string">&#x27;a&#x27;</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a = <span class="number">1</span>; <span class="comment">//此时a已经不是引用类型</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">name</span>); <span class="comment">// a</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">name</span>); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<p>关于数组的一个栗子:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b.<span class="title function_">push</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>
<p>怎样实现对一个数组的克隆，同时操作克隆对象又不影响原数组呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = [<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;3&#x27;</span>];</span><br><span class="line"><span class="keyword">var</span> b = [];</span><br><span class="line"><span class="keyword">var</span> n = a.<span class="property">length</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; n; m++)&#123;</span><br><span class="line">	b.<span class="title function_">push</span>(a[m]);</span><br><span class="line">&#125;</span><br><span class="line">b.<span class="title function_">push</span>(<span class="string">&#x27;4&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a); <span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b); <span class="comment">// [&#x27;1&#x27;,&#x27;2&#x27;,&#x27;3&#x27;,&#x27;4&#x27;]</span></span><br></pre></td></tr></table></figure>

<p>关于函数的一个栗子</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">b = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">a</span>();<span class="comment">// 0</span></span><br><span class="line"><span class="title function_">b</span>();<span class="comment">// 1</span></span><br></pre></td></tr></table></figure>
<p>基于上面的例子，有人总结了下面的内容：</p>
<blockquote>
<p>函数的克隆，与其它引用对象有所不同，利用’=’赋值即可实现克隆。对克隆对象的操作，不会影响原对象。这是因为克隆之后的对象会单独复制一次并存储实际数据，属于真正的克隆。</p>
</blockquote>
<p>但应该注意：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> x = <span class="number">0</span>;</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(x);</span><br><span class="line">&#125;</span><br><span class="line">a.<span class="property">test</span> = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">var</span> b = a;</span><br><span class="line">a.<span class="property">test</span> = <span class="string">&#x27;c&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="property">test</span>);<span class="comment">//c</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">test</span>);<span class="comment">//c</span></span><br></pre></td></tr></table></figure>

<p><strong>如何实现完整的对象克隆？</strong></p>
<blockquote>
<p>完整的对象克隆，包括克隆普通对象、引用对象。因此实现完整克隆时，需要对克隆对象进行判断。对于基本类型和引用类型的方法不同。对于引用对象的完整克隆(深度克隆/对象的深度克隆/对象的深度复制，不同的称谓)，包括对象的值也是一个对象也要进行完整克隆。</p>
</blockquote>
<p>其实简单理解，可以认为我们需要创建一个对象b，使它与a有一样的属性和方法，但b的操作又不能影响a。</p>
<p>引用网上一个深度克隆的方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">clone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> o, i, j, k;</span><br><span class="line">	<span class="keyword">if</span> (<span class="title function_">typeof</span>(obj) != <span class="string">&quot;object&quot;</span> || obj === <span class="literal">null</span>) <span class="keyword">return</span> obj;</span><br><span class="line">	<span class="keyword">if</span> (obj <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">		o = [];</span><br><span class="line">		i = <span class="number">0</span>;</span><br><span class="line">		j = obj.<span class="property">length</span>;</span><br><span class="line">		<span class="keyword">for</span> (; i &lt; j; i++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="title function_">typeof</span>(obj[i]) == <span class="string">&quot;object&quot;</span> &amp;&amp; obj[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">				o[i] = <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(obj[i]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				o[i] = obj[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		o = &#123;&#125;;</span><br><span class="line">		<span class="keyword">for</span> (i <span class="keyword">in</span> obj) &#123;</span><br><span class="line">			<span class="keyword">if</span> (<span class="title function_">typeof</span>(obj[i]) == <span class="string">&quot;object&quot;</span> &amp;&amp; obj[i] != <span class="literal">null</span>) &#123;</span><br><span class="line">				o[i] = <span class="variable language_">arguments</span>.<span class="title function_">callee</span>(obj[i]);</span><br><span class="line">			&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">				o[i] = obj[i];</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简化下：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> targetObj = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(obj) ? [] : &#123;&#125;;</span><br><span class="line">    <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (obj.<span class="title function_">hasOwnProperty</span>(key)) &#123;</span><br><span class="line">                <span class="keyword">if</span> (obj[key] &amp;&amp; <span class="keyword">typeof</span> obj[key] === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">                    targetObj[key] = <span class="title function_">deepClone</span>(obj[key]);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> &#123;</span><br><span class="line">                    targetObj[key] = obj[key];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> targetObj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>同样，我们借用 JSON.parse 和 JSON.stringify 也可以实现深拷贝</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">obj</span>)&#123;</span><br><span class="line">    <span class="keyword">let</span> _obj = <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj),</span><br><span class="line">        objClone = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(_obj);</span><br><span class="line">    <span class="keyword">return</span> objClone</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>补充</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	<span class="attr">basic</span>: &#123;</span><br><span class="line">		<span class="title class_">Name</span>: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">basic</span>.<span class="property">Name</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p1.<span class="title function_">sayHello</span>();<span class="comment">// Hello.I &#x27;m xiaoming</span></span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">p2.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I &#x27;m xiaoming</span></span><br><span class="line">p1.<span class="property">basic</span>.<span class="property">Name</span> = <span class="string">&quot;xiaowang&quot;</span>;</span><br><span class="line">p1.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I, m xiaowang</span></span><br><span class="line">p2.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I, m xiaowang</span></span><br></pre></td></tr></table></figure>

<p>可能会疑问，改变了p1的属性，为什么p2的也改变了。这就得从函数的基于原型链实现继承中对属性和方法的访问说起。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Person</span> = <span class="keyword">function</span>(<span class="params"></span>) &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写函数原型为basic/sayHello</span></span><br><span class="line"><span class="title class_">Person</span>.<span class="property"><span class="keyword">prototype</span></span> = &#123;</span><br><span class="line">	<span class="attr">basic</span>: &#123;</span><br><span class="line">		<span class="title class_">Name</span>: <span class="string">&quot;xiaoming&quot;</span></span><br><span class="line">	&#125;,</span><br><span class="line">	<span class="attr">sayHello</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Hello,I&#x27;m &quot;</span> + <span class="variable language_">this</span>.<span class="property">basic</span>.<span class="property">Name</span>)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化对象</span></span><br><span class="line"><span class="keyword">var</span> p1 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"><span class="keyword">var</span> p2 = <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例本身没有sayHello方法，因此调用原型链上的sayHello方法。</span></span><br><span class="line">p1.<span class="title function_">sayHello</span>();<span class="comment">// Hello.I &#x27;m xiaoming</span></span><br><span class="line">p2.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I &#x27;m xiaoming</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//修改实例对象的属性和方法时，如果此对象的该属性或方法不存在，只会在该对象上创建该属性，而不是修改原型链上的属性</span></span><br><span class="line">p1.<span class="property">address</span> = <span class="string">&#x27;beijing&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">address</span>);<span class="comment">//beijing</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">address</span>);<span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line">p1.<span class="property">basic</span> = <span class="string">&#x27;test&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">basic</span>);<span class="comment">// test,p1自己的属性</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p2.<span class="property">basic</span>);<span class="comment">//Object &#123;Name: &quot;xiaoming&quot;&#125;,p2依旧访问原型链上的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意了</span></span><br><span class="line"><span class="keyword">delete</span> p1.<span class="property">basic</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">basic</span>);<span class="comment">//删除了p1的属性，访问原型链上的属性</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//更改实例对象在原型链上的属性，如果按照前面的说法，p1可能会创建自己的basic.name属性并赋值为xiaowang。实际情况并非如此。如果实例对象要修改自身的一级属性（p1.basic = &quot;xxx&quot;;），并且该属性不存在，那么，会在该实例对象上创建该属性，并赋值该属性。此时，不会影响对原型链上的该属性造成影响。如果实例对象要修改自身的N(N&gt;1)级属性（p1.basic.name = &quot;xxx&quot;;)时，若该实例不存在N级前的N-1级中的某个属性，就会到原型链上查找该属性，若未找到，查找下一级原型链，如果到最后都没有找到，给出TypeError错误，如果找到了，那么就在该原型链上修改此属性</span></span><br><span class="line">p1.<span class="property">basic</span>.<span class="property">Name</span> = <span class="string">&quot;xiaowang&quot;</span>;<span class="comment">//自身不存在该属性，访问原型链，在原型链上找到该属性，并修改</span></span><br><span class="line">p1.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I, m xiaowang, 原型链已被修改</span></span><br><span class="line">p2.<span class="title function_">sayHello</span>();<span class="comment">// Hello, I, m xiaowang, 原型链已被修改</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(p1.<span class="property">father</span>.<span class="property">name</span>);<span class="comment">//Uncaught TypeError: Cannot read property &#x27;name&#x27; of undefined(…)</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Javascript语言精粹读书笔记</title>
    <url>/2016/12/29/Javascript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p>传统fibonacci函数：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> n &lt; <span class="number">2</span>? <span class="attr">n</span>: <span class="title function_">fibonacci</span>(n - <span class="number">1</span>) + <span class="title function_">fibonacci</span>(n -<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt;= <span class="number">10</span>; i++)&#123;</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">writeln</span>(<span class="string">&#x27;//&#x27;</span> + i + <span class="string">&#x27;:&#x27;</span> + <span class="title function_">fibonacci</span>(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>上述操作中fibonacci函数被调用了453次，我们调用了11次，它自身滴啊用了442次去计算可能已被计算过的值。增减函数记忆功能后，可以显著减少运算量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> fibonacci = <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> memo = [<span class="number">0</span>, <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">var</span> fib = <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> result !== <span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">            result = <span class="title function_">fib</span>(n-<span class="number">1</span>) + <span class="title function_">fib</span>(n-<span class="number">2</span>);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fib;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>推而广之，memoizer函数取得一个初始的memo数组和formula函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> memoizer = <span class="keyword">function</span>(<span class="params">memo, formula</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> recur = <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> result = memo[n];</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">typeof</span> result !==<span class="string">&#x27;number&#x27;</span>)&#123;</span><br><span class="line">            result = <span class="title function_">formula</span>(recur, n);</span><br><span class="line">            memo[n] = result;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> recur;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fibonacci = <span class="title function_">memoizer</span>([<span class="number">0</span>, <span class="number">1</span>], <span class="keyword">function</span>(<span class="params">recur, n</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">recur</span>(n - <span class="number">1</span>) + <span class="title function_">recur</span>(n - <span class="number">2</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//阶乘函数</span></span><br><span class="line"><span class="keyword">var</span> factorial = <span class="title function_">memoizer</span>([<span class="number">1</span>,<span class="number">1</span>], <span class="keyword">function</span>(<span class="params">recur, n</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> n * <span class="title function_">recur</span>(n - <span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure>

<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><p>通过隐藏无谓的prototype操作细节，一行语句构造对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Mammal</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">get_name</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title class_">Mammal</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">says</span> = <span class="title function_">funtion</span>(<span class="params"></span>)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">saying</span>||<span class="string">&#x27;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Function</span>.<span class="title function_">method</span>(<span class="string">&#x27;inherits&#x27;</span>, <span class="keyword">function</span>(<span class="params">Parent</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property"><span class="keyword">prototype</span></span> = <span class="keyword">new</span> <span class="title class_">Parent</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Cat</span> = <span class="keyword">function</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">name</span> = name;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">saying</span> = <span class="string">&#x27;meow&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line">.<span class="title function_">inherits</span>(<span class="title class_">Mammal</span>)</span><br><span class="line">.<span class="title function_">method</span>(<span class="string">&#x27;purr&#x27;</span>, <span class="keyword">function</span>(<span class="params">n</span>)&#123;</span><br><span class="line">    .....</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">method</span>(<span class="string">&#x27;get_name&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">    ......</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Mac上安装MongoDB（HomeBrew方式）</title>
    <url>/2016/06/08/Mac%E4%B8%8A%E5%AE%89%E8%A3%85MongoDB/</url>
    <content><![CDATA[<p>关于Mac上安装MongoDB的方法有很多，在这里我用比较简洁的方式–利用HomeBrew安装MongoDB，并将安装记录下来，希望能帮到需要安装MongoDB的同学。另附<a href="https://docs.mongodb.com/manual/tutorial/install-mongodb-on-os-x/">MongoDB官网安装指南</a>。<span id="more"></span></p>
<h2 id="更新-HomeBrew-的-package-数据库"><a href="#更新-HomeBrew-的-package-数据库" class="headerlink" title="更新 HomeBrew 的 package 数据库"></a>更新 HomeBrew 的 package 数据库</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew update</span><br></pre></td></tr></table></figure>

<h2 id="安装-MongoDB"><a href="#安装-MongoDB" class="headerlink" title="安装 MongoDB"></a>安装 MongoDB</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install mongodb</span><br></pre></td></tr></table></figure>
<p>此时终端会有如下显示，下载软件的进度：</p>
<img src='http://7xprrp.com1.z0.glb.clouddn.com/mongo-install/mongo1.png' alt=''/>

<p>安装完毕后，终端显示如下：</p>
<img src='http://7xprrp.com1.z0.glb.clouddn.com/mongo-install/mongo2.png' alt=''/>


<h2 id="启动-MongdoDB"><a href="#启动-MongdoDB" class="headerlink" title="启动 MongdoDB"></a>启动 MongdoDB</h2><p>在上一步操作的最后，已经将启动方式告诉我们了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongod --config /usr/local/etc/mongod.conf</span><br></pre></td></tr></table></figure>

<h2 id="连接到-MongoDB"><a href="#连接到-MongoDB" class="headerlink" title="连接到 MongoDB"></a>连接到 MongoDB</h2><p>此时我们需要新打开一个终端界面，并执行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mongo</span><br></pre></td></tr></table></figure>

<h2 id="开始体验吧"><a href="#开始体验吧" class="headerlink" title="开始体验吧"></a>开始体验吧</h2><img src='http://7xprrp.com1.z0.glb.clouddn.com/mongo-install/mongo3.png' alt=''/>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB学习笔记(1)</title>
    <url>/2016/09/07/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-1/</url>
    <content><![CDATA[<img src='http://7xprrp.com1.z0.glb.clouddn.com/mongodb/mongodb.jpg' alt=''/>
MongoDB的一些基本概念：
1 文档是MongoDB中数据的基本单元
2 集合可以看做是没有模式的表
3 MongoDB的单个实例可以容纳多个独立的数据库，每一个都有自己的集合和权限
4 MongoDB自带Javascript Shell
5 每一个文档都有一个特殊的键_id，它在文档所处集合中是唯一的。
<span id="more"></span>


<h1 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h1><p>文档是MongoDB的核心概念。多个键及其关联的值有序地放置在一起便是文档。</p>
<ul>
<li>文档中键值对是有序的。<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//下面两个文档是完全不同的</span><br><span class="line">&#123;&quot;greeting&quot;: &quot;Hello, world!&quot;, &#x27;foo&#x27;: 1&#125;</span><br><span class="line">&#123;&quot;foo&quot;: 1, &quot;greeting&quot;: &#x27;Hello, world!&#x27;&#125;</span><br></pre></td></tr></table></figure></li>
<li>文档中的值不仅可以是双引号里的字符串，也可以是其他几种类型的数据。</li>
<li>文档中的键是字符串。除了少数例外情况，键可以是任意UTF-8字符。</li>
<li>键不能包含有\0(空字符)。这个字符用来表示键的结尾。</li>
<li>.和$有特别意义，只有在特定环境下才能使用。</li>
<li>以下划线_开头的键是保留的，虽然这个并不是严格要求。</li>
<li>MongoDB不但区分类型，也区分大小写。</li>
<li>MongoDB的文档不能有重复的键。</li>
</ul>
<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><p>集合就是一组文档。文档类似关系数据中的行，集合就如同表。</p>
<h2 id="无模式"><a href="#无模式" class="headerlink" title="无模式"></a>无模式</h2><p>集合是无模式的，一个集合里的文档可以是各式各样的。</p>
<h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>集合名可以是满足一下条件的任意utf-8字符串：</p>
<p>1 集合名不能是空字符串。<br>2 集合名不能包含有\0(空字符)，这个字符表示集合名的结尾。<br>3 集合名不能以”system.”开头，这是为系统集合保留的前缀。<br>4 用户创建的集合名字不能有保留字符$。</p>
<h2 id="子集合"><a href="#子集合" class="headerlink" title="子集合"></a>子集合</h2><p>组织集合的一种惯例是使用”.”字符分开的按命名空间划分的子集合。例：带有博客功能应用，可能包含两个集合，blog.posts和blog.authors。这样做只是为了组织结构更好，也就是说blog这个集合（这里根本就不需要存在）及其子集合没有任何关系。子集合没有特别地方，但是很有用。<br><strong>MongoDB中使用子集合来组织数据是很好的方法</strong></p>
<h1 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h1><p>MongoDB中多个文档组成集合，同样多个集合就可以组成数据库。一个MongoDB实例可以承载多个数据库，它们之间可以视为完全独立的。</p>
<p>数据库命名可以满足以下条件的任意utf-8字符串：<br>1 不能使空字符串。<br>2 不得含有””(空格)、.、$、/、\和\0(空字符)。<br>3 应全部小写。<br>4 最多64字节。</p>
<p>数据库名最终会变成文件系统里的文件。</p>
<p>有一些数据库名是保留的： admin/local/config</p>
<p>把数据库的名字放到集合名前面，得到的就是集合的完全限定名，成为命名空间。例：CMS数据中使用blog.posts集合，集合的命名空间就是cms.bolg.posts。命名空间的长度不得超过<strong>121</strong>字节，在实际使用中应该小于100字节。</p>
<h1 id="MongoDB-shell中的基本操作（创建、读取、更新、删除–CRUD）"><a href="#MongoDB-shell中的基本操作（创建、读取、更新、删除–CRUD）" class="headerlink" title="MongoDB shell中的基本操作（创建、读取、更新、删除–CRUD）"></a>MongoDB shell中的基本操作（创建、读取、更新、删除–CRUD）</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p>insert函数添加一个文档到集合里面。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.blog.insert(&#123;&#x27;title&#x27;:&#x27;my-blog&#x27;,&#x27;date&#x27;: new Date(), &#x27;content&#x27;:&#x27;content&#x27;&#125;)</span><br></pre></td></tr></table></figure>
<p>通过db.blog.find()查看我们添加的数据，会发现有一个额外添加的键_id。</p>
<h2 id="读取"><a href="#读取" class="headerlink" title="读取"></a>读取</h2><p>find会返回集合里面所有的文档。若只想查看一个文档，可以用findOne。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.blog.find()</span><br><span class="line"></span><br><span class="line">db.blog.findOne()</span><br></pre></td></tr></table></figure>
<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><p>update接受至少两个参数，第一个是要跟新文档的限定条件，第二个是新的文档。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post.comments=[]</span><br><span class="line"></span><br><span class="line">db.blog.updata(&#123;&#x27;title&#x27;:&#x27;my-blog&#x27;&#125;, post)</span><br></pre></td></tr></table></figure>

<h2 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h2><p>remove用来从数据中永久删除文档。在不使用参数的情况下，会删除一个集合内所有的文档，也可以接受一个文档以指定限定条件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.blog.remove(&#123;&#x27;title&#x27;:&#x27;my-blog&#x27;&#125;)</span><br></pre></td></tr></table></figure>

<p><strong>tips:</strong><br>1 使用help可以查看相关的帮助。db.help()/db.mycoll.help()查看数据库、集合相关的命令帮助。<br>2 使用db.集合名的方式来访问集合一般不会有问题，但如果集合名恰好是数据库类的一个属性就有问题了。如果想访问version集合：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt; db.version</span><br><span class="line">function () &#123;</span><br><span class="line">        return this.serverBuildInfo().version;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>当有属性名和集合同同名时，使用getCollection函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;version&#x27;)</span><br></pre></td></tr></table></figure>

<h1 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h1><h2 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h2><p>MongoDB的文档类似于JSON。但JSON的表现力也有限制：只有null、布尔、数字、字符串、数组和对象几种类型。<br>MongoDB在保留JSON基本的键值对特性的基础上，添加了一些数据类型支持。</p>
<ul>
<li>null: 用于表示空值或者不存在的字段</li>
<li>布尔: true/false</li>
<li>32位整数(shell中不可用)</li>
<li>64位整数(shell中不可用)</li>
<li>64位浮点数</li>
<li>字符串</li>
<li>符号(shell中不可用)</li>
<li>对象id: 文档的12字节的唯一ID</li>
<li>日期: 日期类型存储的是标准纪元开始的毫秒数，不存储时区<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;x&quot;: new Date()&#125;</span><br></pre></td></tr></table></figure></li>
<li>正则表达式<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;x&quot;: /hello/g &#125;</span><br></pre></td></tr></table></figure></li>
<li>代码<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;x&quot;: function()&#123; /*....*/&#125;&#125;</span><br></pre></td></tr></table></figure></li>
<li>二进制数据(shell中不可用)</li>
<li>最大值(shell中不可用)</li>
<li>最小值 (shell中不可用)</li>
<li>未定义</li>
<li>数组</li>
<li>内嵌文档</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB学习笔记-查询</title>
    <url>/2016/09/13/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9F%A5%E8%AF%A2/</url>
    <content><![CDATA[<h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p>MongoDB文档查询命令： find</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.find()</span><br></pre></td></tr></table></figure>
<p>上面的操作命令将会返回集合的全部内容。<span id="more"></span></p>
<h1 id="指定返回的键"><a href="#指定返回的键" class="headerlink" title="指定返回的键"></a>指定返回的键</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.find(&#123;key: value&#125;)</span><br><span class="line"></span><br><span class="line">//第二个参数用来指定返回结果中剔除某个键值对。</span><br><span class="line">db.collection.find(&#123;key: value&#125;,&#123;key1: 0&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="条件查询"><a href="#条件查询" class="headerlink" title="条件查询"></a>条件查询</h1><h2 id="查询条件"><a href="#查询条件" class="headerlink" title="查询条件"></a>查询条件</h2><table>
<thead>
<tr>
<th>操作</th>
<th align="center">格式</th>
<th align="center">范例</th>
</tr>
</thead>
<tbody><tr>
<td>等于</td>
<td align="center">{key: value}</td>
<td align="center">db.news.find({‘id’: 4})</td>
</tr>
<tr>
<td>小于</td>
<td align="center">{key: {$lt:value}}</td>
<td align="center">db.news.find({‘id’: {$lt: 4}})</td>
</tr>
<tr>
<td>小于或等于</td>
<td align="center">{key: {$lte:value}}</td>
<td align="center">db.news.find({‘id’: {$lte: 4}})</td>
</tr>
<tr>
<td>大于</td>
<td align="center">{key: {$gt:value}}</td>
<td align="center">db.news.find({‘id’: {$gt: 4}})</td>
</tr>
<tr>
<td>大于或等于</td>
<td align="center">{key: {$gte:value}}</td>
<td align="center">db.news.find({‘id’: {$gte: 4}})</td>
</tr>
<tr>
<td>不等于</td>
<td align="center">{key: {$ne:value}}</td>
<td align="center">db.news.find({‘id’: {$ne: 4}})</td>
</tr>
</tbody></table>
<h2 id="OR查询"><a href="#OR查询" class="headerlink" title="OR查询"></a>OR查询</h2><p>MongoDB中两中方式进行OR查询：$in 用来查询一个键的多个值。 $or用来完成多个键值的任意给定值。</p>
<p>$in</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;&#x27;id&#x27;: &#123;$in:[1,2,4]&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>与$in相对的是$nin，将返回与数组中所有条件都不匹配的文档。</p>
<p>$or</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;$or:[&#123;title:&#x27;test&#x27;&#125;,&#123;id:3&#125;]&#125;)</span><br></pre></td></tr></table></figure>

<p>$not是元语句，可以用在任何其他条件之上。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;$not:&#123;$mod:[5,1]&#125;&#125;)</span><br></pre></td></tr></table></figure>
<h2 id="条件语句规则"><a href="#条件语句规则" class="headerlink" title="条件语句规则"></a>条件语句规则</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;id:&#123;$lt:5,$gte:3&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p><strong>一个修改器可以有多个条件，但是一个键不能对应多个更新修改器。</strong></p>
<h1 id="特定类型的查询"><a href="#特定类型的查询" class="headerlink" title="特定类型的查询"></a>特定类型的查询</h1><h2 id="null"><a href="#null" class="headerlink" title="null"></a>null</h2><p>null能匹配自身，也能匹配不存在的。如果想要仅仅匹配键值为null的文档，纪要检查该键的值是否为null,也要通过$exists条件判定键值已存在。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;z:&#123;$in: [null], $exists: true&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;title: /test/i&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="where"><a href="#where" class="headerlink" title="$where"></a>$where</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;$where: &quot;this.x + this.y== 10&quot;&#125;)</span><br></pre></td></tr></table></figure>
<p>不是非常必要时，一定要避免使用$where查询，因为在速度上比常规查询慢很多。</p>
<h1 id="游标"><a href="#游标" class="headerlink" title="游标"></a>游标</h1><p>数据库使用游标来返回find的执行结果。客户端对游标的实现，通常能够对最终结果进行控制。可以限制结果的数量，略过部分结果，根据任意方向任意键的组合对结果进行各种排序。</p>
<h2 id="limit、skip和sort"><a href="#limit、skip和sort" class="headerlink" title="limit、skip和sort"></a>limit、skip和sort</h2><p>要限制查询结果数量，在find后使用limit函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;id: 4&#125;).limit(2)</span><br></pre></td></tr></table></figure>

<p>skip与limit类似，用来忽略前n个文档，返回剩余的文档。（用来分页是不错的）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find(&#123;id: 4&#125;).skip(1)</span><br></pre></td></tr></table></figure>

<p>sort用一个对象作为参数： 一组键/值对，键对应文档的键名，值代表排序方向。排序方向可以是1（升序）或者-1（降序）。如果指定了多个键，则按照多个键的顺序逐个排序。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.news.find().sort(&#123;id: 1, date: -1&#125;)</span><br></pre></td></tr></table></figure>

<p>使用limit、skip和sort组合使用，对于分页非常有用。但是略过过多，会导致性能问题。</p>
<p>MongoDB处理不同类型的数据是有一个顺序的，有时候一个键的值可能是多种类型的。如果对这种混合类型的键进行排序，其排序顺序是预先定义好的。从小到大，顺序如下：</p>
<ul>
<li>最小值</li>
<li>null</li>
<li>数字（整型、长整型、双精度）</li>
<li>字符串</li>
<li>对象/文档</li>
<li>数组</li>
<li>二进制数据</li>
<li>对象ID</li>
<li>布尔型</li>
<li>日期型</li>
<li>时间戳</li>
<li>正则表达式</li>
<li>最大值</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MongoDB学习笔记-创建、更新及删除文档</title>
    <url>/2016/09/13/MongoDB%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%88%9B%E5%BB%BA%E3%80%81%E6%9B%B4%E6%96%B0%E5%8F%8A%E5%88%A0%E9%99%A4%E6%96%87%E6%A1%A3/</url>
    <content><![CDATA[<h1 id="插入并保存文档"><a href="#插入并保存文档" class="headerlink" title="插入并保存文档"></a>插入并保存文档</h1><p>插入是向MongoDB中添加数据的基本方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;db.foo.insert(&#123;&#x27;bar&#x27;:&#x27;baz&#x27;&#125;)</span><br></pre></td></tr></table></figure>

<p>该操作会给文档增加一个”_id”键(如果原来没有)，然后将其保存到MongoDB中。</p>
<p>当执行插入的时候，使用的驱动程序会将数据转换成BSON的形式，然后将其送入数据库。数据库解析BSON，检验是否包含’_id’键，并且文档不超过4MB。<span id="more"></span></p>
<h1 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&gt;db.users.remove()</span><br></pre></td></tr></table></figure>

<p>上述命令会删除users集合中所有的文档。但不会删除集合本身，原有的索引也会保留。</p>
<p>remove函数可以接受一个查询文档作为可选参数。给定这个参数后，只有符合条件的文档才会被删除。删除数据是永久性的，不能撤销，也不能恢复。</p>
<h2 id="删除速度"><a href="#删除速度" class="headerlink" title="删除速度"></a>删除速度</h2><p>删除文档会很快，但是要清除整个集合，直接删除集合(然后重建索引)会更快。</p>
<h1 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h1><p>文档存入数据库以后，使用update方法修改。update有两个参数，一个是查询文档，用来找出需要更新的文档。另一个是修改器文档，描述对文档的哪些做更改。<br>更新操作是原子的，若是两个更新同时发生，先到达服务器的先执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.collection.update(</span><br><span class="line">   &lt;query&gt;,</span><br><span class="line">   &lt;update&gt;,</span><br><span class="line">   &#123;</span><br><span class="line">     upsert: &lt;boolean&gt;,</span><br><span class="line">     multi: &lt;boolean&gt;,</span><br><span class="line">     writeConcern: &lt;document&gt;</span><br><span class="line">   &#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>其中：</p>
<ul>
<li>query : update的查询条件，类似sql update查询内where后面的。</li>
<li>update : update的对象和一些更新的操作符（如$,$inc…）等，也可以理解为sql update查询内set后面的</li>
<li>upsert : 可选，这个参数的意思是，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</li>
<li>multi : 可选，mongodb 默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</li>
<li>writeConcern :可选，抛出异常的级别。</li>
</ul>
<h2 id="set"><a href="#set" class="headerlink" title="$set"></a>$set</h2><p>$set 用来指定一个键的值，如果该键不存在就创建。$unset可以将键完全删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;news&#x27;).insert(&#123;title:&#x27;MongoDB学习&#x27;,&#x27;id&#x27;: NumberInt(3), author: &#x27;2008&#x27;&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;news&#x27;).update(&#123;id: 3&#125;,&#123;$set:&#123;author: &#x27;cqu2008&#x27;, type: &#x27;datebase&#x27;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p>$set可以修改键的数据类型。<br><strong>一定要使用以$开头的修改器来修改键值对。</strong></p>
<h2 id="inc"><a href="#inc" class="headerlink" title="$inc"></a>$inc</h2><p>$inc修改器用来增加已有键的值，或者在键不存在时创建一个键。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">db.getCollection(&#x27;news&#x27;).update(&#123;id: 3&#125;,&#123;$inc:&#123;score: 50&#125;&#125;)</span><br><span class="line"></span><br><span class="line">db.getCollection(&#x27;news&#x27;).update(&#123;id:3&#125;,&#123;$inc:&#123;score: 100&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="upsert"><a href="#upsert" class="headerlink" title="upsert"></a>upsert</h2><p>设置update的第三个参数，如果不存在update的记录，是否插入objNew,true为插入，默认是false，不插入。</p>
<h2 id="更新多个文档"><a href="#更新多个文档" class="headerlink" title="更新多个文档"></a>更新多个文档</h2><p>设置update的第四个参数，默认是false,只更新找到的第一条记录，如果这个参数为true,就把按条件查出来多条记录全部更新。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>Mongoose基础操作入门</title>
    <url>/2018/02/05/Mongoose%E5%9F%BA%E7%A1%80%E6%93%8D%E4%BD%9C%E5%85%A5%E9%97%A8/</url>
    <content><![CDATA[<img src='http://7xprrp.com1.z0.glb.clouddn.com/mongodb/mongodb.jpg' alt=''/>

<h3 id="Mongoose"><a href="#Mongoose" class="headerlink" title="Mongoose"></a>Mongoose</h3><blockquote>
<p>Mongoose 是在 node 环境下对 MongoDB 进行便捷操作的对象模型工具。</p>
</blockquote>
<span id="more"></span>

<h4 id="创建数据库连接"><a href="#创建数据库连接" class="headerlink" title="创建数据库连接"></a>创建数据库连接</h4><p>利用 Mongoose 的 connect 创建数据库连接。</p>
<blockquote>
<p>mongoose.connect(url, options)</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/blog&#x27;</span>);</span><br></pre></td></tr></table></figure>
<p>你可以监听连接数据库的各种事件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> mongoose = <span class="built_in">require</span>(<span class="string">&#x27;mongoose&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> <span class="variable constant_">DB_URL</span> = <span class="string">&#x27;mongodb://localhost:27017/blog&#x27;</span>;</span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="variable constant_">DB_URL</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接成功</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;connected&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection open to &#x27;</span> + <span class="variable constant_">DB_URL</span>);  </span><br><span class="line">&#125;);    </span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接异常</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>,<span class="keyword">function</span> (<span class="params">err</span>) &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection error: &#x27;</span> + err);  </span><br><span class="line">&#125;);    </span><br><span class="line"> </span><br><span class="line"><span class="comment">// 连接断开</span></span><br><span class="line">mongoose.<span class="property">connection</span>.<span class="title function_">on</span>(<span class="string">&#x27;disconnected&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;    </span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection disconnected&#x27;</span>);  </span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 除了上面这种方式监听，还可以通过回调函数方式</span></span><br><span class="line"></span><br><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://localhost:27017/blog&#x27;</span>, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection error: &#x27;</span> + err);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Mongoose connection is successful&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>指定用户连接：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;mongodb://username:password@127.0.0.1:27017/database&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>连接多个数据库：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_">connect</span>(<span class="string">&#x27;urlA, urlB, ...&#x27;</span>, &#123;</span><br><span class="line">    <span class="attr">mongos</span>: <span class="literal">true</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h4 id="关闭数据库连接"><a href="#关闭数据库连接" class="headerlink" title="关闭数据库连接"></a>关闭数据库连接</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">mongoose.<span class="title function_">disconnect</span>()</span><br></pre></td></tr></table></figure>

<h3 id="Schema"><a href="#Schema" class="headerlink" title="Schema"></a>Schema</h3><blockquote>
<p>Schema 是一种以文件形式存储的数据库模型骨架。Schema 主要用于定义 MongoDB 中集合 Collection 里文档 Document 的结构（不仅能够定义文档的结构和属性，和可以定义文档的实例方法、静态模型方法、复合索引等），每个 Schema 会映射到 MongoDB 中的一个 Collection，它不具备数据库的操作能力。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">Schema</span> = mongoose.<span class="property">Schema</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserSchema</span> = <span class="keyword">new</span> <span class="title class_">Schema</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="title class_">String</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="title class_">Number</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="title class_">String</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>Schema 中字段的类型，可取值为：</p>
<ul>
<li>String 字符串</li>
<li>Number 数字</li>
<li>Date 日期</li>
<li>Buffer 二进制</li>
<li>Boolean 布尔值</li>
<li>Mixed 混合类型</li>
<li>ObjectId 对象ID</li>
<li>Array 数组</li>
</ul>
<h3 id="Model"><a href="#Model" class="headerlink" title="Model"></a>Model</h3><blockquote>
<p>Model 是由 Schema 生成的的模型，可以对数据库进行操作。Model 的每一个实例，就是一个 Document ，Document 可以保存到数据库和对数据库进行操作。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;users&#x27;</span>, <span class="title class_">UserSchema</span>);</span><br></pre></td></tr></table></figure>
<h4 id="实例化文档及保存"><a href="#实例化文档及保存" class="headerlink" title="实例化文档及保存"></a>实例化文档及保存</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userDoc = <span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userDoc.<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 错误处理代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doc);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="常用数据库操作"><a href="#常用数据库操作" class="headerlink" title="常用数据库操作"></a>常用数据库操作</h3><p>对于数据库操作而言，平时最为平常莫非 CRUD 了。</p>
<h4 id="文档新增"><a href="#文档新增" class="headerlink" title="文档新增"></a>文档新增</h4><ul>
<li>save()</li>
<li>使用模型的create()</li>
<li>使用模型的insertMany()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// save是document的方法</span></span><br><span class="line"><span class="keyword">var</span> userDoc = <span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">userDoc.<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 错误处理代码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doc);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// create方法是直接在 Model 上进行操作的，并且可以同时新增多个文档。create(&#123;&#125;,&#123;&#125;, function(err, doc1, doc2)&#123;&#125;)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">create</span>(&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;, <span class="keyword">function</span>(<span class="params">err, doc1, doc2</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doc1);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(doc2);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertMany([], function(err,docs)&#123;&#125;)</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">insertMany</span>([&#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;node&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">8</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;, &#123;</span><br><span class="line">    <span class="attr">username</span>: <span class="string">&#x27;vue&#x27;</span>,</span><br><span class="line">    <span class="attr">userpwd</span>: <span class="string">&#x27;123456&#x27;</span>,</span><br><span class="line">    <span class="attr">age</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">sex</span>: <span class="string">&#x27;male&#x27;</span></span><br><span class="line">&#125;], <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="comment">// 异常处理</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(docs);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文档查询"><a href="#文档查询" class="headerlink" title="文档查询"></a>文档查询</h4><p>Mongoose 提供了三种方法来查询文档：</p>
<ul>
<li>find()</li>
<li>findeById()</li>
<li>findOne()</li>
</ul>
<h5 id="find"><a href="#find" class="headerlink" title="find"></a>find</h5><blockquote>
<p>Model.find(condtions, [fields], [options], [callback])</p>
</blockquote>
<ul>
<li>conditions <Object> 查询条件</li>
<li>[fields] <Object> 查询字段</li>
<li>[options] <Object> 查询配置参数</li>
<li>[callback] <Function> 回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 查询所有数据</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="comment">// 异常处理，下同</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(docs);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找年龄大于等于18的所有数据</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gte</span>: <span class="number">18</span>&#125;&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(docs);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找年龄大于等于18，且名字中包含 node 的数据</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gte</span>: <span class="number">18</span>&#125;, <span class="attr">name</span>: <span class="regexp">/node/</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查找名字包含 node， 且只输出 name 字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>: <span class="regexp">/node/</span>&#125;, <span class="string">&#x27;name&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查找所有数据，并只输出包含 name , sex 字段的数据</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(<span class="literal">null</span>, &#123;<span class="attr">name</span>: <span class="number">1</span>, <span class="attr">sex</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 查找跳过前两条的所有数据，如果要使用第三个条件，前两个参数无值，需设置为null</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(<span class="literal">null</span>, <span class="literal">null</span>, &#123;<span class="attr">skip</span>: <span class="number">2</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="findById"><a href="#findById" class="headerlink" title="findById"></a>findById</h5><blockquote>
<p>Model.findById(id, [fields], [options], [callback])</p>
</blockquote>
<ul>
<li>id</li>
<li>[fields] <Object> 查询字段</li>
<li>[options] <Object> 查询配置参数</li>
<li>[callback] <Function> 回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 显示第O个元素所有字段</span></span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    docs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(item.<span class="property">_id</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">UserModel</span>.<span class="title function_">findById</span>(result[<span class="number">0</span>], <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 上面写法也可以换做下面这种写法</span></span><br><span class="line"><span class="keyword">var</span> result = [];</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    docs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(item.<span class="property">_id</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="title class_">UserModel</span>.<span class="title function_">findById</span>(result[<span class="number">0</span>]).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">        ....</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 只输出 name字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findById</span>(result[<span class="number">0</span>]，&#123;<span class="attr">name</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 输出最少字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findById</span>(result[<span class="number">0</span>]，&#123;<span class="attr">lean</span>: <span class="literal">true</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="findOne"><a href="#findOne" class="headerlink" title="findOne"></a>findOne</h5><p>该方法找出符合条件的所有实例的第一个。</p>
<blockquote>
<p>Model.findOne(condtions, [fields], [options], [callback])</p>
</blockquote>
<ul>
<li>conditions <Object> 查询条件</li>
<li>[fields] <Object> 查询字段</li>
<li>[options] <Object> 查询配置参数</li>
<li>[callback] <Function> 回调函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 找出 age 大于20的文档中的第一个</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>&#125;&#125;, <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>&#125;&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err ,doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出 age 大于20的文档中的第一个，且只输出name 字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>&#125;&#125;, &#123;<span class="attr">name</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;, <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>&#125;&#125;, &#123;<span class="attr">name</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 找出 age 大于20的文档中第一个，且输出包含 name 字段在内的最短字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">$gt</span>: <span class="number">20</span>&#125;&#125;, <span class="string">&quot;name&quot;</span>, &#123;<span class="attr">lean</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">age</span>: &#123;$gt; <span class="number">20</span>&#125;&#125;, <span class="string">&quot;name&quot;</span>, &#123;<span class="attr">lean</span>: <span class="literal">true</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="where"><a href="#where" class="headerlink" title="$where"></a>$where</h5><p>如需更复杂的查询，可以使用$where 操作符。$where 操作符可以使用javascript表达式字符串或者javascript函数。</p>
<ul>
<li>使用字符串<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;<span class="attr">$where</span>: <span class="string">&#x27;this.x === this.y&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;<span class="attr">$where</span>: <span class="string">&#x27;obj.x === obj.y&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>使用函数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;<span class="attr">$where</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">         <span class="keyword">return</span> obj.<span class="property">x</span> !== obj.<span class="property">y</span>;</span><br><span class="line">    &#125;&#125;, <span class="keyword">function</span>(<span class="params">err, docs&#125; &#123;</span></span><br><span class="line"><span class="params">        ...</span></span><br><span class="line"><span class="params">&#125;</span>);</span><br><span class="line"><span class="title class_">Model</span>.<span class="title function_">find</span>(&#123;<span class="attr">$where</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">x</span> !== <span class="variable language_">this</span>.<span class="property">y</span>;</span><br><span class="line">    &#125;&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="文档更新"><a href="#文档更新" class="headerlink" title="文档更新"></a>文档更新</h4><ul>
<li>update</li>
<li>updateMany</li>
<li>find() + save()</li>
<li>updateOne()</li>
<li>finedOne() + save()</li>
<li>findByIdUpdate()</li>
<li>findOneAndUpdate()</li>
</ul>
<h5 id="update"><a href="#update" class="headerlink" title="update"></a>update</h5><blockquote>
<p>Model.update(condtions, update, [options], [callback])</p>
</blockquote>
<p>options选项如下：</p>
<blockquote>
<ul>
<li>safe(boolean) 默认为 true, 安全模式</li>
</ul>
</blockquote>
<ul>
<li>upsert(boolean) 默认为false，如果文档不存在，是否创建</li>
<li>multi(boolean) 默认为false，是否更新多个查询记录</li>
<li>runValidators 如果为true，执行 Validation 验证</li>
<li>setDefaultsOnInsert 如果upsert选项为true, 在新建时插入文档定义的默认值</li>
<li>strict(boolean) 以strict模式进行更新</li>
<li>overwrite(boolean) 默认为false， 禁用update-only模式，允许覆盖文档。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 只会更改查询到的第一组数据的性别</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">update</span>(&#123;<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;female&quot;</span>&#125;, &#123;<span class="string">&quot;sex&quot;</span>: <span class="string">&quot;male&quot;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新多个记录</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">update</span>(&#123;<span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;, &#123;<span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;male&#x27;</span>&#125;, &#123;<span class="attr">multi</span>: <span class="literal">true</span>&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="updateMany"><a href="#updateMany" class="headerlink" title="updateMany"></a>updateMany</h5><p>updateMany 与 update 方法唯一区别是默认更新多个文档，即使设置 {multi: ‘false’} 也无法只更新第一个文档。</p>
<blockquote>
<p>Model.updateMany(conditions, update, [options], [callback])</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 将数据库中 name 字段包含 xiao 的文档， sex 变为 female</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateMany</span>(&#123;<span class="attr">name</span>: <span class="regexp">/xiao/</span>&#125;, &#123;<span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="find-save"><a href="#find-save" class="headerlink" title="find() + save()"></a>find() + save()</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>(&#123;<span class="attr">name</span>: <span class="regexp">/xiao/</span>&#125;, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">    &#125;</span><br><span class="line">    docs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">        item.<span class="property">sex</span> = <span class="string">&#x27;male&#x27;</span>;</span><br><span class="line">        item.<span class="title function_">save</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="updateOne"><a href="#updateOne" class="headerlink" title="updateOne"></a>updateOne</h5><p>updateOne 只能更新找到的第一个文档，即使设置 {multi: true} 也无法更新多个文档。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">updateOne</span>(&#123;<span class="attr">name</span>: <span class="regexp">/xiao/</span>&#125;, &#123;<span class="string">&#x27;sex&#x27;</span>: <span class="string">&#x27;female&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err, res</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h5 id="findOne-save"><a href="#findOne-save" class="headerlink" title="findOne() + save()"></a>findOne() + save()</h5><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOne</span>(&#123;<span class="attr">name</span>: <span class="regexp">/xiao/</span>&#125;, <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">    doc.<span class="title function_">save</span>();</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="findOneAndUpdate"><a href="#findOneAndUpdate" class="headerlink" title="findOneAndUpdate"></a>findOneAndUpdate</h5><p>注意回调函数的参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOneAndUpdate</span>(&#123;<span class="attr">name</span>: <span class="regexp">/xiao/</span>&#125;, <span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="findByIdAndUpdate"><a href="#findByIdAndUpdate" class="headerlink" title="findByIdAndUpdate"></a>findByIdAndUpdate</h5><p>注意回调函数的参数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">UserModel.findByIdAndUpdate(&#x27;5a73194a2fd8c96fc87657aa&#x27;, function(err, doc)&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h4><ul>
<li>remove()</li>
<li>findOneAndRemove()</li>
<li>findByIdAndRemove()</li>
</ul>
<h5 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h5><p>remove 有两种形式，一种是 Model 的 remove 方法，一种是 Document 的 remove 方法。<br>remove 方法的回调函数不能省略，否则会无法删除数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">remove</span>(&#123;<span class="attr">name</span>:<span class="regexp">/xiao/</span>&#125;, <span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="variable language_">document</span>.<span class="title function_">remove</span>(<span class="keyword">function</span>(<span class="params">err</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="findOneAndRemove"><a href="#findOneAndRemove" class="headerlink" title="findOneAndRemove"></a>findOneAndRemove</h5><blockquote>
<p>Model.findOneAndRemove(conditions, [options], [callback])</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">findOneAndRemove</span>(&#123;<span class="attr">sex</span>: <span class="string">&#x27;female&#x27;</span>&#125;, <span class="keyword">function</span>(<span class="params">err ,doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h5 id="findByIdAndRemove"><a href="#findByIdAndRemove" class="headerlink" title="findByIdAndRemove"></a>findByIdAndRemove</h5><blockquote>
<p>Model.findByIdAndRemove(id, [options], [callback])</p>
</blockquote>
<h3 id="关于自定义方法"><a href="#关于自定义方法" class="headerlink" title="关于自定义方法"></a>关于自定义方法</h3><p>Model 实例是 Document，实例内置的方法有很多，比如 save。</p>
<p>通过 Schema 对象的 methods 属性给实例自定义扩展方法</p>
<p>通过 Schema 对象的 statics 属性给 Model 添加静态方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">num</span>: <span class="title class_">Number</span>, <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">age</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line">schema.<span class="property">methods</span>.<span class="property">findSimilarAges</span> = <span class="keyword">function</span>(<span class="params">cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">model</span>(<span class="string">&#x27;MyModel&#x27;</span>).<span class="title function_">find</span>(&#123;<span class="attr">age</span>: <span class="variable language_">this</span>.<span class="property">age</span>&#125;, cb);</span><br><span class="line">&#125;</span><br><span class="line">schema.<span class="property">statics</span>.<span class="property">findByName</span> = <span class="keyword">function</span>(<span class="params">name, cb</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">find</span>(&#123;<span class="attr">age</span>: <span class="keyword">new</span> <span class="title class_">RegExp</span>(name, <span class="string">&#x27;i&#x27;</span>)&#125;, cb);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">MyModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;MyModel&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">var</span> doc1 = <span class="keyword">new</span> <span class="title class_">MyModel</span>(&#123;<span class="attr">num</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">&#x27;node&#x27;</span>, <span class="attr">age</span>: <span class="number">8</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> doc2 = <span class="keyword">new</span> <span class="title class_">MyModel</span>(&#123;<span class="attr">num</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">&#x27;vue&#x27;</span>, <span class="attr">age</span>: <span class="number">8</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> doc3 = <span class="keyword">new</span> <span class="title class_">MyModel</span>(&#123;<span class="attr">num</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">&#x27;react&#x27;</span>, <span class="attr">age</span>: <span class="number">8</span>&#125;);</span><br><span class="line">doc1.<span class="title function_">save</span>();</span><br><span class="line">doc2.<span class="title function_">save</span>();</span><br><span class="line">doc3.<span class="title function_">save</span>();</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    doc1.<span class="title function_">findSimilarAges</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">        docs.<span class="title function_">forEach</span>(<span class="keyword">function</span>(<span class="params">item, index, arr</span>) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="title function_">setTiemout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title class_">MyModel</span>.<span class="title function_">findByAge</span>(<span class="string">&#x27;node&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<h3 id="前后钩子"><a href="#前后钩子" class="headerlink" title="前后钩子"></a>前后钩子</h3><p>前后钩子即 pre() 和 post() 方法，又称中间件，实在执行某些操作的时候，可以执行的函数。中间件在 Schema 上指定，类似于静态方法和实例方法。</p>
<p>可以在数据库执行下列操作时，设置前后钩子</p>
<ul>
<li>init</li>
<li>validate</li>
<li>save</li>
<li>remove</li>
<li>count</li>
<li>find</li>
<li>findOne</li>
<li>findOneAndRemove</li>
<li>fineOneAndUpdate</li>
<li>insertMany</li>
<li>update</li>
</ul>
<p>在执行上述操作之前，执行 pre 方法。<br>在执行上述操作之后，执行 post 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123; <span class="attr">age</span>: <span class="title class_">Number</span>, <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line">schema.<span class="title function_">pre</span>(<span class="string">&#x27;find&#x27;</span>, <span class="keyword">function</span>(<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;pre&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line">schema.<span class="title function_">post</span>(<span class="string">&#x27;find&#x27;</span>, <span class="keyword">function</span>(<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;post&#x27;</span>);</span><br><span class="line">    <span class="title function_">next</span>();</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> temp = <span class="keyword">new</span> mongoose.<span class="title function_">model</span>(<span class="string">&#x27;temp&#x27;</span>, schema);</span><br><span class="line"></span><br><span class="line">temp.<span class="title function_">find</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;find&#x27;</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// pre</span></span><br><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="comment">// post</span></span><br></pre></td></tr></table></figure>

<h3 id="查询后处理"><a href="#查询后处理" class="headerlink" title="查询后处理"></a>查询后处理</h3><p>常用查询后处理的方法如下：</p>
<ul>
<li>sort 排序</li>
<li>skip 跳过</li>
<li>limit 限制</li>
<li>select 显示字段</li>
<li>exect 执行</li>
<li>count 计数</li>
<li>distinct 去重</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// sort </span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(<span class="string">&#x27;age&#x27;</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(docs)</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 按 x 从小到大， age 从大到小排列</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">sort</span>(<span class="string">&#x27;x -age&#x27;</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;) </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// skip</span></span><br><span class="line"><span class="comment">// 跳过1个，显示其他</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">skip</span>(<span class="number">1</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// limit </span></span><br><span class="line"><span class="comment">// 显示10条数据</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">limit</span>(<span class="number">10</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// select </span></span><br><span class="line"><span class="comment">// 显示 nage age 字段，不显示 _id 字段</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">select</span>(<span class="string">&#x27;name age -_id&#x27;</span>).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">select</span>(&#123;<span class="attr">name</span>: <span class="number">1</span>, <span class="attr">age</span>: <span class="number">1</span>, <span class="attr">_id</span>: <span class="number">0</span>&#125;).<span class="title function_">exec</span>(<span class="keyword">function</span>(<span class="params">err, docs</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// count 显示集合中文档数量</span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">count</span>(<span class="keyword">function</span>(<span class="params">err, count</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// distinct </span></span><br><span class="line"><span class="title class_">UserModel</span>.<span class="title function_">find</span>().<span class="title function_">distinct</span>(<span class="string">&#x27;age&#x27;</span>, <span class="keyword">function</span>(<span class="params">err, distinct</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="文档验证"><a href="#文档验证" class="headerlink" title="文档验证"></a>文档验证</h3><p>为什么要进行文档验证呢，以下面例子进行说明， Schema 进行如下定义：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var schema = new mongoose.Schema(&#123; age: Number, name: String, x: Number, y: Number&#125;);</span><br></pre></td></tr></table></figure>
<p>如果不进行文档验证，保存文档时，就可以不按照 Schema 设置的字段进行设置，分下面几种情况：</p>
<ul>
<li>缺少字段的文档可以保存成功<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">age</span>: <span class="number">0</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
<li>包含未设置字段的文档可以保存成功，未设置字段不被保存<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">age</span>: <span class="number">10</span>, <span class="attr">abc</span>: <span class="string">&#x27;abc&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>包含字段类型与设置不同字段的文档也可以保存成功，不同字段类型的字段被保存为设置的字段类型<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">age</span>: <span class="literal">true</span>, <span class="attr">name</span>: <span class="number">10</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">//&#123;age: 1, name: &#x27;10&#x27;, _id: 1341234aff2f...&#125;</span></span><br><span class="line">    ....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
通过文档验证，可以避免以上几种发生。</li>
</ul>
<blockquote>
<p>{name: {type: Stirng, validator: value}}</p>
</blockquote>
<p>常用验证有以下几种： </p>
<blockquote>
<ul>
<li>required: 必填</li>
</ul>
</blockquote>
<ul>
<li>default: 默认值</li>
<li>validate: 自定义匹配</li>
<li>min: 最小值，只适用数字</li>
<li>max: 最大值，只适用数字</li>
<li>match: 正则匹配，只适用字符串</li>
<li>enum: 枚举匹配</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// required</span></span><br><span class="line"><span class="comment">// 将 age 设置为必填字段，如果没有 age 字段，文档将不被保存，且出现错误提示</span></span><br><span class="line"><span class="keyword">var</span> schemaa = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">required</span>: <span class="literal">true</span>&#125;, <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// message: &#x27;Path `age` is required.</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// default</span></span><br><span class="line"><span class="comment">// 设置 age 字段的默认值为18，如果不设置 age 字段，则会取默认值</span></span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">default</span>: <span class="number">18</span>&#125;, <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;node&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// &#123;name: &#x27;node&#x27;, age: 18, _id: ....&#125;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// min/max</span></span><br><span class="line"><span class="comment">// 将 age 的取值范围设置为[0, 10]，如果将 age 取值为20，文档将不会被保存，且出现错误提示</span></span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">age</span>: &#123;<span class="attr">type</span>: <span class="title class_">Number</span>, <span class="attr">min</span>: <span class="number">0</span>, <span class="attr">max</span>: <span class="number">10</span>&#125;, <span class="attr">name</span>: <span class="title class_">String</span>, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">age</span>: <span class="number">20</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// Path &#x27;age&#x27; (20) is more than maximum allowed value (10)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// match</span></span><br><span class="line"><span class="comment">// 将 name 的 match 设置为必须包含 a 字段，如果 name 不存在 a ，文档将不会被保存，且出现错误提示</span></span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123; <span class="attr">age</span>: <span class="title class_">Nuber</span>, <span class="attr">name</span>: &#123;<span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">match</span>: <span class="regexp">/a/</span>&#125;, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// Path &#x27;name&#x27; is invalid (bbb)</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// enum</span></span><br><span class="line"><span class="comment">// 将 name 枚举值设为[&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]， 如果 name 不在枚举范围内取值，文档将不会保存，且出现错误提示</span></span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123; <span class="attr">age</span>: <span class="title class_">Number</span>, <span class="attr">name</span>: &#123;<span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">enum</span>: [<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>]&#125;, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> - mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123; <span class="attr">name</span>: <span class="string">&#x27;bbb&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// &#x27;bbb&#x27; is not a valid enum value for path &#x27;name&#x27;</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// validate</span></span><br><span class="line"><span class="comment">// validate 实际上是一个函数，函数的参数代表当前字段，返回 true 表示通过验证，返回false表示未通过验证。利用validate可以自定义任何条件，比如，定义名字 name 长度必须在4个字符以上。</span></span><br><span class="line"><span class="keyword">var</span> validateLength = <span class="keyword">function</span>(<span class="params">arg</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arg.<span class="property">length</span> &gt; <span class="number">4</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> schema = <span class="keyword">new</span> mongoose.<span class="title class_">Schema</span>(&#123;<span class="attr">name</span>: &#123;<span class="attr">type</span>: <span class="title class_">String</span>, <span class="attr">validate</span>: validateLenth&#125;, <span class="attr">age</span>: <span class="title class_">Number</span>, <span class="attr">x</span>: <span class="title class_">Number</span>, <span class="attr">y</span>: <span class="title class_">Number</span>&#125;);</span><br><span class="line"><span class="keyword">var</span> <span class="title class_">UserModel</span> = mongoose.<span class="title function_">model</span>(<span class="string">&#x27;user&#x27;</span>, schema);</span><br><span class="line"><span class="keyword">new</span> <span class="title class_">UserModel</span>(&#123;<span class="attr">name</span>: <span class="string">&#x27;abc&#x27;</span>&#125;).<span class="title function_">save</span>(<span class="keyword">function</span>(<span class="params">err, doc</span>) &#123;</span><br><span class="line">    <span class="comment">// validator failed for path &#x27;name&#x27; width value &#x27;abc&#x27;</span></span><br><span class="line">    ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<hr>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://segmentfault.com/a/1190000012095054">一篇文章带你入门Mongoose</a></li>
<li><a href="http://mongoosejs.com/docs/guide.html">Mongoose</a></li>
<li><a href="http://www.cnblogs.com/zhongweiv/p/mongoose.html">Nodejs学习笔记（十四）— Mongoose介绍和入门</a></li>
<li><a href="http://www.cnblogs.com/xiaohuochai/p/7215067.html">Mongoose基础入门</a></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL sql_mode=only_full_group_by错误修复</title>
    <url>/2019/10/23/MySQL-sql-mode-only-full-group-by%E9%94%99%E8%AF%AF%E4%BF%AE%E5%A4%8D/</url>
    <content><![CDATA[<p>前段时间重新安装了下MySQL，升级到了8.0，发现执行Group By会报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ERROR 1055 (42000): Expression #1 of SELECT list is not in GROUP BY clause and contains nonaggregated column &#x27;database_tl.emp.id&#x27; which is not functionally dependent on columns in GROUP BY clause; this is incompatible with sql_mode=only_full_group_by</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<p>报错原因是：</p>
<blockquote>
<p>错误1055 (42000):SELECT list的表达式#1不在GROUP BY子句中，它包含非聚合列’ database_tll .emp。id’在功能上不依赖于GROUP BY子句中的列;这与sql_mode=only_full_group_by不兼容</p>
</blockquote>
<p>问题就比较显而易见了：是因为sql_mode=only_full_group_by 引起的。然后查看本地的sql_mode</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SELECT @@GLOBAL.sql_mode;</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| @@GLOBAL.sql_mode                                                                                                     |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line"></span><br><span class="line">SELECT @@SESSION.sql_mode;</span><br><span class="line"></span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| @@SESSION.sql_mode                                                                                                    |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br><span class="line">| ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION |</span><br><span class="line">+-----------------------------------------------------------------------------------------------------------------------+</span><br></pre></td></tr></table></figure>

<p>然后我们针对这个sql_mode进行修改：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SET GLOBAL sql_mode = &#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;;</span><br><span class="line"></span><br><span class="line">SET SESSION sql_mode = &#x27;STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION&#x27;;</span><br></pre></td></tr></table></figure>
<p>只是删除了 ONLY_FULL_GROUP_BY。</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js-进程</title>
    <url>/2016/09/20/Node-js-%E8%BF%9B%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>Node.js可以高效的处理I/O操作，如果处理CPU密集型的任务可能会阻塞事件循环。因此，Node.js允许创建进程，将CPU密集型任务分配给另一个进程处理，释放事件循环。在Node.js中，子进程和父进程能够进行双向通信，并且一定程度上，父进程可以监控子进程。<span id="more"></span><br>另一种使用子进程的情况是执行一个外部命令，并在执行结束后，让Node.js获得返回的结果。</p>
</blockquote>
<h2 id="执行外部命令"><a href="#执行外部命令" class="headerlink" title="执行外部命令"></a>执行外部命令</h2><p>当需要执行一个外部shell命令或者可执行文件时，可以使用child_process模块：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var child_process = require(&#x27;child_process&#x27;);</span><br><span class="line">var exec = child_precess.exec;</span><br><span class="line">exec(command, callback);</span><br></pre></td></tr></table></figure>
<p>exec的第一参数是一个字符串，表示准备执行的shell命令，第二个参数是一个回调函数，在命令结束或发生错误时调用，回调函数应有三个参数： error、stdout和stderr。例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">exec(&#x27;ls&#x27;, function(error, stdout, stderr)&#123;</span><br><span class="line">	.....</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果出现错误，第一个参数是Error的实例，如果第一个参数不包含错误，第二个参数stdout将会包含命令的输出信息，最后一个参数包含命令的错误输出信息。</p>
<h2 id="生成子进程"><a href="#生成子进程" class="headerlink" title="生成子进程"></a>生成子进程</h2><p>child_process.exec()函数虽然能启动进程，但也有一些缺点：</p>
<blockquote>
<ol>
<li>除了命令行参数和环境变量之外，exec()函数不允许与子进程通信；</li>
<li>子进程的输出是被缓存的，结果是无法对其进行流操作，可能会耗尽内存。</li>
</ol>
</blockquote>
<p>Node.js的 child_process 模块允许对子进程的启动、终止以及与其进行交互进行精细控制。可以在程序（父进程）中新建一个进程（子进程），一旦启动了新的子进程，Node.js就创建了一个双向通信通道，两个进程可以利用这条通道互相收发字符串形式的数据，父进程可以对子进程施加一些控制、向其发送信号或者强制终止子进程。</p>
<h3 id="创建子进程"><a href="#创建子进程" class="headerlink" title="创建子进程"></a>创建子进程</h3><p>基于child_process.spawn函数创建子进程：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line"></span><br><span class="line">var child = spawn(&#x27;tail&#x27;,[&#x27;-f&#x27;, &#x27;./info.txt&#x27;]);</span><br></pre></td></tr></table></figure>
<p>上面代码创建了一个子进程，通过tail命令监视文件，并且输出的数据被附加到stdout流中，spawn函数会返回一个ChildProcess对象，该对象是一个句柄，封装了实际进程的访问。</p>
<h3 id="监听子进程的输出数据"><a href="#监听子进程的输出数据" class="headerlink" title="监听子进程的输出数据"></a>监听子进程的输出数据</h3><p>任何一个子进程句柄都有一个属性stdout，它以流的形式表示子进程的标准输出信息，然后可以在这个流上绑定事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//在我的js目录下有个同级的info.txt文件，执行下面程序，会输出info.txt的内容</span><br><span class="line">var child_process = require(&#x27;child_process&#x27;);</span><br><span class="line">var child = child_process.spawn(&#x27;tail&#x27;,[&#x27;-f&#x27;, &#x27;info.txt&#x27;]);</span><br><span class="line"></span><br><span class="line">child.stdout.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">	console.log(&#x27;data from child: &#x27; + data)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>除了标准输出之外，进程还有一个默认输出流：standard error流，进程通常利用该流输出错误信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">child.stderr.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">	console.log(&#x27;tail error output:&#x27; + data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="向子进程发送数据"><a href="#向子进程发送数据" class="headerlink" title="向子进程发送数据"></a>向子进程发送数据</h3><p>除了从子进程的输出流中获取数据之外，父进程也向子进程的标准输入流中写入数据，相当于向子进程发送数据，标准输入流是用ChildProcess.stdin属性来表示的。</p>
<p>子进程也可以使用process.stdin流来监听数据。但是，首先要恢复流，因为在默认情况下，它处于暂停状态。<br>写一个plus.js文件如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.stdin.resume();</span><br><span class="line">process.stdin.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">	var number;</span><br><span class="line">	try&#123;</span><br><span class="line">		number = parseInt(data.toString(), 10);</span><br><span class="line">		number += 1;</span><br><span class="line">		process.stdout.write(number + &#x27;\n&#x27;);</span><br><span class="line">	&#125;catch(err)&#123;</span><br><span class="line">		process.stderr.write(err.message + &#x27;\n&#x27;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>直接调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node plus.js </span><br></pre></td></tr></table></figure>
<p>运行后，程序等待输入，如果输入一个整数按回车键，屏幕上就会显示一个加1后的返回的整数。Ctrl+c 退出应用程序。</p>
<p>创建一Node进程来使用plus.js提供计算服务。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line"></span><br><span class="line">//使用node进程创建一个子进程执行plus_one使用程序</span><br><span class="line">var child =spawn(&#x27;node&#x27;,[&#x27;plus_one.js&#x27;]);</span><br><span class="line"></span><br><span class="line">setInterval(function()&#123;</span><br><span class="line">	//产生一个小于10的随机数</span><br><span class="line">	var number = Math.floor(Math.random()*10);</span><br><span class="line">	//将随机数发送给子进程</span><br><span class="line">	child.stdin.write(number + &#x27;\n&#x27;);</span><br><span class="line">	//获得子进程的相应并打印出来</span><br><span class="line">	child.stdout.once(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">		console.log(&#x27;child replied to &#x27; + number + &#x27; width: &#x27; + data);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;, 1000);</span><br><span class="line"></span><br><span class="line">child.stderr.on(&#x27;data&#x27;,function(data)&#123;</span><br><span class="line">	process.stdout.write(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="当子进程退出时获得通知"><a href="#当子进程退出时获得通知" class="headerlink" title="当子进程退出时获得通知"></a>当子进程退出时获得通知</h3><p>当子进程退出时，会在父进程上触发一个事件。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line"></span><br><span class="line">var child = spawn(&#x27;ls&#x27;, [&#x27;-la&#x27;]);</span><br><span class="line">child.stdout.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">	console.log(&#x27;data form child: &#x27; + data);</span><br><span class="line">&#125;);</span><br><span class="line">//当子进程退出时：</span><br><span class="line">child.on(&#x27;exit&#x27;, function(code)&#123;</span><br><span class="line">	console.log(&#x27;child process terminated with code &#x27; + code);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>监听子进程exit事件，当该事件出现，就将子进程终止的相关信息打印至控制台。子进程的退出码会被传递给回调函数，作为其第一个参数。一些程序以非0的退出码表示发生错误。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line"></span><br><span class="line">var child = spawn(&#x27;sleep&#x27;, [&#x27;10&#x27;]);</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">	child.kill();</span><br><span class="line">&#125;, 1000)</span><br><span class="line">//当子进程退出时：</span><br><span class="line">child.on(&#x27;exit&#x27;, function(code, signal)&#123;</span><br><span class="line">	if(code)&#123;</span><br><span class="line">		console.log(&#x27;child process terminated with code &#x27; + code);</span><br><span class="line">	&#125;else if(signal)&#123;</span><br><span class="line">		console.log(&#x27;child process terminated with signal &#x27; + signal);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">//输出：child process terminated with signal SIGTERM</span><br></pre></td></tr></table></figure>

<h2 id="向进程发送信号并终止进程"><a href="#向进程发送信号并终止进程" class="headerlink" title="向进程发送信号并终止进程"></a>向进程发送信号并终止进程</h2><p>一般而言，可用使用child.kill方法向子进程发送一个信号，默认发送的是SIGTERM信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var spawn = require(&#x27;child_process&#x27;).spawn;</span><br><span class="line"></span><br><span class="line">var child = spawn(&#x27;sleep&#x27;, [&#x27;10&#x27;]);</span><br><span class="line">setTimeout(function()&#123;</span><br><span class="line">	child.kill();</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure>
<p>还可以将一个标识信号类型的字符串传递给child.kill方法，作为其唯一参数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">child.kill(&#x27;SIGUSR2&#x27;);</span><br></pre></td></tr></table></figure>
<p>注意，尽管方法名是kill，但是发送的信号却不一定终止进程。在Node中，子进程可以定义一个信号处理程序来重写信号。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">process.on(&#x27;SIGUSR2&#x27;, function()&#123;</span><br><span class="line">	console.log(&#x27;Got a SIGUSR2 signal&#x27;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>上述代码，为SIGUSR2定义了一个信号处理程序，进程在收到该信号后不会被终止，而是输出了’Got a SIGUSR2 signal’ 。</p>
<p>SIGKILL和SIGSTOP是由操作系统处理的特殊信号，并且进程不能重写其默认行为，即使已经定义了处理程序，它们也会终止进程。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js开发指南学习笔记</title>
    <url>/2016/09/07/Node-js%E5%BC%80%E5%8F%91%E6%8C%87%E5%8D%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<img src='http://7xprrp.com1.z0.glb.clouddn.com/node/node.jpg' alt=''/>
# Node.js核心模块
<span id="more"></span>

<h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>global</p>
<h3 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h3><p>process</p>
<p>console</p>
<h3 id="常用工具util"><a href="#常用工具util" class="headerlink" title="常用工具util"></a>常用工具util</h3><h3 id="util-inherits"><a href="#util-inherits" class="headerlink" title="util.inherits"></a>util.inherits</h3><p>函数只会继承原型中定义的方法，不会继承构造函数中的方法和属性。</p>
<p>util.inherits(constructor, superConstructor);</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var util = require(&#x27;util&#x27;);</span><br><span class="line"></span><br><span class="line">function Base()&#123;</span><br><span class="line">	this.name = &#x27;Base&#x27;;</span><br><span class="line">	this.base = 1991;</span><br><span class="line">	this.sayHello = function()&#123;</span><br><span class="line">		console.log(&#x27;Hello&#x27; + this.name);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">Base.prototype.showName = funciton()&#123;</span><br><span class="line">	consoel.log(this.name);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function Sub()&#123;</span><br><span class="line">	this.name = &#x27;sub&#x27;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">util.inherts(Sub, Base);</span><br><span class="line"></span><br><span class="line">var objBase = new Base();</span><br><span class="line">objBase.showName();</span><br><span class="line">objBase.sayHello();</span><br><span class="line">console.log(objBase);</span><br><span class="line"></span><br><span class="line">var objSub = new Sub();</span><br><span class="line">objSub.showName();</span><br><span class="line">console.log(objSub);</span><br></pre></td></tr></table></figure>
<p>Sub仅继承了Base在原型中定义的函数，而构造函数内部的base属性和sayHello函数没有被Sub继承。</p>
<h3 id="util-inspect"><a href="#util-inspect" class="headerlink" title="util.inspect"></a>util.inspect</h3><p>将任意对象转换为字符串的方法，至少接受一个参数。<br>util.inspect(object, [showHidden], [depth], [colors])</p>
<ul>
<li>object，要转换的对象。</li>
<li>showHidden: 若为true，将输出更多隐藏信息。</li>
<li>depth 表示最大递归层数，如不指定默认为2层。</li>
<li>color 值若为true，将以ANSI颜色编码，通常用于终端显示更漂亮。</li>
</ul>
<p>util.inspect并不会直接把对象转换为字符串，即使该对象定义了toString()方法也不会调用。</p>
<h3 id="util-isArray-util-isRegExp-util-isDate-util-isError"><a href="#util-isArray-util-isRegExp-util-isDate-util-isError" class="headerlink" title="util.isArray()/util.isRegExp()/util.isDate()/util.isError()"></a>util.isArray()/util.isRegExp()/util.isDate()/util.isError()</h3><h3 id="util-format-util-debug"><a href="#util-format-util-debug" class="headerlink" title="util.format()/util.debug()"></a>util.format()/util.debug()</h3><h2 id="事件驱动-events"><a href="#事件驱动-events" class="headerlink" title="事件驱动 events"></a>事件驱动 events</h2><p>events是Node.js最重要的模块，没有之一。</p>
<h3 id="事件发射器"><a href="#事件发射器" class="headerlink" title="事件发射器"></a>事件发射器</h3><p>events模块只提供了一个对象：events.EventEmitter。EventEmitter的核心就是事件发射与事件监听器功能的封装。    </p>
<ul>
<li>EventEmitter.on(event, listener)为指定事件注册一个监听器。接受一个字符串event和一个回调函数listener。</li>
<li>EventEmitter.emit(event, [arg1],[arg2],[…])发射event事件，传递若干参数到事件监听器的参数表。</li>
<li>EventEmitter.once(event), listener）为指定事件注册一个单次监听器。最多只触发一次，触发后立即解除该监听器。</li>
<li>EventEmitter.remove(event, listener)移除指定事件的某个监听器，listener必须是该事件已经注册过的监听器。</li>
<li>EventEmitter.removeAllListeners([event])移除所有事件的所有监听器。</li>
</ul>
<p><strong>error事件，为发射error事件的对象设置监听器，避免遇到错误后整个程序崩溃。</strong></p>
<h3 id="文件系统fs"><a href="#文件系统fs" class="headerlink" title="文件系统fs"></a>文件系统fs</h3><p>fs模块是文件操作的封装，提供了文件的读取、写入、更名、删除、遍历目录、链接等POSIX文件操作系统。fs模块中所有的操作都提供了异步和同步版本。</p>
<h3 id="fs-readFile"><a href="#fs-readFile" class="headerlink" title="fs.readFile"></a>fs.readFile</h3><p>fs.readFile(filename,[encoding],[callback(err,data)])<br>接受一个必选参数filename，表示要读取的文件名。第二个参数encoding是可选的，表示字符编码。callbakck是回调函数，用于接收文件的内容。</p>
<h3 id="fs-readFileSync同步读取"><a href="#fs-readFileSync同步读取" class="headerlink" title="fs.readFileSync同步读取"></a>fs.readFileSync同步读取</h3><p>如果有错误发生，需要使用try catch捕捉异常。</p>
<h3 id="fs-open"><a href="#fs-open" class="headerlink" title="fs.open"></a>fs.open</h3><p>fs.open(path, flags, [mode], [callback(err, fd)])是POSIX open函数的封装。<br>接受两个必选参数：path 为文件路径， flag指定相应模式。<br>mode参数用于创建文件时给文件指定权限。回调函数将会传递一个文件描述符fd。</p>
<h3 id="fs-read"><a href="#fs-read" class="headerlink" title="fs.read"></a>fs.read</h3><p>fs.read(fd, buffer, offset, length, position, [callback(err, bytesRead, buffer)])<br>fs.read从指定的文件描述符fd中读取数据并写入buffer指向的缓冲区对象。offset是buffer的写入偏移量。length是要从文件中读取的字节数。position是文件读取的起始位置，如果position的值为null,则会从文件指针的位置读取。回调函数传递bytesRead和buffer，分别表示读取的字节数和缓冲区对象。</p>
<h2 id="HTTP服务器与客户端"><a href="#HTTP服务器与客户端" class="headerlink" title="HTTP服务器与客户端"></a>HTTP服务器与客户端</h2><p> HTTP服务器</p>
<p>http.server是http模块中的HTTP服务器对象，用Node.js做的所有基于HTTP协议的系统，都是基于http.Server实现的。</p>
<h3 id="http-Server事件"><a href="#http-Server事件" class="headerlink" title="http.Server事件"></a>http.Server事件</h3><p>http.Server是一个基于事件的HTTP服务器，继承自EventEmitter，提供了以下几个事件：</p>
<ul>
<li>request: 当客户端请求到来时，该事件触发，提供两个参数req和res，分别是http.ServerRequest和http.ServerResponse的实例，表示请求和响应信息。</li>
<li>connection: 当TCP连接建立时，该事件被触发，提供一个参数socket，为net.Socket的实例。</li>
<li>close: 当服务器关闭时，该事件被触发，注意不是在用户连接断开时。</li>
</ul>
<p>最常用的是request，http提供了一个捷径： http.createServer([requestListener])–创建一个HTTP服务器并将requestListener作为request事件的监听函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">http.createServer(function(request, response)&#123;</span><br><span class="line">	response.writeHead(200,&#123;&#x27;Content-Type&#x27;: &#x27;text/plain&#x27;&#125;);</span><br><span class="line">	response.write(&#x27;hello&#x27;);</span><br><span class="line">	response.end();</span><br><span class="line">&#125;).listen(&#x27;8888&#x27;);</span><br></pre></td></tr></table></figure>

<h4 id="获取GET请求"><a href="#获取GET请求" class="headerlink" title="获取GET请求"></a>获取GET请求</h4><h4 id="获取POST请求"><a href="#获取POST请求" class="headerlink" title="获取POST请求"></a>获取POST请求</h4><h3 id="http-ServerResponse"><a href="#http-ServerResponse" class="headerlink" title="http.ServerResponse"></a>http.ServerResponse</h3><p>返回给客户端的信息。<br>http.ServerResponse有三个重要的成员函数，用于返回响应头、响应内容以及结束请求。</p>
<ul>
<li>response.writeHead(statusCode, [headers]): 向请求的客户端发送响应头。 statusCode是HTTP状态码。headers是一个类似关联数组的对象，表示响应头的每个属性。该函数在一个请求内最多只能调用一次，如果不调用，则会自动生成一个响应头。</li>
<li>response.write(data, [encoding]): 向请求的客户端发送响应内容。data是一个Buffer或字符串，表示要发送的内容。如果data是字符串，那么需要指定encoding来说明它的编码方式，默认是utf-8。</li>
<li>response.end(data, [encoding]): 结束响应。当所用要返回的内容发送完毕后，该函数必须被调用一次。接受两个可选参数，意义和response.write相同。如果不调用该函数，客户端永远处于等待状态。</li>
</ul>
<h2 id="HTTP客户端"><a href="#HTTP客户端" class="headerlink" title="HTTP客户端"></a>HTTP客户端</h2><p>http模块提供了两个函数http.request和http.get，功能是作为客户端向HTTP服务器发起请求。</p>
<ul>
<li>http.request(options, callback): 发起HTTP请求。接受两个参数，option是一个类似关联数组的对象，表示请求的参数， callback是请求回调函数,传递一个参数，为http.ClientResponse的实例。<br>http.request返回一个http.ClientRequest的实例。</li>
</ul>
<blockquote>
<p><strong>option常用参数如下：</strong><br>host :请求网站的域名或 IP 地址。<br>port :请求网站的端口,默认 80。<br>method :请求方法,默认是 GET。<br>path :请求的相对于根的路径,默认是“/”。QueryString 应该包含在其中。例如 /search?query=byvoid。<br>headers :一个关联数组对象,为请求头的内容。</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">var querystring = require(&#x27;querystring&#x27;);</span><br><span class="line"></span><br><span class="line">var contents = querystring.stringify(&#123;</span><br><span class="line">	name: &#x27;node&#x27;,</span><br><span class="line">	emial: &#x27;nodejs@node.com&#x27;,</span><br><span class="line">	address: &#x27;node street&#x27;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var options = &#123;</span><br><span class="line">	&#x27;host&#x27;: &#x27;www.nodejs.com&#x27;,</span><br><span class="line">	&#x27;path&#x27;: &#x27;/api/node&#x27;,</span><br><span class="line">	&#x27;method&#x27;: &#x27;POST&#x27;,</span><br><span class="line">	&#x27;headers&#x27;:&#123;</span><br><span class="line">		&#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span><br><span class="line">		&#x27;Content-Length&#x27;: contents.length</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var req = http.request(options, function(res)&#123;</span><br><span class="line">	res.setEncoding(&#x27;utf8&#x27;);</span><br><span class="line">	res.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">		console.log(data);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br><span class="line">req.write(contents);</span><br><span class="line">req.end();</span><br></pre></td></tr></table></figure>

<ul>
<li>http.get(options, callback): http模块提供了一个简单的方法用于处理GET请求：http.get。它是http.request的简化版，唯一区别在于http.get自动将请求方法设为了GET请求，同时不需要手动调用req.end()。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">http.get(&#123;host:&#x27;www.nodejs.com&#x27;&#125;, function(res)&#123;</span><br><span class="line">	res.setEncoding(&#x27;utf8&#x27;);</span><br><span class="line">	res.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">		console.log(data);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>http.ClientRequest是由http.request或http.get返回产生的对象，表示一个已经产生且正在进行中的HTTP请求。提供一个response事件，即http.request或http.get第二个参数指定的回调函数的绑定对象。<br>http.ClientRequest像http.ServerResponse一样也提供了write和end函数，用于向服务器发送请求体。通常用于POST、PUT等操作。所有写结束后必须调用end函数以通知服务器，否则请求无效。<br>1 request.abort():终止正在发送的请求<br>2 request.setTimeout(timeout, [callback]):设置请求超时时间，timeout为毫秒数。当请求超时以后，callback将会被调用。</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var http = require(&#x27;http&#x27;);</span><br><span class="line">var req = http.get(&#123;&#x27;host&#x27;: &#x27;www.nodejs.com&#x27;&#125;);</span><br><span class="line">req.on(&#x27;response&#x27;, function(res)&#123;</span><br><span class="line">	res.setEncoding(&#x27;utf8&#x27;);</span><br><span class="line">	res.on(&#x27;data&#x27;, function(data)&#123;</span><br><span class="line">		console.log(data);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>http.ClientResponse与http.ServerRequest相似，提供了三个事件：data、end和close，分别在数据到达、传输结束和连接结束时触发。其中data事件传递一个参数chunk，表示接收到的数据。<br>http.ClientResponse还提供了以下几个特殊的函数：<br>1 response.setEncoding([encoding]):设置默认的编码，当data事件被触发时，数据将会以encoding编码。默认值是null，即不编码，以buffer的形式存储。<br>2 response.pause():暂停接受数据和发送事件，方便实现下载功能。<br>3 response.resume():从暂停的状态中恢复。</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js开发调试工具——node-inspector</title>
    <url>/2016/10/08/Node-js%E5%BC%80%E5%8F%91%E8%B0%83%E8%AF%95%E5%B7%A5%E5%85%B7%E2%80%94%E2%80%94node-inspector/</url>
    <content><![CDATA[<p>当前端开发者使用Node.js开发时，是否想如果Node.js能够像Web开发时在浏览器进行js调试，那该有多好啊？node-inspector为你实现了这个功能。下面我们就看下如何应用。<span id="more"></span></p>
<h2 id="node-inspector"><a href="#node-inspector" class="headerlink" title="node-inspector"></a>node-inspector</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install -g node-inspector</span><br></pre></td></tr></table></figure>
<h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>先执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node --debug app.js</span><br></pre></td></tr></table></figure>
<p>再执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">node-inspector --web-port=&#123;port&#125; //输入端口号</span><br><span class="line">//示例</span><br><span class="line">➜  nodeWeb node-inspector --web-port=3003</span><br><span class="line">Node Inspector v0.12.8</span><br><span class="line">Visit http://127.0.0.1:3003/?port=5858 to start debugging.</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>访问 <a href="http://127.0.0.1:3003/?port=5858">http://127.0.0.1:3003/?port=5858</a> ,即可在浏览器调试Node.js代码了。</p>
<p>现在可以方便愉悦的开发Node.js应用了。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js文件基本操作</title>
    <url>/2016/09/18/Node-js%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Node-js文件基本操作"><a href="#Node-js文件基本操作" class="headerlink" title="Node.js文件基本操作"></a>Node.js文件基本操作</h1><p>关于Node.js的文件操作，首先我们从利用Node.js实现文件拷贝的例子说起：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">function copyFile(src, dist)&#123;</span><br><span class="line">	fs.writeFileSync(dist, fs.readFileSync(src));</span><br><span class="line">&#125;</span><br><span class="line">copyFile(&#x27;./test.txt&#x27;,&#x27;./testcopy.txt&#x27;);</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>上述代码实现了，在当前的js同级目录下，复制text.txt文件内容到textcopy.txt文件中。对于小文件，我们可以这么实现拷贝。但当文件较大时，这样通过一次性读取文件内容到内存，再一次性写入磁盘，就有问题了。对于大文件的拷贝，我们通过下面的方式实现。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">function copyFile(src, dist)&#123;</span><br><span class="line">	// fs.createWriteStream(dist).p(dist, fs.readFileSync(src));</span><br><span class="line">	fs.createReadStream(src).pipe(fs.createWriteStream(dist));</span><br><span class="line">&#125;</span><br><span class="line">copyFile(&#x27;./info.txt&#x27;, &#x27;./copyinfo.txt&#x27;);</span><br></pre></td></tr></table></figure>
<p>上述代码实现的是，边读边写，这样一点一点儿的实现大文件的拷贝。</p>
<p>Node.js的fs模块为我们操作文件提供了查询和操作函数。</p>
<h2 id="查询文件统计信息"><a href="#查询文件统计信息" class="headerlink" title="查询文件统计信息"></a>查询文件统计信息</h2><p>利用fs.stat方法查询文件或目录的元信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.stat(&#x27;./info.txt&#x27;, function(err, stats)&#123;</span><br><span class="line">	if(err) throw err;</span><br><span class="line">	console.log(stats);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>控制台的输出为：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123; dev: 16777218,</span><br><span class="line">  mode: 33188,</span><br><span class="line">  nlink: 1,</span><br><span class="line">  uid: 501,</span><br><span class="line">  gid: 20,</span><br><span class="line">  rdev: 0,</span><br><span class="line">  blksize: 4096,</span><br><span class="line">  ino: 11999814,</span><br><span class="line">  size: 3360,</span><br><span class="line">  blocks: 8,</span><br><span class="line">  atime: Sun Sep 18 2016 15:40:41 GMT+0800 (CST),</span><br><span class="line">  mtime: Sun Sep 18 2016 15:13:30 GMT+0800 (CST),</span><br><span class="line">  ctime: Sun Sep 18 2016 15:13:30 GMT+0800 (CST),</span><br><span class="line">  birthtime: Tue Sep 06 2016 18:38:47 GMT+0800 (CST) &#125;</span><br></pre></td></tr></table></figure>

<p>fs.stat()函数调用会将stats类的一个实例传递给回调函数，这个实例可调用一下方法：</p>
<blockquote>
<p>1 stats.isFile():如果是标准文件，返回true<br>2 stats.isDirectory(): 如果是目录，返回true<br>3 stats.isBlockDevice(): 如果是块设备，返回true<br>4 stats.isCharacterDevice(): 如果是字符设备，返回true<br>5 stats.isSymbolicLink(): 如果是符号链接，返回true<br>6 stats.isFifo(): 如果是FIFO，返回true<br>7 stats.isSocket(): 如果是UNIX套接字，返回true</p>
</blockquote>
<p>(ps: 除了前两个，后面的都有些 懵逼.jpg，待后续再补充。)</p>
<h2 id="打开文件"><a href="#打开文件" class="headerlink" title="打开文件"></a>打开文件</h2><p>fs.open方法，用来打开文件，然后使用文件描述符调用回调函数。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.open(&#x27;./test.txt&#x27;, &#x27;r&#x27;, function(err, fd)&#123;</span><br><span class="line">	//处理操作</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>第一个参数为文件路径，第二个参数为标志位，文件以哪种模式打开（r, r+, w, w+, a, a+:加号的区别在于，读写操作是否都具备)。<br>1 r:打开文本文件进行读取，数据流的位置在文件的起始处<br>2 r+:打开文件进行读写，数据流的位置在文件起始处<br>3 w:如果文件存在，将其清空，如果不存在，就创建文件写入数据，数据流位置在文件起始处<br>4 w+:打开文件进行读写，如果文件不粗安在就创建它，如果存在，将文件清零，数据流的位置在文件起始处<br>5 a:打开文件写入数据，如果文件不存在就创建，如果存在就将文件清零，数据流的位置在文件的结尾处，此后的写操作将数据追加到文件后面<br>6 a+:打开文件进行读写，如果文件不存在就创建，如果存在就将文件清零，数据流的位置在文件的结尾处，此后的写操作将数据追加到文件后面</p>
<h2 id="读取文件"><a href="#读取文件" class="headerlink" title="读取文件"></a>读取文件</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.open(&#x27;./app.js&#x27;,&#x27;r+&#x27;, function(err, fd)&#123;</span><br><span class="line">	if(err) throw err;</span><br><span class="line">	var readBuffer = new Buffer(1024),</span><br><span class="line">		bufferOffset = 0,</span><br><span class="line">		bufferLength = readBuffer.length,</span><br><span class="line">		filePosition = 100;</span><br><span class="line">	fs.read(fd, readBuffer, bufferOffset, bufferLength, filePosition, function(err, readBytes)&#123;</span><br><span class="line">		if(err) throw err;</span><br><span class="line">		console.log(&#x27;just read &#x27; + readBytes + &#x27; bytes&#x27;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>一旦将缓冲区传递给fs.open()函数，缓冲区的控制权就转交给了read命令，只有在回调函数被调用之后，缓冲区的控制权才会返还给你。在此之前不应该对缓冲区进行读写或让其他函数调用该缓冲区，否则则可能会读取不完整的数据，更糟糕的情况可能会并发地往该缓冲区中写入数据。</p>
</blockquote>
<h2 id="写入数据"><a href="#写入数据" class="headerlink" title="写入数据"></a>写入数据</h2><p>通过fs.write()函数传递一个包含数据的缓冲区，可以向一个已打开的文件中写入数据。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.open(&#x27;./info.txt&#x27;,&#x27;a&#x27;, function(err, fd)&#123;</span><br><span class="line">	if(err) throw err;</span><br><span class="line">	var writeBuffer = new Buffer(&#x27;测试写入数据&#x27;),</span><br><span class="line">		bufferOffset = 0,</span><br><span class="line">		bufferLength = writeBuffer.length,</span><br><span class="line">		filePosition = null;</span><br><span class="line">	fs.write(fd, writeBuffer, bufferOffset, bufferLength, filePosition, function(err, writeBytes)&#123;</span><br><span class="line">		if(err) throw err;</span><br><span class="line">		console.log(&#x27;write &#x27; + writeBytes + &#x27; bytes&#x27;)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>传递给缓冲区包含以下一些信息：<br>1 准备写入的缓冲区的数据<br>2 待写入数据在缓冲区的起始位置<br>3 待写入数据的长度<br>4 从文件中的什么位置开始写入数据<br>5 写入文件操作结束后被调用的回调函数</p>
<blockquote>
<p>在上述例子中，项文件中写入数据的起始位置为null，标明写入操作将当前文件的游标处开始。由于是以追加模式打开文件的，因此此时文件的游标位于文件的结尾处。</p>
</blockquote>
<h2 id="关闭文件"><a href="#关闭文件" class="headerlink" title="关闭文件"></a>关闭文件</h2><p>在实际应用程序中，一旦打开某个文件，最后就必须关闭它。为此，必须跟踪那些已经打开的文件的描述符，在最后不再需要它们的时候，使用fs.close(fd[,callback])关闭它们。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var fs = require(&#x27;fs&#x27;);</span><br><span class="line">fs.open(&#x27;./info.txt&#x27;,&#x27;a&#x27;, function(err, fd)&#123;</span><br><span class="line">	if(err) throw err;</span><br><span class="line">	function notifyErr(err)&#123;</span><br><span class="line">		fs.close(fd, function()&#123; console.log(&#x27;关闭文档&#x27;)&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	var writeBuffer = new Buffer(&#x27;测试写入数据&#x27;),</span><br><span class="line">		bufferOffset = 0,</span><br><span class="line">		bufferLength = writeBuffer.length,</span><br><span class="line">		filePosition = null;</span><br><span class="line">	fs.write(fd, writeBuffer, bufferOffset, bufferLength, filePosition, function(err, writeBytes)&#123;</span><br><span class="line">		if(err) return notifyErr(err);</span><br><span class="line">		fs.close(fd, function()&#123; console.log(&#x27;读写完毕，关闭文档&#x27;)&#125;);</span><br><span class="line">		console.log(&#x27;write &#x27; + writeBytes + &#x27; bytes&#x27;);</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>Node.js缓冲区基本操作</title>
    <url>/2016/09/19/Node-js%E7%BC%93%E5%86%B2%E5%8C%BA%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h1 id="Node-js缓冲区基本操作"><a href="#Node-js缓冲区基本操作" class="headerlink" title="Node.js缓冲区基本操作"></a>Node.js缓冲区基本操作</h1><h2 id="创建缓冲区"><a href="#创建缓冲区" class="headerlink" title="创建缓冲区"></a>创建缓冲区</h2><p>先来看代码:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var buffer = new Buffer(&#x27;Hello, Node.js!&#x27;);</span><br><span class="line"></span><br><span class="line">var buf = new Buffer(&#x27;Hello, Node.js!&#x27;, &#x27;base64&#x27;);</span><br><span class="line"></span><br><span class="line">var buff = new Buffer(1024);</span><br></pre></td></tr></table></figure>
<p>上面代码展示了利用 new Buffer()，来创建缓冲区。当需要指定内容初始化缓冲区，有两个参数可选，第一个为需要初始化的内容，第二个为指定编码格式。当不需要初始化内容时，可以通过指定容量大小来创建缓冲区。<span id="more"></span></p>
<p>可以接受的编码格式为：</p>
<blockquote>
<p>1 ascii : ASCII。该编码格式仅适用于ASCII字符集。<br>2 utf8 : UTF-8。utf8是默认编码格式。<br>3 base64 : Base64。 这种编码格式基于64个可打印ASCII字符来表示二进制数据，Base64通常用于在字符文档内嵌入可以转换成字符串的二进制数据，在需要时又可以完整无损地转换回原来的二进制格式。</p>
</blockquote>
<h2 id="在缓冲区设置和获取数据"><a href="#在缓冲区设置和获取数据" class="headerlink" title="在缓冲区设置和获取数据"></a>在缓冲区设置和获取数据</h2><p>当创建或者获取缓冲区后，可以使用[]操作符来查看或者修改缓冲区中的某个字节。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var buff = new Buffer(&#x27;Hello, Node.js&#x27;);</span><br><span class="line">//访问缓冲区数据</span><br><span class="line">console.log(buff[4]);//111</span><br></pre></td></tr></table></figure>
<p><em>当创建一个已被初始化的缓冲区，缓冲区的数据并非是0，而是一些随机值。</em></p>
<p>修改任意位置上的数据：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">buff[4] = 123;</span><br></pre></td></tr></table></figure>
<blockquote>
<ul>
<li>如果将缓冲区某个位置设置为一个大于255的数，将会用256对该数取模，最终将模取模结果赋给该位置。</li>
</ul>
</blockquote>
<ul>
<li>如果将缓冲区某位置设置为256，则实际赋值为0.</li>
<li>如果将缓冲区某位置设置为类似100.9这样的小数，则仅会存储整数部分。</li>
<li>如果尝试给超出缓冲区边界的位置赋值，则赋值失败，缓冲区无变化。</li>
</ul>
<p>缓冲区长度，可以用.length属性获得。</p>
<h2 id="切分缓冲区"><a href="#切分缓冲区" class="headerlink" title="切分缓冲区"></a>切分缓冲区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var buffer = new Buffer(&#x27;test test test new buffer&#x27;);</span><br><span class="line">var sliceBuffer = buffer.slice(5,9);</span><br><span class="line">console.log(sliceBuffer.toString());//test</span><br></pre></td></tr></table></figure>
<blockquote>
<p>切分缓冲区，并没有分配新的内存，也没进行任何复制，新缓冲区还是使用父缓冲区的内存区域。只是引用了父缓冲区不同的起始位置、结束位置。利用这种方法从父缓冲区创建一个较小的子缓冲区，父缓冲区在操作结束后会被保留，并不会被垃圾收集器回收，如果不谨慎处理，很容易造成内存泄漏。</p>
</blockquote>
<p><strong>如果担心因父缓冲区保留而产生内存泄漏问题，可以使用copy方法替代slice方法。</strong></p>
<h2 id="复制缓冲区"><a href="#复制缓冲区" class="headerlink" title="复制缓冲区"></a>复制缓冲区</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var buffer = new Buffer(&#x27;12345678901234567890&#x27;);</span><br><span class="line">var copyBuffer = new Buffer(4);</span><br><span class="line"></span><br><span class="line">var targetStart = 0;</span><br><span class="line">var sourceStart  = 8;</span><br><span class="line">var sourceEnd = 12;</span><br><span class="line"></span><br><span class="line">buffer.copy(copyBuffer, targetStart, sourceStart, sourceEnd);</span><br><span class="line">console.log(copyBuffer.toString());//9012</span><br></pre></td></tr></table></figure>
<p>上面代码将源缓冲区的第8-12位置上的数据复制到目标缓冲区的起始位置。</p>
<h2 id="缓冲区解码"><a href="#缓冲区解码" class="headerlink" title="缓冲区解码"></a>缓冲区解码</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var str = buf.toString();</span><br></pre></td></tr></table></figure>
<p>可以指定编码格式：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var base64str = buf.toString(&#x27;base64&#x27;);</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记-函数</title>
    <url>/2018/10/31/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">add</span>(<span class="params">x: number, y: number</span>): number &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span>(<span class="params">x: number, y: number</span>): number &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">x: number, y: number</span>) =&gt;</span> number =</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">x: number, y: number</span>): number &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>
<h4 id="推断类型"><a href="#推断类型" class="headerlink" title="推断类型"></a>推断类型</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// myAdd has the full function type</span></span><br><span class="line"><span class="keyword">let</span> myAdd = <span class="keyword">function</span>(<span class="params">x: number, y: number</span>): number &#123; <span class="keyword">return</span> x + y; &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// The parameters `x` and `y` have the type number</span></span><br><span class="line"><span class="keyword">let</span> <span class="attr">myAdd</span>: <span class="function">(<span class="params">baseValue: number, increment: number</span>) =&gt;</span> number =</span><br><span class="line">    <span class="keyword">function</span>(<span class="params">x, y</span>) &#123; <span class="keyword">return</span> x + y; &#125;;</span><br></pre></td></tr></table></figure>

<h3 id="可选参数和默认参数"><a href="#可选参数和默认参数" class="headerlink" title="可选参数和默认参数"></a>可选参数和默认参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: string, lastName = <span class="string">&quot;Smith&quot;</span></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + lastName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result1 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>);                  <span class="comment">// works correctly now, returns &quot;Bob Smith&quot;</span></span><br><span class="line"><span class="keyword">let</span> result2 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="literal">undefined</span>);       <span class="comment">// still works, also returns &quot;Bob Smith&quot;</span></span><br><span class="line"><span class="keyword">let</span> result3 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>, <span class="string">&quot;Sr.&quot;</span>);  <span class="comment">// error, too many parameters</span></span><br><span class="line"><span class="keyword">let</span> result4 = <span class="title function_">buildName</span>(<span class="string">&quot;Bob&quot;</span>, <span class="string">&quot;Adams&quot;</span>);         <span class="comment">// ah, just right</span></span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">buildName</span>(<span class="params">firstName: string, ...restOfName: string[]</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> firstName + <span class="string">&quot; &quot;</span> + restOfName.<span class="title function_">join</span>(<span class="string">&quot; &quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> employeeName = <span class="title function_">buildName</span>(<span class="string">&quot;Joseph&quot;</span>, <span class="string">&quot;Samuel&quot;</span>, <span class="string">&quot;Lucas&quot;</span>, <span class="string">&quot;MacKinzie&quot;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="this"><a href="#this" class="headerlink" title="this"></a>this</h3><p><strong>JavaScript里，this的值在函数被调用的时候才会指定。</strong></p>
<h4 id="this和箭头函数"><a href="#this和箭头函数" class="headerlink" title="this和箭头函数"></a>this和箭头函数</h4><h3 id="重载"><a href="#重载" class="headerlink" title="重载"></a>重载</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记-变量声明</title>
    <url>/2018/10/30/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%8F%98%E9%87%8F%E5%A3%B0%E6%98%8E/</url>
    <content><![CDATA[<h2 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h2><h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p><em>拥有块级作用域的变量的另一个特点是，它们不能在被声明之前读或写。 虽然这些变量始终“存在”于它们的作用域里，但在直到声明它的代码之前的区域都属于 暂时性死区。 它只是用来说明我们不能在 let语句之前访问它们。</em></p>
<span id="more"></span>

<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>它们与let声明相似，但是就像它的名字所表达的，它们被赋值后不能再改变。 换句话说，它们拥有与 let相同的作用域规则，但是不能对它们重新赋值。</p>
<p>这很好理解，它们引用的值是不可变的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numLivesForCat = <span class="number">9</span>; <span class="comment">//猫有九命，O(∩_∩)O哈哈~</span></span><br><span class="line"><span class="keyword">const</span> kitty = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Garfield&#x27;</span>,</span><br><span class="line">    <span class="attr">numLives</span>: numLivesForCat,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Error</span></span><br><span class="line">kitty = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;Tom&#x27;</span>,</span><br><span class="line">    <span class="attr">numLives</span>: numLivesForCat,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ok</span></span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&#x27;World&#x27;</span>;</span><br><span class="line">kitty.<span class="property">name</span> = <span class="string">&#x27;Cat&#x27;</span>;</span><br><span class="line">kitty.<span class="property">numLvies</span>--;</span><br></pre></td></tr></table></figure>
<h3 id="解构"><a href="#解构" class="headerlink" title="解构"></a>解构</h3><h4 id="解构数组"><a href="#解构数组" class="headerlink" title="解构数组"></a>解构数组</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> input = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="keyword">let</span> [first, second] = input;</span><br><span class="line">[first, second] = [second, first];</span><br></pre></td></tr></table></figure>

<h4 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h4><h4 id="函数声明"><a href="#函数声明" class="headerlink" title="函数声明"></a>函数声明</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">type C = &#123; <span class="attr">a</span>: string, b?: number&#125;;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">f</span>(<span class="params">&#123; a, b&#125;: C</span>):<span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="展开"><a href="#展开" class="headerlink" title="展开"></a>展开</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> defaults = &#123;</span><br><span class="line">    <span class="attr">food</span>: <span class="string">&#x27;spicy&#x27;</span>,</span><br><span class="line">    <span class="attr">price</span>: <span class="string">&#x27;$$&#x27;</span>,</span><br><span class="line">    <span class="attr">ambiance</span>: <span class="string">&#x27;noisy&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> search = &#123;...defaults, <span class="attr">food</span>: <span class="string">&#x27;rich&#x27;</span>&#125;;</span><br><span class="line"><span class="comment">// &#123; food: &#x27;rich&#x27;, price: &#x27;$$&#x27;, ambiance: &#x27;noisy&#x27; &#125;</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记-基础类型</title>
    <url>/2018/10/29/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="基础类型"><a href="#基础类型" class="headerlink" title="基础类型"></a>基础类型</h2><h3 id="布尔值"><a href="#布尔值" class="headerlink" title="布尔值"></a>布尔值</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">isDone</span>: boolean = <span class="literal">false</span>;</span><br></pre></td></tr></table></figure>
<span id="more"></span>

<h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><p>和 Javascript 一样，TypeScript里所有数字为浮点数，类型为 number 。除了支持十进制和十六进制字面量，TypeScript还支持 ECMAScript 2015中引入的二进制和八进制字面量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">decLiteral</span>: number = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">hexLiteral</span>: number = <span class="number">0xf00d</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">binaryLiteral</span>: number = <span class="number">0b1010</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">octalLiteral</span>: number =0c744;</span><br></pre></td></tr></table></figure>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">name</span>: string = <span class="string">&#x27;Tom&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">age</span>: number = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">sentence</span>: string = <span class="string">`Hello, my name is <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">    I&#x27;ll be <span class="subst">$&#123;age + <span class="number">1</span>&#125;</span> years old next month.`</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>TypeScript 有两种方式定义数组：第一种，可以在元素类型后面接上[]，表示此类型元素组成的一个数组；第二种使用数组泛型， Array&lt;元素类型&gt;</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">&lt;!-- 使用数组泛型 --&gt;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">list</span>: <span class="title class_">Array</span>&lt;number&gt; = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br></pre></td></tr></table></figure>

<h3 id="元组-Tuple"><a href="#元组-Tuple" class="headerlink" title="元组 Tuple"></a>元组 Tuple</h3><p>元组类型允许表示一个已知元素数量和类型的数组，各元素类型不必相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">x</span>: [string, number];</span><br><span class="line"></span><br><span class="line">x = [<span class="string">&#x27;hello&#x27;</span>, <span class="number">10</span>]; <span class="comment">// ok</span></span><br><span class="line">x = [<span class="number">10</span>, <span class="string">&#x27;hello&#x27;</span>]; <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>当访问一个已知索引的元素，会得到正确的类型：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">0</span>].<span class="title function_">substr</span>(<span class="number">1</span>)); <span class="comment">// ok</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">1</span>].<span class="title function_">substr</span>(<span class="number">1</span>)); <span class="comment">// error</span></span><br></pre></td></tr></table></figure>
<p>当访问一个越界元素，会使用联合类型替代：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">x[<span class="number">3</span>] = <span class="string">&#x27;world&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x[<span class="number">5</span>].<span class="title function_">toString</span>()); <span class="comment">// ok, string 和 number 都有 toString</span></span><br><span class="line">x[<span class="number">6</span>] = <span class="literal">true</span>; <span class="comment">// Error, 布尔值不是 string | number 类型</span></span><br></pre></td></tr></table></figure>
<h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><p>enum类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;<span class="title class_">Red</span>, <span class="title class_">Green</span>, <span class="title class_">Blue</span>&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">c</span>:<span class="title class_">Color</span> = <span class="title class_">Color</span>.<span class="property">Green</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Any"><a href="#Any" class="headerlink" title="Any"></a>Any</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let notSure: any = 4;</span><br><span class="line">notSure = &#x27;maybe a string instead&#x27;;</span><br><span class="line">notSure = false;</span><br></pre></td></tr></table></figure>

<h3 id="Void"><a href="#Void" class="headerlink" title="Void"></a>Void</h3><p>某种程度来讲，void 类型像是 any 的范类型，它表示没有任何类型。当一个函数没有返回值时，你通常会见到其返回值类型是 void：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">warnUser</span>(<span class="params"></span>):<span class="keyword">void</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;This is my warning message&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>声明一个 void类型的变量没有什么大用，因为只能为它赋值 undefined 和 null。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">unusabe</span>: <span class="keyword">void</span> = <span class="literal">undefined</span>;</span><br></pre></td></tr></table></figure>

<h3 id="Null-和-Undefined"><a href="#Null-和-Undefined" class="headerlink" title="Null 和 Undefined"></a>Null 和 Undefined</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">u</span>: <span class="literal">undefined</span> = <span class="literal">undefined</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">n</span>: <span class="literal">null</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>
<p>默认情况下， null 和 undefined 是所有类型的子类型。但是当指定了 –strictNullChecks 标记，null 和 undefined 只能赋值给 void 和它们各自。</p>
<h3 id="Never"><a href="#Never" class="headerlink" title="Never"></a>Never</h3><p>never类型表示的是那些永不存在的值的类型。 例如， never类型是那些总是会抛出异常或根本就不会有返回值的函数表达式或箭头函数表达式的返回值类型； 变量也可能是 never类型，当它们被永不为真的类型保护所约束时。</p>
<p><strong>never类型是任何类型的子类型，也可以赋值给任何类型；然而，没有类型是never的子类型或可以赋值给never类型（除了never本身之外）。 即使 any也不可以赋值给never。</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 返回 never 的函数必须存在无法到达的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">error</span>(<span class="params">message: string</span>): never &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(message);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 推断的返回值类型为never</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">error</span>(<span class="string">&#x27;something failed&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回never的函数必须存在无法达到的终点</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">infiniteLoop</span>(<span class="params"></span>): never &#123;</span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h3><p>Object 表示非原始类型，除 number, string, boolean, symbol, null, undefined 之外的类型。<br>使用Object类型，可以更好的表示像 Object.create这样的API。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">declare <span class="keyword">function</span> <span class="title function_">create</span>(<span class="params">o: object | <span class="literal">null</span></span>): <span class="keyword">void</span>;</span><br><span class="line"><span class="title function_">create</span>(&#123; <span class="attr">prop</span>: <span class="number">0</span> &#125;); <span class="comment">//ok</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">null</span>); <span class="comment">//ok</span></span><br><span class="line"><span class="title function_">create</span>(<span class="number">42</span>); <span class="comment">//Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="string">&#x27;string&#x27;</span>); <span class="comment">//Error</span></span><br><span class="line"><span class="title function_">create</span>(<span class="literal">false</span>); <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>

<h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>两种方式，其一是’尖括号’语法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">let someVaule: any = &#x27;this is a string&#x27;;</span><br><span class="line">let strLenght: number = (&lt;string&gt;someValue).length;</span><br></pre></td></tr></table></figure>
<p>as语法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">someValue</span>: any = <span class="string">&#x27;this is a string&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">strLength</span>: number = (someValue <span class="keyword">as</span> string).<span class="property">length</span>;</span><br></pre></td></tr></table></figure>

<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记-接口</title>
    <url>/2018/10/30/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%8E%A5%E5%8F%A3/</url>
    <content><![CDATA[<h2 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h2><p><strong>TypeScript的核心原则之一是对值所具有的结构进行类型检查。 它有时被称做“鸭式辨型法”或“结构性子类型化”。 在TypeScript里，接口的作用就是为这些类型命名和为你的代码或第三方代码定义契约。</strong></p>
<span id="more"></span>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">LabelledValue</span> &#123;</span><br><span class="line">    <span class="attr">label</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">printLable</span>(<span class="params">labeledObj: LabelledValue</span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(labeledObj.<span class="property">label</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> myObj = &#123;<span class="attr">size</span>: <span class="number">10</span>, <span class="attr">label</span>: <span class="string">&#x27;Size 10 Object&#x27;</span>&#125;;</span><br><span class="line"><span class="title function_">printLable</span>(myObj);</span><br></pre></td></tr></table></figure>
<h3 id="可选属性"><a href="#可选属性" class="headerlink" title="可选属性"></a>可选属性</h3><p>接口里的属性不全都是必需的。 有些是只在某些条件下存在，或者根本不存在。 可选属性在应用“option bags”模式时很常用，即给函数传入的参数对象中只有部分属性赋值了。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">    color?: string;</span><br><span class="line">    width?: number;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config:SquareConfig</span>): &#123;<span class="attr">color</span>: string; <span class="attr">area</span>: number&#125; &#123;</span><br><span class="line">    <span class="keyword">let</span> newSquare = &#123; <span class="attr">color</span>: <span class="string">&#x27;white&#x27;</span>, <span class="attr">area</span>: <span class="number">100</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">color</span>) &#123;</span><br><span class="line">        newSquare.<span class="property">color</span> = config.<span class="property">color</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.<span class="property">width</span>) &#123;</span><br><span class="line">        newSquare.<span class="property">area</span> = config.<span class="property">width</span> * config.<span class="property">width</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> newSquare;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123;<span class="attr">color</span>: <span class="string">&#x27;black&#x27;</span>&#125;);</span><br></pre></td></tr></table></figure>
<p>带有可选属性的接口与普通的接口定义差不多，只是在可选属性名字定义的后面加一个?符号。</p>
<h3 id="只读属性"><a href="#只读属性" class="headerlink" title="只读属性"></a>只读属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Point</span> &#123;</span><br><span class="line">    readonly <span class="attr">x</span>: number;</span><br><span class="line">    readonly <span class="attr">y</span>: number;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>通过赋值一个对象字面量来构造一个 Point。赋值后， x 和 y 就不能再改变了</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">p1</span>: <span class="title class_">Point</span> = &#123; <span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">20</span>&#125;;</span><br><span class="line">p1.<span class="property">x</span> = <span class="number">5</span>; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>

<p>TypeScript具有ReadonlyArray<T>类型，它与Array<T>相似，只是把所有可变方法去掉了，因此可以确保数组创建后再也不能被修改：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">a</span>: number[] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">ro</span>: <span class="title class_">ReadonlyArray</span>&lt;number&gt; = a;</span><br><span class="line">ro[<span class="number">0</span>] = <span class="number">12</span>; <span class="comment">//Error</span></span><br><span class="line">ro.<span class="title function_">push</span>(<span class="number">12</span>); <span class="comment">// error;</span></span><br><span class="line">a = ro; <span class="comment">//Error</span></span><br></pre></td></tr></table></figure>
<p>上面代码的最后一行，可以看到就算把整个ReadonlyArray赋值到一个普通数组也是不可以的。 但是你可以用类型断言重写：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">a = ro <span class="keyword">as</span> number[];</span><br></pre></td></tr></table></figure>
<h4 id="readonly-vs-const"><a href="#readonly-vs-const" class="headerlink" title="readonly vs const"></a>readonly vs const</h4><p><strong>最简单判断该用readonly还是const的方法是看要把它做为变量使用还是做为一个属性。 做为变量使用的话用 const，若做为属性则使用readonly。</strong></p>
<h3 id="额外的属性检查"><a href="#额外的属性检查" class="headerlink" title="额外的属性检查"></a>额外的属性检查</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">    color?: string;</span><br><span class="line">    width?: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createSquare</span>(<span class="params">config: SquareConfig</span>): &#123; <span class="attr">color</span>: string; <span class="attr">area</span>: number &#125; &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// error: &#x27;colour&#x27; not expected in type &#x27;SquareConfig&#x27;</span></span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">colour</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;);</span><br></pre></td></tr></table></figure>
<p>传入createSquare的参数为colour而不是color。 在JavaScript里，这会默默地失败。</p>
<p>你可能会争辩这个程序已经正确地类型化了，因为width属性是兼容的，不存在color属性，而且额外的colour属性是无意义的。</p>
<p>然而，TypeScript会认为这段代码可能存在bug。 对象字面量会被特殊对待而且会经过 额外属性检查，当将它们赋值给变量或作为参数传递的时候。 如果一个对象字面量存在任何“目标类型”不包含的属性时，你会得到一个错误。</p>
<p>使用类型断言，绕过检查:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(&#123; <span class="attr">width</span>: <span class="number">100</span>, <span class="attr">opacity</span>: <span class="number">0.5</span> &#125; <span class="keyword">as</span> <span class="title class_">SquareConfig</span>);</span><br></pre></td></tr></table></figure>
<p>最佳方式是能够添加一个字符串索引签名。前提是你能够确定这个对象可能具有某些做为特殊用途使用的额外属性。 如果 SquareConfig带有上面定义的类型的color和width属性，并且还会带有任意数量的其它属性，那么我们可以这样定义它：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">SquareConfig</span> &#123;</span><br><span class="line">    color?: string;</span><br><span class="line">    width?: number;</span><br><span class="line">    [<span class="attr">propName</span>: string]: any;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>还有最后一种跳过这些检查的方式，这可能会让你感到惊讶，它就是将这个对象赋值给一个另一个变量： 因为 squareOptions不会经过额外属性检查，所以编译器不会报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> squareOptions = &#123; <span class="attr">colour</span>: <span class="string">&quot;red&quot;</span>, <span class="attr">width</span>: <span class="number">100</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> mySquare = <span class="title function_">createSquare</span>(squareOptions);</span><br></pre></td></tr></table></figure>

<h3 id="函数类型"><a href="#函数类型" class="headerlink" title="函数类型"></a>函数类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">SearchFunc</span> &#123;</span><br><span class="line">    (<span class="attr">source</span>: string, <span class="attr">subString</span>: string): <span class="title class_">Boolean</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span> (<span class="params">source: string, subString: string</span>): boolean &#123;</span><br><span class="line">    <span class="keyword">let</span> result = source.<span class="title function_">search</span>(subString);</span><br><span class="line">    <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>函数的参数会逐个进行检查，要求对应位置上的参数类型是兼容的</strong>。 如果你不想指定类型，TypeScript的类型系统会推断出参数类型，因为函数直接赋值给了 SearchFunc类型变量。 函数的返回值类型是通过其返回值推断出来的（此例是 false和true）。 如果让这个函数返回数字或字符串，类型检查器会警告我们函数的返回值类型与 SearchFunc接口中的定义不匹配。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="attr">mySearch</span>: <span class="title class_">SearchFunc</span>;</span><br><span class="line">mySearch = <span class="keyword">function</span>(<span class="params">src, sub</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> result = src.<span class="title function_">search</span>(sub);</span><br><span class="line">    <span class="keyword">return</span> result &gt; -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可索引的类型"><a href="#可索引的类型" class="headerlink" title="可索引的类型"></a>可索引的类型</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">StringArray</span> &#123;</span><br><span class="line">    [<span class="attr">index</span>: number]: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myArray</span>: <span class="title class_">StringArray</span>;</span><br><span class="line">myArray = [<span class="string">&#x27;Tom&#x27;</span>, <span class="string">&#x27;Lucy&#x27;</span>];</span><br><span class="line"><span class="keyword">let</span> <span class="attr">myStr</span>: string = myArray[<span class="number">0</span>];</span><br></pre></td></tr></table></figure>
<p>TypeScript支持两种索引签名：字符串和数字。<br><strong>可以同时使用两种类型的索引，但是数字索引的返回值必须是字符串索引返回值类型的子类型。</strong> 这是因为当使用 number来索引时，JavaScript会将它转换成string然后再去索引对象。 也就是说用 100（一个number）去索引等同于使用”100”（一个string）去索引，因此两者需要保持一致。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="attr">breed</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：使用数值型的字符串索引，有时会得到完全不同的Animal!</span></span><br><span class="line">interface <span class="title class_">NotOkay</span> &#123;</span><br><span class="line">    [<span class="attr">x</span>: number]: <span class="title class_">Animal</span>;</span><br><span class="line">    [<span class="attr">x</span>: string]: <span class="title class_">Dog</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="类类型"><a href="#类类型" class="headerlink" title="类类型"></a>类类型</h3><h4 id="实现接口"><a href="#实现接口" class="headerlink" title="实现接口"></a>实现接口</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="attr">d</span>: <span class="title class_">Date</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> implements <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">setTime</span>(<span class="params">d: <span class="built_in">Date</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">currentTime</span> = d;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: number, m: number</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>接口描述了类的公共部分，而不是公共和私有两部分。 它不会帮你检查类是否具有某些私有成员。</p>
<h4 id="类静态部分和实例部分的区别"><a href="#类静态部分和实例部分的区别" class="headerlink" title="类静态部分和实例部分的区别"></a>类静态部分和实例部分的区别</h4><p>当你操作类和接口的时候，你要知道类是具有两个类型的：静态部分的类型和实例的类型。 你会注意到，当你用构造器签名去定义一个接口并试图定义一个类去实现这个接口时会得到一个错误：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="title function_">new</span> (<span class="attr">hour</span>: number, <span class="attr">minute</span>: number);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// error</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Clock</span> implements <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="attr">currentTime</span>: <span class="title class_">Date</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: number, m: number</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里因为当一个类实现了一个接口时，只对其实例部分进行类型检查。 constructor存在于类的静态部分，所以不在检查的范围内。</p>
<p>因此，我们应该直接操作类的静态部分。 看下面的例子，我们定义了两个接口， ClockConstructor为构造函数所用和ClockInterface为实例方法所用。 为了方便我们定义一个构造函数 createClock，它用传入的类型创建实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">ClockConstructor</span> &#123;</span><br><span class="line">    <span class="title function_">new</span> (<span class="attr">hour</span>: number, <span class="attr">minute</span>: number): <span class="title class_">ClockInterface</span>;</span><br><span class="line">&#125;</span><br><span class="line">interface <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">tick</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createClock</span>(<span class="params">ctor: ClockConstructor, hour: number, minute: number</span>): <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">ctor</span>(hour, minute);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DigitalClock</span> implements <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: number, m: number</span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;beep beep&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AnalogClock</span> implements <span class="title class_">ClockInterface</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">h: number, m: number</span>) &#123; &#125;</span><br><span class="line">    <span class="title function_">tick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;tick tock&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> digital = <span class="title function_">createClock</span>(<span class="title class_">DigitalClock</span>, <span class="number">12</span>, <span class="number">17</span>);</span><br><span class="line"><span class="keyword">let</span> analog = <span class="title function_">createClock</span>(<span class="title class_">AnalogClock</span>, <span class="number">7</span>, <span class="number">32</span>);</span><br></pre></td></tr></table></figure>

<h3 id="继承接口"><a href="#继承接口" class="headerlink" title="继承接口"></a>继承接口</h3><p>和类一样，接口也可以相互继承。 这让我们能够从一个接口里复制成员到另一个接口里，可以更灵活地将接口分割到可重用的模块里。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;<span class="title class_">Square</span>&gt;&#123;&#125;;</span><br><span class="line">square.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span>;</span><br></pre></td></tr></table></figure>
<p>一个接口可以继承多个接口，创建出多个接口的合成接口。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Shape</span> &#123;</span><br><span class="line">    <span class="attr">color</span>: string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">PenStroke</span> &#123;</span><br><span class="line">    <span class="attr">penWidth</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Square</span> <span class="keyword">extends</span> <span class="title class_">Shape</span>, <span class="title class_">PenStroke</span> &#123;</span><br><span class="line">    <span class="attr">sideLength</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> square = &lt;<span class="title class_">Square</span>&gt;&#123;&#125;;</span><br><span class="line">square.<span class="property">color</span> = <span class="string">&quot;blue&quot;</span>;</span><br><span class="line">square.<span class="property">sideLength</span> = <span class="number">10</span>;</span><br><span class="line">square.<span class="property">penWidth</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>

<h3 id="混合类型"><a href="#混合类型" class="headerlink" title="混合类型"></a>混合类型</h3><p>接口能够描述JavaScript里丰富的类型。 因为JavaScript其动态灵活的特点，有时你会希望一个对象可以同时具有上面提到的多种类型。</p>
<p>一个例子就是，一个对象可以同时做为函数和对象使用，并带有额外的属性。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">interface <span class="title class_">Counter</span> &#123;</span><br><span class="line">    (<span class="attr">start</span>: number): string;</span><br><span class="line">    <span class="attr">interval</span>: number;</span><br><span class="line">    <span class="title function_">reset</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">getCounter</span>(<span class="params"></span>): <span class="title class_">Counter</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> counter = &lt;<span class="title class_">Counter</span>&gt;<span class="keyword">function</span> (<span class="params">start: number</span>) &#123; &#125;;</span><br><span class="line">    counter.<span class="property">interval</span> = <span class="number">123</span>;</span><br><span class="line">    counter.<span class="property">reset</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123; &#125;;</span><br><span class="line">    <span class="keyword">return</span> counter;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="title function_">getCounter</span>();</span><br><span class="line"><span class="title function_">c</span>(<span class="number">10</span>);</span><br><span class="line">c.<span class="title function_">reset</span>();</span><br><span class="line">c.<span class="property">interval</span> = <span class="number">5.0</span>;</span><br></pre></td></tr></table></figure>
<h3 id="接口继承类"><a href="#接口继承类" class="headerlink" title="接口继承类"></a>接口继承类</h3><p>当接口继承了一个类类型时，它会继承类的成员但不包括其实现。 就好像接口声明了所有类中存在的成员，但并没有提供具体实现一样。 接口同样会继承到类的private和protected成员。 这意味着当你创建了一个接口继承了一个拥有私有或受保护的成员的类时，这个接口类型只能被这个类或其子类所实现（implement）。</p>
<p>当你有一个庞大的继承结构时这很有用，但要指出的是你的代码只在子类拥有特定属性时起作用。 这个子类除了继承至基类外与基类没有任何关系。 例：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    private <span class="attr">state</span>: any;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">SelectableControl</span> <span class="keyword">extends</span> <span class="title class_">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(): <span class="keyword">void</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Button</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> implements <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TextBox</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Control</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 错误：“Image”类型缺少“state”属性。</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Image</span> implements <span class="title class_">SelectableControl</span> &#123;</span><br><span class="line">    <span class="title function_">select</span>(<span class="params"></span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Location</span> &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在上面的例子里，SelectableControl包含了Control的所有成员，包括私有成员state。 因为 state是私有成员，所以只能够是Control的子类们才能实现SelectableControl接口。 因为只有 Control的子类才能够拥有一个声明于Control的私有成员state，这对私有成员的兼容性是必需的。</p>
<p>在Control类内部，是允许通过SelectableControl的实例来访问私有成员state的。 实际上， SelectableControl接口和拥有select方法的Control类是一样的。 Button和TextBox类是SelectableControl的子类（因为它们都继承自Control并有select方法），但Image和Location类并不是这样的。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>TypeScript学习笔记-类</title>
    <url>/2018/10/31/TypeScript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%B1%BB/</url>
    <content><![CDATA[<p>传统的JavaScript程序使用函数和基于原型的继承来创建可重用的组件，但对于熟悉使用面向对象方式的程序员来讲就有些棘手，因为他们用的是基于类的继承并且对象是由类构建出来的。 从ECMAScript 2015，也就是ECMAScript 6开始，JavaScript程序员将能够使用基于类的面向对象的方式。<span id="more"></span></p>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="attr">greeting</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">message: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">greeting</span> = message;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hello, &#x27;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> greeter = <span class="keyword">new</span> <span class="title class_">Greeter</span>(<span class="string">&#x27;world&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">distanceInMeters: number = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`Animal moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Dog</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">bark</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Woof! Woof!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> dog = <span class="keyword">new</span> <span class="title class_">Dog</span>();</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br><span class="line">dog.<span class="title function_">move</span>(<span class="number">10</span>);</span><br><span class="line">dog.<span class="title function_">bark</span>();</span><br></pre></td></tr></table></figure>
<p>这个例子展示了最基本的继承：类从基类中继承了属性和方法。 这里， Dog是一个 派生类，它派生自 Animal 基类，通过 extends关键字。 派生类通常被称作 子类，基类通常被称作 超类。</p>
<p>因为 Dog继承了 Animal的功能，因此我们可以创建一个 Dog的实例，它能够 bark()和 move()。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">distanceInMeters: number = <span class="number">0</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Snake</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123; <span class="variable language_">super</span>(name); &#125;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">distanceInMeters = <span class="number">5</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Slithering...&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">move</span>(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Horse</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123; <span class="variable language_">super</span>(name); &#125;</span><br><span class="line">    <span class="title function_">move</span>(<span class="params">distanceInMeters = <span class="number">45</span></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Galloping...&quot;</span>);</span><br><span class="line">        <span class="variable language_">super</span>.<span class="title function_">move</span>(distanceInMeters);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sam = <span class="keyword">new</span> <span class="title class_">Snake</span>(<span class="string">&quot;Sammy the Python&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> <span class="attr">tom</span>: <span class="title class_">Animal</span> = <span class="keyword">new</span> <span class="title class_">Horse</span>(<span class="string">&quot;Tommy the Palomino&quot;</span>);</span><br><span class="line"></span><br><span class="line">sam.<span class="title function_">move</span>();</span><br><span class="line">tom.<span class="title function_">move</span>(<span class="number">34</span>);</span><br></pre></td></tr></table></figure>
<p>使用 extends关键字创建了 Animal的两个子类： Horse和 Snake。</p>
<p>与前一个例子的不同点是，派生类包含了一个构造函数，它 必须调用 super()，它会执行基类的构造函数。 而且，在构造函数里访问 this的属性之前，我们 一定要调用 super()。 这个是TypeScript强制执行的一条重要规则。</p>
<h3 id="公共，私有与受保护的修饰符"><a href="#公共，私有与受保护的修饰符" class="headerlink" title="公共，私有与受保护的修饰符"></a>公共，私有与受保护的修饰符</h3><h4 id="默认为public"><a href="#默认为public" class="headerlink" title="默认为public"></a>默认为public</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    public <span class="attr">name</span>: string;</span><br><span class="line">    public <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">    public <span class="title function_">move</span>(<span class="params">distanceInMeters: number</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> moved <span class="subst">$&#123;distanceInMeters&#125;</span>m.`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="理解-private"><a href="#理解-private" class="headerlink" title="理解 private"></a>理解 private</h4><p>当成员被标记成 private时，它就不能在声明它的类的外部访问。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    private <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Cat&quot;</span>).<span class="property">name</span>; <span class="comment">// 错误: &#x27;name&#x27; 是私有的.</span></span><br></pre></td></tr></table></figure>

<p>TypeScript使用的是结构性类型系统。 当我们比较两种不同的类型时，并不在乎它们从何处而来，如果所有成员的类型都是兼容的，我们就认为它们的类型是兼容的。</p>
<p>然而，当我们比较带有 private或 protected成员的类型的时候，情况就不同了。 如果其中一个类型里包含一个 private成员，那么只有当另外一个类型中也存在这样一个 private成员， 并且<strong>它们都是来自同一处声明时，我们才认为这两个类型是兼容的</strong>。 对于 protected成员也使用这个规则。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Animal</span> &#123;</span><br><span class="line">    private <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Rhino</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Animal</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123; <span class="variable language_">super</span>(<span class="string">&quot;Rhino&quot;</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> &#123;</span><br><span class="line">    private <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> animal = <span class="keyword">new</span> <span class="title class_">Animal</span>(<span class="string">&quot;Goat&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> rhino = <span class="keyword">new</span> <span class="title class_">Rhino</span>();</span><br><span class="line"><span class="keyword">let</span> employee = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line"></span><br><span class="line">animal = rhino;</span><br><span class="line">animal = employee; <span class="comment">// 错误: Animal 与 Employee 不兼容. 当把 Employee赋值给 Animal的时候，得到一个错误，说它们的类型不兼容。 尽管 Employee里也有一个私有成员 name，但它明显不是 Animal里面定义的那个</span></span><br></pre></td></tr></table></figure>

<h4 id="理解protected"><a href="#理解protected" class="headerlink" title="理解protected"></a>理解protected</h4><p><strong>protected修饰符与 private修饰符的行为很相似，但有一点不同， protected成员在派生类中仍然可以访问</strong>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    protected <span class="attr">name</span>: string;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = name; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    private <span class="attr">department</span>: string;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, department: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">department</span> = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="title function_">getElevatorPitch</span>());</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(howard.<span class="property">name</span>); <span class="comment">// 错误</span></span><br></pre></td></tr></table></figure>
<p>我们不能在 Person类外使用 name，但是我们仍然可以通过 Employee类的实例方法访问，因为 Employee是由 Person派生而来的。<br>构造函数也可以被标记成 protected。 这意味着这个类不能在包含它的类外被实例化，但是能被继承。(这么做的意义？？)</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    protected <span class="attr">name</span>: string;</span><br><span class="line">    protected <span class="title function_">constructor</span>(<span class="params">theName: string</span>) &#123; <span class="variable language_">this</span>.<span class="property">name</span> = theName; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Employee 能够继承 Person</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Employee</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Person</span> &#123;</span><br><span class="line">    private <span class="attr">department</span>: string;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">name: string, department: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(name);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">department</span> = department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public <span class="title function_">getElevatorPitch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">`Hello, my name is <span class="subst">$&#123;<span class="variable language_">this</span>.name&#125;</span> and I work in <span class="subst">$&#123;<span class="variable language_">this</span>.department&#125;</span>.`</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> howard = <span class="keyword">new</span> <span class="title class_">Employee</span>(<span class="string">&quot;Howard&quot;</span>, <span class="string">&quot;Sales&quot;</span>);</span><br><span class="line"><span class="keyword">let</span> john = <span class="keyword">new</span> <span class="title class_">Person</span>(<span class="string">&quot;John&quot;</span>); <span class="comment">// 错误: &#x27;Person&#x27; 的构造函数是被保护的.</span></span><br></pre></td></tr></table></figure>

<h3 id="readonly修饰符"><a href="#readonly修饰符" class="headerlink" title="readonly修饰符"></a>readonly修饰符</h3><p>只读属性必须在声明时或构造函数里被初始化。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Octopus</span> &#123;</span><br><span class="line">    readonly <span class="attr">name</span>: string;</span><br><span class="line">    readonly <span class="attr">numberOfLegs</span>: number = <span class="number">8</span>;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params">theName: string</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">name</span> = theName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> dad = <span class="keyword">new</span> <span class="title class_">Octopus</span>(<span class="string">&quot;Man with the 8 strong legs&quot;</span>);</span><br><span class="line">dad.<span class="property">name</span> = <span class="string">&quot;Man with the 3-piece suit&quot;</span>; <span class="comment">// 错误! name 是只读的.</span></span><br></pre></td></tr></table></figure>
<h4 id="参数属性"><a href="#参数属性" class="headerlink" title="参数属性"></a>参数属性</h4><p>在上面的例子中，我们必须在Octopus类里定义一个只读成员 name和一个参数为 theName的构造函数，并且立刻将 theName的值赋给 name，这种情况经常会遇到。 参数属性可以方便地让我们在一个地方定义并初始化一个成员。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Octopus</span> &#123;</span><br><span class="line">    readonly <span class="attr">numberOfLegs</span>: number = <span class="number">8</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">readonly name: string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>注意看我们是如何舍弃了 theName，仅在构造函数里使用 readonly name: string参数来创建和初始化 name成员。 我们把声明和赋值合并至一处。</p>
<p>参数属性通过给构造函数参数前面添加一个访问限定符来声明。 使用 private限定一个参数属性会声明并初始化一个私有成员；对于 public和 protected来说也是一样。</p>
<h3 id="存取器"><a href="#存取器" class="headerlink" title="存取器"></a>存取器</h3><p>TypeScript支持通过getters/setters来截取对对象成员的访问。 它能帮助你有效的控制对对象成员的访问。<br>对于存取器有下面几点需要注意的：<br>首先，存取器要求你将编译器设置为输出ECMAScript 5或更高。 不支持降级到ECMAScript 3。 其次，只带有 get不带有 set的存取器自动被推断为 readonly。 这在从代码生成 .d.ts文件时是有帮助的，因为利用这个属性的用户会看到不允许够改变它的值。</p>
<h3 id="静态属性"><a href="#静态属性" class="headerlink" title="静态属性"></a>静态属性</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Grid</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> origin = &#123;<span class="attr">x</span>: <span class="number">0</span>, <span class="attr">y</span>: <span class="number">0</span>&#125;;</span><br><span class="line">    <span class="title function_">calculateDistanceFromOrigin</span>(<span class="params">point: &#123;x: number; y: number;&#125;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> xDist = (point.<span class="property">x</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">x</span>);</span><br><span class="line">        <span class="keyword">let</span> yDist = (point.<span class="property">y</span> - <span class="title class_">Grid</span>.<span class="property">origin</span>.<span class="property">y</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">Math</span>.<span class="title function_">sqrt</span>(xDist * xDist + yDist * yDist) / <span class="variable language_">this</span>.<span class="property">scale</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">constructor</span> (<span class="params">public scale: number</span>) &#123; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> grid1 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">1.0</span>);  <span class="comment">// 1x scale</span></span><br><span class="line"><span class="keyword">let</span> grid2 = <span class="keyword">new</span> <span class="title class_">Grid</span>(<span class="number">5.0</span>);  <span class="comment">// 5x scale</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid1.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(grid2.<span class="title function_">calculateDistanceFromOrigin</span>(&#123;<span class="attr">x</span>: <span class="number">10</span>, <span class="attr">y</span>: <span class="number">10</span>&#125;));</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>抽象类做为其它派生类的基类使用。 它们一般不会直接被实例化。 不同于接口，抽象类可以包含成员的实现细节。 abstract关键字是用于定义抽象类和在抽象类内部定义抽象方法。</p>
<p><strong>抽象类中的抽象方法不包含具体实现并且必须在派生类中实现</strong>。 抽象方法的语法与接口方法相似。 两者都是定义方法签名但不包含方法体。 然而，抽象方法必须包含 abstract关键字并且可以包含访问修饰符。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abstract <span class="keyword">class</span> <span class="title class_">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">public name: string</span>) &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printName</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Department name: &#x27;</span> + <span class="variable language_">this</span>.<span class="property">name</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    abstract <span class="title function_">printMeeting</span>(): <span class="keyword">void</span>; <span class="comment">// 必须在派生类中实现</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">AccountingDepartment</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Department</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>(<span class="string">&#x27;Accounting and Auditing&#x27;</span>); <span class="comment">// 在派生类的构造函数中必须调用 super()</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">printMeeting</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;The Accounting Department meets each Monday at 10am.&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">generateReports</span>(): <span class="keyword">void</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Generating accounting reports...&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">department</span>: <span class="title class_">Department</span>; <span class="comment">// 允许创建一个对抽象类型的引用</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">Department</span>(); <span class="comment">// 错误: 不能创建一个抽象类的实例</span></span><br><span class="line">department = <span class="keyword">new</span> <span class="title class_">AccountingDepartment</span>(); <span class="comment">// 允许对一个抽象子类进行实例化和赋值</span></span><br><span class="line">department.<span class="title function_">printName</span>();</span><br><span class="line">department.<span class="title function_">printMeeting</span>();</span><br><span class="line">department.<span class="title function_">generateReports</span>(); <span class="comment">// 错误: 方法在声明的抽象类中不存在</span></span><br></pre></td></tr></table></figure>
<h2 id="高级技巧"><a href="#高级技巧" class="headerlink" title="高级技巧"></a>高级技巧</h2><h3 id="构造函数"><a href="#构造函数" class="headerlink" title="构造函数"></a>构造函数</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> standardGreeting = <span class="string">&quot;Hello, there&quot;</span>;</span><br><span class="line">    <span class="attr">greeting</span>: string;</span><br><span class="line">    <span class="title function_">greet</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">greeting</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Hello, &quot;</span> + <span class="variable language_">this</span>.<span class="property">greeting</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title class_">Greeter</span>.<span class="property">standardGreeting</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeter1</span>: <span class="title class_">Greeter</span>;</span><br><span class="line">greeter1 = <span class="keyword">new</span> <span class="title class_">Greeter</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter1.<span class="title function_">greet</span>());</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeterMaker</span>: <span class="keyword">typeof</span> <span class="title class_">Greeter</span> = <span class="title class_">Greeter</span>;</span><br><span class="line">greeterMaker.<span class="property">standardGreeting</span> = <span class="string">&quot;Hey there!&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">greeter2</span>: <span class="title class_">Greeter</span> = <span class="keyword">new</span> <span class="title function_">greeterMaker</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(greeter2.<span class="title function_">greet</span>());</span><br></pre></td></tr></table></figure>
<h3 id="把类当做接口使用"><a href="#把类当做接口使用" class="headerlink" title="把类当做接口使用"></a>把类当做接口使用</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">x</span>: number;</span><br><span class="line">    <span class="attr">y</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">interface <span class="title class_">Point3</span>d <span class="keyword">extends</span> <span class="title class_">Point</span> &#123;</span><br><span class="line">    <span class="attr">z</span>: number;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> <span class="attr">point3d</span>: <span class="title class_">Point3</span>d = &#123;<span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript学习笔记-枚举</title>
    <url>/2019/11/28/Typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E6%9E%9A%E4%B8%BE/</url>
    <content><![CDATA[<p>使用枚举我们可以定义一些带名字的常量。 使用枚举可以清晰地表达意图或创建一组有区别的用例。 TypeScript支持数字的和基于字符串的枚举。</p>
<span id="more"></span>
<h3 id="数字枚举类型"><a href="#数字枚举类型" class="headerlink" title="数字枚举类型"></a>数字枚举类型</h3><p>会自动填充，如果为声明，默认值为0，也可以手动赋值，后续未声明的则自动递增</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ts</span></span><br><span class="line">enum <span class="title class_">Week</span> &#123;</span><br><span class="line">    <span class="title class_">Monday</span>,</span><br><span class="line">    <span class="title class_">Tuesday</span>,</span><br><span class="line">    <span class="title class_">Wednesday</span>,</span><br><span class="line">    <span class="title class_">Thursday</span>,</span><br><span class="line">    <span class="title class_">Friday</span>,</span><br><span class="line">    <span class="title class_">Saturday</span>,</span><br><span class="line">    <span class="title class_">Sunday</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>[<span class="number">0</span>] === <span class="string">&#x27;Monday&#x27;</span>)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>.<span class="property">Monday</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Week</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Week</span>) &#123;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Monday&quot;</span>] = <span class="number">0</span>] = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Tuesday&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Wednesday&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Thursday&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Friday&quot;</span>] = <span class="number">4</span>] = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Saturday&quot;</span>] = <span class="number">5</span>] = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Sunday&quot;</span>] = <span class="number">6</span>] = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Week</span> || (<span class="title class_">Week</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>[<span class="number">0</span>] === <span class="string">&#x27;Monday&#x27;</span>); <span class="comment">// true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>.<span class="property">Monday</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ts</span></span><br><span class="line">enum <span class="title class_">Week</span> &#123;</span><br><span class="line">    <span class="title class_">Monday</span> = <span class="number">1</span>,</span><br><span class="line">    <span class="title class_">Tuesday</span>,</span><br><span class="line">    <span class="title class_">Wednesday</span>,</span><br><span class="line">    <span class="title class_">Thursday</span>,</span><br><span class="line">    <span class="title class_">Friday</span> = <span class="number">8</span>,</span><br><span class="line">    <span class="title class_">Saturday</span>,</span><br><span class="line">    <span class="title class_">Sunday</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>[<span class="number">0</span>] === <span class="string">&#x27;Monday&#x27;</span>)</span><br><span class="line"><span class="comment">// javascript</span></span><br><span class="line"><span class="keyword">var</span> <span class="title class_">Week</span>;</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">Week</span>) &#123;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Monday&quot;</span>] = <span class="number">1</span>] = <span class="string">&quot;Monday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Tuesday&quot;</span>] = <span class="number">2</span>] = <span class="string">&quot;Tuesday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Wednesday&quot;</span>] = <span class="number">3</span>] = <span class="string">&quot;Wednesday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Thursday&quot;</span>] = <span class="number">4</span>] = <span class="string">&quot;Thursday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Friday&quot;</span>] = <span class="number">8</span>] = <span class="string">&quot;Friday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Saturday&quot;</span>] = <span class="number">9</span>] = <span class="string">&quot;Saturday&quot;</span>;</span><br><span class="line">    <span class="title class_">Week</span>[<span class="title class_">Week</span>[<span class="string">&quot;Sunday&quot;</span>] = <span class="number">10</span>] = <span class="string">&quot;Sunday&quot;</span>;</span><br><span class="line">&#125;)(<span class="title class_">Week</span> || (<span class="title class_">Week</span> = &#123;&#125;));</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Week</span>[<span class="number">0</span>] === <span class="string">&#x27;Monday&#x27;</span>); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h4 id="常数项和计算所得项"><a href="#常数项和计算所得项" class="headerlink" title="常数项和计算所得项"></a>常数项和计算所得项</h4><p>枚举项有两种类型：常数项和计算所得项。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="string">&#x27;blue&#x27;</span>.<span class="property">length</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>blue’.length为计算所得项。</p>
<p>如果紧接着计算所得项继续添加枚举项，会因为无法获得初始值而报错。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">enum <span class="title class_">Color</span> &#123;</span><br><span class="line">    <span class="title class_">Red</span>,</span><br><span class="line">    <span class="title class_">Green</span>,</span><br><span class="line">    <span class="title class_">Blue</span> = <span class="string">&#x27;blue&#x27;</span>.<span class="property">length</span>,</span><br><span class="line">    <span class="title class_">Grey</span> <span class="comment">// Enum member must have initializer.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串枚举"><a href="#字符串枚举" class="headerlink" title="字符串枚举"></a>字符串枚举</h3><p> 在一个字符串枚举里，每个成员都必须用字符串字面量，或另外一个字符串枚举成员进行初始化。<br> 由于字符串枚举没有自增长的行为，字符串枚举可以很好的序列化。<br> <figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> enum <span class="title class_">Direction</span> &#123;</span><br><span class="line">    <span class="title class_">Up</span> = <span class="string">&quot;UP&quot;</span>,</span><br><span class="line">    <span class="title class_">Down</span> = <span class="string">&quot;DOWN&quot;</span>,</span><br><span class="line">    <span class="title class_">Left</span> = <span class="string">&quot;LEFT&quot;</span>,</span><br><span class="line">    <span class="title class_">Right</span> = <span class="string">&quot;RIGHT&quot;</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Typescript学习笔记-类型推论</title>
    <url>/2019/12/01/Typescript%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%B1%BB%E5%9E%8B%E6%8E%A8%E8%AE%BA/</url>
    <content><![CDATA[<p>在Typescript里，如果没有明确指出类型的地方，类型推论会帮助提供类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="number">3</span>;</span><br></pre></td></tr></table></figure>
<p>变量x的类型被推断为数字。 这种推断发生在初始化变量和成员，设置默认参数值和决定函数返回值时。</p>
<h3 id="最佳通用类型"><a href="#最佳通用类型" class="headerlink" title="最佳通用类型"></a>最佳通用类型</h3><p>当需要从几个表达式中推断类型时候，会使用这些表达式的类型来推断出一个最合适的通用类型。</p>
<figure class="highlight typescript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = [<span class="number">0</span>, <span class="number">1</span>, <span class="literal">null</span>];</span><br></pre></td></tr></table></figure>

<p>为了推断x的类型，我们必须考虑所有元素的类型。 这里有两种选择： number和null。 计算通用类型算法会考虑所有的候选类型，并给出一个兼容所有候选类型的类型。</p>
<p>由于最终的通用类型取自候选类型，有些时候候选类型共享相同的通用类型，但是却没有一个类型能做为所有候选类型的类型。</p>
<h3 id="上下文类型"><a href="#上下文类型" class="headerlink" title="上下文类型"></a>上下文类型</h3><p>TypeScript类型推论也可能按照相反的方向进行。 这被叫做“按上下文归类”。按上下文归类会发生在表达式的类型与所处的位置相关时。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>TypeScript</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue SSR初探</title>
    <url>/2019/01/03/Vue-SSR%E5%88%9D%E6%8E%A2/</url>
    <content><![CDATA[<p>关于 Vue SSR（即Vue 的服务端渲染）大家应该都是有所耳闻，当然了，已经应用到项目中的也不在少数。官网也提供了一个大而全的demo，全家桶都用上了。但对于新手来说，会相对有点难度。本篇博客从一个最基本的 Vue SSR demo开始，通过逐步引入vue-router, vuex，用来学习 Vue SSR 相关的知识（node服务采用的是 egg，其实用express，用什么都可以。为什么用 egg, 不用nuxt, 此处埋点伏笔，O(∩_∩)O哈哈~）。<span id="more"></span></p>
<h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><ul>
<li>渲染 Vue 实例</li>
</ul>
<p>与 Vue SSR 官网一致，先体验下。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个 Vue 实例</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="string">`&lt;div&gt;Hello World&lt;/div&gt;`</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个renderer</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将 Vue 渲染为 HTML</span></span><br><span class="line">renderer.<span class="title function_">renderToString</span>(app, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (err) &#123;</span><br><span class="line">        <span class="keyword">throw</span> err;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在 2.5.0+，如果没有传入回调函数，则会返回 Promise：</span></span><br><span class="line">renderer.<span class="title function_">renderToString</span>(app).<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(html)</span><br><span class="line">&#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">error</span>(err)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>与服务器集成</li>
</ul>
<p>如开头所述，我们采用的是 egg。egg 项目创建就不再赘述，可参考 <a href="https://eggjs.org/zh-cn/intro/quickstart.html">egg 官网</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createRenderer</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Hello World&lt;/div&gt;&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        renderer.<span class="title function_">renderToString</span>(app).<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">            ctx.<span class="property">body</span> = html;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure>

<p>控制台的log为:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div data-server-rendered=<span class="string">&quot;true&quot;</span>&gt;<span class="title class_">Hello</span> <span class="title class_">World</span>&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>使用模板&amp;模板插值</li>
</ul>
<p>html模板：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    &#123;&#123;&#123;meta&#125;&#125;&#125;</span><br><span class="line">    <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--vue-ssr-outlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Node 服务端代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createRenderer</span>(&#123;</span><br><span class="line">    <span class="attr">template</span>: <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>).<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../public/template.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">template</span>: <span class="string">&#x27;&lt;div&gt;Hello World&lt;/div&gt;&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">const</span> context = &#123;</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;vue-ssr-demo&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: <span class="string">&#x27;&lt;meta name=&quot;description&quot; content=&quot;Vue.js 服务端渲染指南&quot;&gt;&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        renderer.<span class="title function_">renderToString</span>(app, context).<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">            ctx.<span class="property">body</span> = html;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure>

<p>渲染的结果为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Vue.js 服务端渲染指南&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue-ssr-demo<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">data-server-rendered</span>=<span class="string">&quot;true&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><h3 id="构建步骤"><a href="#构建步骤" class="headerlink" title="构建步骤"></a>构建步骤</h3><img src='./vue-ssr.png' style="display:block; margin: 0 auto;">

<blockquote>
<p>对于客户端应用程序和服务器应用程序，我们都要使用 webpack 打包 - 服务器需要「服务器 bundle」然后用于服务器端渲染(SSR)，而「客户端 bundle」会发送给浏览器，用于混合静态标记。</p>
</blockquote>
<h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title="项目目录结构"></a>项目目录结构</h3><p>此处非标准项目结构，仅为演示使用（所以这个结构一定是不规范的，😂）。<a href="https://github.com/jiaochunxiao/vue-ssr">代码地址</a></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── controller</span><br><span class="line">│   └── home.js</span><br><span class="line">├── router.js</span><br><span class="line">└── src</span><br><span class="line">    ├── App.vue</span><br><span class="line">    ├── app.js</span><br><span class="line">    ├── components</span><br><span class="line">    │   └── Header.vue</span><br><span class="line">    ├── entry-client.js</span><br><span class="line">    ├── entry-server.js</span><br><span class="line">    ├── index.html</span><br><span class="line">    ├── index.ssr.html</span><br><span class="line">    ├── webpack.base.conf.js</span><br><span class="line">    ├── webpack.client.conf.js</span><br><span class="line">    └── webpack.server.conf.js</span><br></pre></td></tr></table></figure>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> app;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = createApp;</span><br></pre></td></tr></table></figure>

<h3 id="entry-client-js"><a href="#entry-client-js" class="headerlink" title="entry-client.js"></a>entry-client.js</h3><p>客户端 entry 只需创建应用程序，并且将其挂载到 DOM 中：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> createApp = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">createApp</span>();</span><br><span class="line">app.$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="entry-server-js"><a href="#entry-server-js" class="headerlink" title="entry-server.js"></a>entry-server.js</h3><p>服务器 entry 使用 default export 导出函数，并在每次渲染中重复调用此函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> createApp = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = createApp;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="服务端代码"><a href="#服务端代码" class="headerlink" title="服务端代码"></a>服务端代码</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Vue</span> = <span class="built_in">require</span>(<span class="string">&#x27;vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundle = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../public/server.js&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：此处的renderer为 createBundleRenderer 方法的返回对象</span></span><br><span class="line"><span class="comment">// bundleRenderer.renderToString([context, callback]): ?Promise&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createBundleRenderer</span>(bundle, &#123;</span><br><span class="line">    <span class="attr">runInNewContext</span>: <span class="literal">false</span>, <span class="comment">// 推荐</span></span><br><span class="line">    <span class="attr">template</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../public/index.ssr.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">title</span>: <span class="string">&#x27;Vue ssr&#x27;</span>,</span><br><span class="line">                <span class="attr">meta</span>: <span class="string">&#x27;&lt;meta name=&quot;description&quot; content=&quot;Vue.js 服务端渲染指南&quot;&gt;&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">        &#125;);</span><br><span class="line">        renderer.<span class="title function_">renderToString</span>(app).<span class="title function_">then</span>(<span class="function"><span class="params">html</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(html);</span><br><span class="line">            ctx.<span class="property">body</span> = html;</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">error</span>(err);</span><br><span class="line">            ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">web</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure>
<p>最后渲染到浏览器的代码为：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用三花括号(triple-mustache)进行 HTML 不转义插值(non-HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;Vue.js 服务端渲染指南&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 使用双花括号(double-mustache)进行 HTML 转义插值(HTML-escaped interpolation) --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue ssr<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span> <span class="attr">data-server-rendered</span>=<span class="string">&quot;true&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">header</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Vue SSR<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">header</span>&gt;</span> <span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello Vue SSR<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;/public/client.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="加入路由"><a href="#加入路由" class="headerlink" title="加入路由"></a>加入路由</h2><p>现在将vue-router 引入我们的简单应用。创建一个 router.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="comment">// 异步组件引入，实现代码分割</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createRouter</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">        <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">        <span class="attr">routes</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/home.vue&#x27;</span>),</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">path</span>: <span class="string">&#x27;/about&#x27;</span>,</span><br><span class="line">                <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;./views/about.vue&#x27;</span>),</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后在app.js中引入router</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="comment">// 创建router实例</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="comment">// 注入 router 到 根 Vue实例</span></span><br><span class="line">        router,</span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; app, router &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>服务端入口 entry-server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// 通过返回一个 Promise，服务器等待函数和组件所有内容准备完毕后渲染</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>();</span><br><span class="line">        router.<span class="title function_">push</span>(context.<span class="property">url</span>);</span><br><span class="line">        <span class="comment">// router 等待异步组件和钩子函数解析完毕后</span></span><br><span class="line">        router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> matchedComponents = router.<span class="title function_">getMatchedComponents</span>();</span><br><span class="line">            <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">            <span class="keyword">if</span> (!matchedComponents.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span><br><span class="line">            <span class="title function_">resolve</span>(app);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端入口 entry-client.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; app, router &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    app.$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>服务端代码 home.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> bundle = <span class="built_in">require</span>(<span class="string">&#x27;../public/vue-ssr-server-bundle.json&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意：此处的renderer为 createBundleRenderer 方法的返回对象</span></span><br><span class="line"><span class="comment">// bundleRenderer.renderToString([context, callback]): ?Promise&lt;string&gt;</span></span><br><span class="line"><span class="keyword">const</span> renderer = <span class="built_in">require</span>(<span class="string">&#x27;vue-server-renderer&#x27;</span>).<span class="title function_">createBundleRenderer</span>(bundle, &#123;</span><br><span class="line">    <span class="attr">runInNewContext</span>: <span class="literal">false</span>, <span class="comment">// 推荐</span></span><br><span class="line">    <span class="attr">template</span>: fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>),</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">HomeController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> context = &#123;</span><br><span class="line">            <span class="attr">url</span>: ctx.<span class="property">request</span>.<span class="property">url</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Vue SSR&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: <span class="string">&#x27;&lt;meta name=&quot;description&quot; content=&quot;Vue.js 服务端渲染指南&quot;&gt;&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// return new Promise((resolve, reject) =&gt; &#123;</span></span><br><span class="line">        renderer.<span class="title function_">renderToString</span>(context, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="number">404</span>) &#123;</span><br><span class="line">                    ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.<span class="property">body</span> = html;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">web</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        ctx.<span class="property">body</span> = fs.<span class="title function_">readFileSync</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../public/index.html&#x27;</span>), <span class="string">&#x27;utf-8&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">about</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;about&#x27;</span>);</span><br><span class="line">        <span class="keyword">const</span> context = &#123;</span><br><span class="line">            <span class="attr">url</span>: ctx.<span class="property">request</span>.<span class="property">url</span>,</span><br><span class="line">            <span class="attr">title</span>: <span class="string">&#x27;Vue SSR&#x27;</span>,</span><br><span class="line">            <span class="attr">meta</span>: <span class="string">&#x27;&lt;meta name=&quot;description&quot; content=&quot;Vue.js 服务端渲染指南&quot;&gt;&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">        renderer.<span class="title function_">renderToString</span>(context, <span class="function">(<span class="params">err, html</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (err) &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">                <span class="keyword">if</span> (err.<span class="property">code</span> === <span class="number">404</span>) &#123;</span><br><span class="line">                    ctx.<span class="property">status</span> = <span class="number">404</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                ctx.<span class="property">status</span> = <span class="number">500</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            ctx.<span class="property">body</span> = html;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">HomeController</span>;</span><br></pre></td></tr></table></figure>

<h2 id="引入-vuex"><a href="#引入-vuex" class="headerlink" title="引入 vuex"></a>引入 vuex</h2><p>现在我们继续引入 vuex。我们都知道 vuex 是专门用来管理 vue 应用的状态的。</p>
<img src='./vuex.png' style="display:block; margin: 0 auto;">

<p>Vue SSR 的本质是，渲染应用程序的‘快照’，所以我们需要将应用程序依赖的一些异步数据，在渲染之前先预取和解析。</p>
<p>现在我们将数据放置到 Vue 程序的 store中。</p>
<p>store相关的文件参见项目 store 文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── actions.js</span><br><span class="line">├── getters.js</span><br><span class="line">├── index.js</span><br><span class="line">├── mutations.js</span><br><span class="line">└── types.js</span><br></pre></td></tr></table></figure>
<p>接下来修改 app.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./App.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createRouter &#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">&#x27;./store&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; sync &#125; <span class="keyword">from</span> <span class="string">&#x27;vuex-router-sync&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createApp</span>(<span class="params">ssrContext</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建router实例</span></span><br><span class="line">    <span class="keyword">const</span> router = <span class="title function_">createRouter</span>();</span><br><span class="line">    <span class="title function_">sync</span>(store, router);</span><br><span class="line">    <span class="keyword">const</span> app = <span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">        <span class="comment">// 注入 router 到 根 Vue实例</span></span><br><span class="line">        router,</span><br><span class="line">        store,</span><br><span class="line">        <span class="attr">render</span>: <span class="function"><span class="params">h</span> =&gt;</span> <span class="title function_">h</span>(<span class="title class_">App</span>),</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> &#123; app, router, store &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>服务端入口 entry-server.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createApp &#125; <span class="keyword">from</span> <span class="string">&#x27;./app&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> context =&gt; &#123;</span><br><span class="line">    <span class="comment">// 因为有可能会是异步路由钩子函数或组件，所以我们将返回一个 Promise，</span></span><br><span class="line">    <span class="comment">// 以便服务器能够等待所有的内容在渲染前，</span></span><br><span class="line">    <span class="comment">// 就已经准备就绪。</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, router, store &#125; = <span class="title function_">createApp</span>();</span><br><span class="line">        <span class="comment">// 设置服务端 router 位置</span></span><br><span class="line">        router.<span class="title function_">push</span>(context.<span class="property">url</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 等到router 将可能的异步组件和钩子函数解析完</span></span><br><span class="line">        router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> matchedComponents = router.<span class="title function_">getMatchedComponents</span>();</span><br><span class="line">            <span class="comment">// 匹配不到的路由，执行 reject 函数，并返回 404</span></span><br><span class="line">            <span class="keyword">if</span> (!matchedComponents.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="comment">// 匹配不到路由，执行 reject 函数，并返回404</span></span><br><span class="line">                <span class="keyword">return</span> <span class="title function_">reject</span>(&#123; <span class="attr">code</span>: <span class="number">404</span> &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">      </span><br><span class="line">            <span class="comment">// Promise 应该 resolve 应用程序实例，以便它可以渲染</span></span><br><span class="line">            <span class="comment">// 对所有匹配的路由组件调用 asyncData</span></span><br><span class="line">            <span class="title class_">Promise</span>.<span class="title function_">all</span>(matchedComponents.<span class="title function_">map</span>(<span class="function"><span class="params">Component</span> =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">if</span>(<span class="title class_">Component</span>.<span class="property">asyncData</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">Component</span>.<span class="title function_">asyncData</span>(&#123;</span><br><span class="line">                        store,</span><br><span class="line">                        <span class="attr">route</span>: router.<span class="property">currentRoute</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// 在所有预取钩子(preFetch hook) resolve 后，</span></span><br><span class="line">                <span class="comment">// store 现在已经填充入渲染应用程序所需的状态。</span></span><br><span class="line">                <span class="comment">// 将状态附加到上下文，并且 `template` 选项用于 renderer 时，</span></span><br><span class="line">                <span class="comment">// 状态将自动序列化为 `window.__INITIAL_STATE__`，并注入 HTML。</span></span><br><span class="line">                context.<span class="property">state</span> = store.<span class="property">state</span>;</span><br><span class="line">                <span class="title function_">resolve</span>(app);</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(reject);</span><br><span class="line">        &#125;, reject);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>客户端入口 entry-client.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="meta">&#x27;use strict&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; createApp &#125; = <span class="built_in">require</span>(<span class="string">&#x27;./app.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">mixin</span>(&#123;</span><br><span class="line">    <span class="title function_">beforeRouteUpdate</span>(<span class="params">to, <span class="keyword">from</span>, next</span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; asyncData &#125; = <span class="variable language_">this</span>.<span class="property">$options</span></span><br><span class="line">        <span class="keyword">if</span> (asyncData) &#123;</span><br><span class="line">            <span class="title function_">asyncData</span>(&#123;</span><br><span class="line">                <span class="attr">store</span>: <span class="variable language_">this</span>.<span class="property">$store</span>,</span><br><span class="line">                <span class="attr">route</span>: to,</span><br><span class="line">            &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">next</span>();</span><br><span class="line">            &#125;).<span class="title function_">catch</span>(next)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; app, router, store &#125; = <span class="title function_">createApp</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable language_">window</span>.<span class="property">__INITIAL_STATE__</span>) &#123;</span><br><span class="line">        store.<span class="title function_">replaceState</span>(<span class="variable language_">window</span>.<span class="property">__INITIAL_STATE__</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">onReady</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 添加路由钩子函数，用于处理 asyncData.</span></span><br><span class="line">    <span class="comment">// 在初始路由 resolve 后执行，</span></span><br><span class="line">    <span class="comment">// 以便我们不会二次预取(double-fetch)已有的数据。</span></span><br><span class="line">    <span class="comment">// 使用 `router.beforeResolve()`，以便确保所有异步组件都 resolve。</span></span><br><span class="line">    router.<span class="title function_">beforeResolve</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> matched = router.<span class="title function_">getMatchedComponents</span>(to);</span><br><span class="line">        <span class="keyword">const</span> prevMatched = router.<span class="title function_">getMatchedComponents</span>(<span class="keyword">from</span>);</span><br><span class="line">        <span class="keyword">let</span> diffed = <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">const</span> activated = matched.<span class="title function_">filter</span>(<span class="function">(<span class="params">c, i</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> diffed || (diffed = (prevMatched[i] !== c));</span><br><span class="line">        &#125;)</span><br><span class="line">        <span class="keyword">const</span> asyncDataHooks = activated.<span class="title function_">map</span>(<span class="function"><span class="params">c</span> =&gt;</span> c.<span class="property">asyncData</span>).<span class="title function_">filter</span>(<span class="function"><span class="params">_</span> =&gt;</span> _);</span><br><span class="line">        <span class="keyword">if</span> (!asyncDataHooks.<span class="property">length</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">next</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title class_">Promise</span>.<span class="title function_">all</span>(asyncDataHooks.<span class="title function_">map</span>(<span class="function"><span class="params">hook</span> =&gt;</span> <span class="title function_">hook</span>(&#123; store, <span class="attr">route</span>: to &#125;)))</span><br><span class="line">            .<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="title function_">next</span>();</span><br><span class="line">            &#125;)</span><br><span class="line">            .<span class="title function_">catch</span>(next);</span><br><span class="line">    &#125;)</span><br><span class="line">    app.$mount(<span class="string">&#x27;#app&#x27;</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>然后在我们的组件中使用 Home.vue</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;home-container&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HOME<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>&#123;&#123;count&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">&#x27;addCount&#x27;</span>&gt;</span>点击增加<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">&#x27;vuex&#x27;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="title function_">asyncData</span>(<span class="params">&#123; store &#125;</span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;action asyncData&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">return</span> store.<span class="title function_">dispatch</span>(<span class="string">&#x27;setInitCount&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 如果通过mapState方式，取值，始终是拿到的count为0，并不是 asyncData执行后的值</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// 有点诡异</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="comment">// computed: mapState([&#x27;count&#x27;]),</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">computed</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">count</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="property">state</span>.<span class="property">count</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="attr">methods</span>: &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="title function_">addCount</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">$store</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">            <span class="variable language_">this</span>.<span class="property">$store</span>.<span class="title function_">dispatch</span>(<span class="string">&#x27;increment&#x27;</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;,</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>然后我们就可以跑这个简单的集成了vue,vue-router,vuex的 ssr demo了。</p>
<img src='./demo.png' style="display:block; margin: 0 auto;">

<h2 id="Egg-Vue-服务端渲染"><a href="#Egg-Vue-服务端渲染" class="headerlink" title="Egg + Vue 服务端渲染"></a>Egg + Vue 服务端渲染</h2><p>在文章开始，说过了，我们为什么采用的 egg 作为服务端的应用的框架，而不是 Nuxt 呢。是因为目前我们在使用 egg 在做 node 服务开发，对于企业级的开发来讲，这种约定优于配置的开发原则，使得项目结构及其规范。同时，阿里的同学实现了一套基于webpack 的前端工程化方案： <a href="https://github.com/easy-team/easywebpack">easywebpack</a>，提供了Vue/Weex/React应用的一系列样板项目。<br>比如创建服务端渲染的 Vue 单页面应用，项目 app 结构为:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">├── controller</span><br><span class="line">│   └── app.js</span><br><span class="line">├── middleware</span><br><span class="line">│   └── access.js</span><br><span class="line">├── mocks</span><br><span class="line">│   └── article</span><br><span class="line">│       └── list.js</span><br><span class="line">├── router.js</span><br><span class="line">└── web</span><br><span class="line">    ├── asset</span><br><span class="line">    │   ├── css</span><br><span class="line">    │   │   └── bootstrap.min.css</span><br><span class="line">    │   └── images</span><br><span class="line">    │       ├── favicon.ico</span><br><span class="line">    │       ├── loading.gif</span><br><span class="line">    │       └── logo.png</span><br><span class="line">    ├── component</span><br><span class="line">    │   └── layout</span><br><span class="line">    │       └── app</span><br><span class="line">    │           ├── app.css</span><br><span class="line">    │           ├── content</span><br><span class="line">    │           │   ├── content.css</span><br><span class="line">    │           │   └── content.vue</span><br><span class="line">    │           ├── footer</span><br><span class="line">    │           │   ├── footer.css</span><br><span class="line">    │           │   └── footer.vue</span><br><span class="line">    │           ├── header</span><br><span class="line">    │           │   ├── header.css</span><br><span class="line">    │           │   └── header.vue</span><br><span class="line">    │           ├── index.vue</span><br><span class="line">    │           └── main.vue</span><br><span class="line">    ├── framework</span><br><span class="line">    │   ├── app.js</span><br><span class="line">    │   ├── utils</span><br><span class="line">    │   │   └── utils.js</span><br><span class="line">    │   └── vue</span><br><span class="line">    │       ├── directive</span><br><span class="line">    │       │   └── index.js</span><br><span class="line">    │       └── filter</span><br><span class="line">    │           └── index.js</span><br><span class="line">    ├── page</span><br><span class="line">    │   └── app</span><br><span class="line">    │       ├── index.js</span><br><span class="line">    │       ├── index.vue</span><br><span class="line">    │       ├── router</span><br><span class="line">    │       │   ├── detail.vue</span><br><span class="line">    │       │   ├── index.js</span><br><span class="line">    │       │   └── list.vue</span><br><span class="line">    │       └── store</span><br><span class="line">    │           ├── actions.js</span><br><span class="line">    │           ├── getters.js</span><br><span class="line">    │           ├── index.js</span><br><span class="line">    │           ├── mutation-type.js</span><br><span class="line">    │           └── mutations.js</span><br><span class="line">    └── view</span><br><span class="line">        └── layout.html</span><br></pre></td></tr></table></figure>

<p>可以使方便我们快速创建项目，并进行开发。当然，如果你想从零创建一个完整的 Vue SSR项目，也可以类似本篇博客这样，一点点的搭自己的模板。当然，本篇文章着重于实现简单的Vue SSR, 并未对于性能这块进行优化，大家可以慢慢在项目使用中不断踩坑，不断积累。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>ssr</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>egg.js接收前端文件处理</title>
    <url>/2019/03/22/egg-js%E6%8E%A5%E6%94%B6%E5%89%8D%E7%AB%AF%E6%96%87%E4%BB%B6%E5%A4%84%E7%90%86/</url>
    <content><![CDATA[
<p>最近在做一些项目，开始频繁的处理一些上传文件和导出excel的需求，现在就 egg.js 接收文件处理做一点简单的总结。</p>
<span id="more"></span>

<h2 id="File-模式"><a href="#File-模式" class="headerlink" title="File 模式"></a>File 模式</h2><ul>
<li>需要在 config 中启用 file 模式</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">multipart</span> = &#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;file&#x27;</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>上传/接收文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;mz/fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> file = ctx.<span class="property">request</span>.<span class="property">files</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">const</span> name = <span class="string">&#x27;egg-multipart-test/&#x27;</span> + path.<span class="title function_">basename</span>(file.<span class="property">filename</span>);</span><br><span class="line">        <span class="keyword">let</span> result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 处理文件，比如上传到云端</span></span><br><span class="line">            result = <span class="keyword">await</span> ctx.<span class="property">oss</span>.<span class="title function_">put</span>(name, file.<span class="property">filepath</span>);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 需要删除临时文件</span></span><br><span class="line">            <span class="keyword">await</span> fs.<span class="title function_">unlink</span>(file.<span class="property">filepath</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">url</span>: result.<span class="property">url</span>,</span><br><span class="line">            <span class="comment">// 获取所有的字段值</span></span><br><span class="line">            <span class="attr">requestBody</span>: ctx.<span class="property">request</span>.<span class="property">body</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<ul>
<li>上传 / 接收多个文件</li>
</ul>
<p>对于多文件， 通过 ctx.request.files 属性进行遍历，分别处理。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;mz/fs&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="keyword">class</span> <span class="title class_">extends</span> <span class="title class_">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">request</span>.<span class="property">body</span>);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">const</span> file <span class="keyword">of</span> ctx.<span class="property">request</span>.<span class="property">files</span>) &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;field: &#x27;</span> + file.<span class="property">fieldname</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;filename: &#x27;</span> + file.<span class="property">filename</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;encoding:&#x27;</span> + file.<span class="property">encoding</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mime:&#x27;</span> + file.<span class="property">mime</span>);</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;tmp filepath:&#x27;</span> + file.<span class="property">filepath</span>);</span><br><span class="line">            <span class="keyword">let</span> result;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                result = <span class="keyword">await</span> ctx.<span class="property">oss</span>.<span class="title function_">put</span>(<span class="string">&#x27;egg-multipart-test/&#x27;</span> + file.<span class="property">filename</span>, file.<span class="property">filepath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">await</span> fs.<span class="title function_">unlink</span>(file.<span class="property">filepath</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Stream模式"><a href="#Stream模式" class="headerlink" title="Stream模式"></a>Stream模式</h2><ul>
<li>上传接收单个文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&#x27;path&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> sendToWormhole = <span class="built_in">require</span>(<span class="string">&#x27;stream-wormhole&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploaderController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> stream = <span class="keyword">await</span> ctx.<span class="title function_">getFileStream</span>();</span><br><span class="line">        <span class="keyword">const</span> name = <span class="string">&#x27;egg-multipart-test/&#x27;</span> + path.<span class="title function_">basename</span>(stream.<span class="property">filename</span>);</span><br><span class="line">        <span class="comment">// 文件处理，上传到云存储等等</span></span><br><span class="line">        <span class="keyword">let</span> result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = <span class="keyword">await</span> ctx.<span class="property">oss</span>.<span class="title function_">put</span>(name, stream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">            <span class="comment">// 必须将上传的文件流消费掉，要不然浏览器响应会卡死</span></span><br><span class="line">            <span class="keyword">await</span> <span class="title function_">sendToWormhole</span>(stream);</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">        ctx.<span class="property">body</span> = &#123;</span><br><span class="line">            <span class="attr">url</span>: result.<span class="property">url</span>,</span><br><span class="line">            <span class="comment">// 所有表单字段都能通过 `stream.fields` 获取到</span></span><br><span class="line">            <span class="attr">fields</span>: stream.<span class="property">fields</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UploaderController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充</span></span><br><span class="line">stream = <span class="keyword">await</span> ctx.<span class="title function_">getFileStream</span>(&#123;</span><br><span class="line">    <span class="attr">requireFile</span>: <span class="literal">false</span>, <span class="comment">// 修复了，当没有文件上传时的报错</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> buffers = [];</span><br><span class="line"><span class="keyword">let</span> buffer;</span><br><span class="line"><span class="keyword">let</span> res;</span><br><span class="line"><span class="keyword">const</span> &#123; status, userName &#125; = stream.<span class="property">fields</span>;</span><br></pre></td></tr></table></figure>

<p><strong>通过 ctx.getFileStream 获取用户上传文件，需要满足两个条件：</strong></p>
<ul>
<li><p>只支持上传一个文件</p>
</li>
<li><p>上传文件必须在所有其他的fileds 后面，否则拿到文件流时可能还获取不到fields。</p>
</li>
<li><p>上传/接收多个文件</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sendToWormhole = <span class="built_in">require</span>(<span class="string">&#x27;stream-wormhole&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploaderController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> parts = ctx.<span class="title function_">multipart</span>();</span><br><span class="line">        <span class="keyword">let</span> part;</span><br><span class="line">        <span class="comment">// parts() 返回 promise 对象</span></span><br><span class="line">        <span class="keyword">while</span> ((part = <span class="keyword">await</span> <span class="title function_">parts</span>()) != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (part.<span class="property">length</span>) &#123;</span><br><span class="line">                <span class="comment">// 这是 busboy 的字段</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;field: &#x27;</span> + part[<span class="number">0</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;value: &#x27;</span> + part[<span class="number">1</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;valueTruncated: &#x27;</span> + part[<span class="number">2</span>]);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;fieldnameTruncated: &#x27;</span> + part[<span class="number">3</span>]);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (!part.<span class="property">filename</span>) &#123;</span><br><span class="line">                    <span class="comment">// 这时是用户没有选择文件就点击了上传(part 是 file stream，但是 part.filename 为空)</span></span><br><span class="line">                    <span class="comment">// 需要做出处理，例如给出错误提示消息</span></span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// part 是上传的文件流</span></span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;field: &#x27;</span> + part.<span class="property">fieldname</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;filename: &#x27;</span> + part.<span class="property">filename</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;encoding: &#x27;</span> + part.<span class="property">encoding</span>);</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;mime: &#x27;</span> + part.<span class="property">mime</span>);</span><br><span class="line">                <span class="comment">// 文件处理，上传到云存储等等</span></span><br><span class="line">                <span class="keyword">let</span> result;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    result = <span class="keyword">await</span> ctx.<span class="property">oss</span>.<span class="title function_">put</span>(<span class="string">&#x27;egg-multipart-test/&#x27;</span> + part.<span class="property">filename</span>, part);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">                    <span class="comment">// 必须将上传的文件流消费掉，要不然浏览器响应会卡死</span></span><br><span class="line">                    <span class="keyword">await</span> <span class="title function_">sendToWormhole</span>(part);</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;and we are done parsing the form!&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UploaderController</span>;</span><br></pre></td></tr></table></figure>
<h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> sendToWormhole = <span class="built_in">require</span>(<span class="string">&#x27;stream-wormhole&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">XLSX</span> = <span class="built_in">require</span>(<span class="string">&#x27;xlsx&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UploaderController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">uploadFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> stream = <span class="keyword">await</span> ctx.<span class="title function_">getFileStream</span>();</span><br><span class="line">            <span class="keyword">const</span> buffers = [];</span><br><span class="line">            <span class="keyword">const</span> &#123; type,userName &#125; = stream.<span class="property">fileds</span>;</span><br><span class="line">            <span class="keyword">let</span> res;</span><br><span class="line">            <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">                stream.<span class="title function_">on</span>(<span class="string">&#x27;data&#x27;</span>, <span class="function"><span class="params">chunk</span> =&gt;</span> &#123;</span><br><span class="line">                    buffers.<span class="title function_">push</span>(chunk);</span><br><span class="line">                &#125;).<span class="title function_">on</span>(<span class="string">&#x27;end&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">                    buffer = <span class="title class_">Buffer</span>.<span class="title function_">concat</span>(buffers);</span><br><span class="line">                    <span class="keyword">const</span> workbook = <span class="variable constant_">XLSX</span>.<span class="title function_">read</span>(buffer, &#123; <span class="attr">type</span>: <span class="string">&#x27;buffer&#x27;</span> &#125;);</span><br><span class="line">                    <span class="keyword">const</span> sheetName = workbook.<span class="property">SheetNames</span>;</span><br><span class="line">                    res = <span class="variable constant_">XLSX</span>.<span class="property">utils</span>.<span class="title function_">sheet_to_json</span>(workbook.<span class="property">Sheets</span>[sheetName], &#123;</span><br><span class="line">                        <span class="attr">raw</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">header</span>: <span class="number">1</span>,</span><br><span class="line">                    &#125;);</span><br><span class="line">                    <span class="title function_">resolve</span>();</span><br><span class="line">                &#125;).<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> err;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="comment">// 读取的文件数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">catch</span> (er) &#123;</span><br><span class="line">            <span class="keyword">throw</span> err;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>egg内置对象</title>
    <url>/2018/12/25/egg%E5%86%85%E7%BD%AE%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<p>egg内置基础对象，包括从 Koa 继承来的4个对象（Application，Context，Request，Response）以及框架扩展的一些对象（Controller，Service，Helper，Config，Logger）。<span id="more"></span></p>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><hr>
<p>Application 是全局应用对象，在一个应用中，只会实例化一个，它继承自  Koa.Application，在它上面我们可以挂在一些全局方法和对象。</p>
<h3 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h3><p>框架运行时，会在 Application 实例上触发一些事件，应用开发着或者插件开发者可以监听这些事件做一些操作。</p>
<ul>
<li><p>server: 该事件一个worker进程只会触发一次，在 HTTP 服务完成启动后，会将 HTTP server 通过这个事件暴露给开发者。</p>
</li>
<li><p>error: 运行时有任何异常被 onerror 插件捕获后，都会触发 error 事件，将错误对象和关联的上下文（如果有）暴露给开发者，可以进行自定义的日志记录上报等处理。</p>
</li>
<li><p>request 和 response: 应用收到请求和响应请求时，分别触发 request 和 response 事件，并将当前请求上下文暴露给开发者，可以监听这两个事件来进行日志记录。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">once</span>(<span class="string">&#x27;server&#x27;</span>, <span class="function"><span class="params">server</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">    &#125;);</span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;error&#x27;</span>, <span class="function">(<span class="params">err, ctx</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// log error</span></span><br><span class="line">    &#125;);</span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;request&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// log request</span></span><br><span class="line">    &#125;);</span><br><span class="line">    app.<span class="title function_">on</span>(<span class="string">&#x27;response&#x27;</span>, <span class="function"><span class="params">ctx</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// log response, if needed</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取方式"><a href="#获取方式" class="headerlink" title="获取方式"></a>获取方式</h3><p>Application 对象几乎可以在编写应用时的任何一个地方获取到，常用的获取方式：</p>
<p>几乎所有被框架 Loader 加载的文件（Controller, Service, Schedule等），都可以 export 一个函数，这个函数会被 Loader 调用，并使用 app 作为参数：</p>
<ul>
<li>启动自定义脚本</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="property">cache</span> = <span class="keyword">new</span> <span class="title class_">Cache</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Controller 文件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserControoler</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="variable language_">this</span>.<span class="property">app</span>.<span class="property">cache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和 Koa 一样，在 Context 对象上，可以通过 ctx.app 访问到 Application 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">body</span> = <span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">app</span>.<span class="property">cache</span>.<span class="title function_">get</span>(<span class="variable language_">this</span>.<span class="property">ctx</span>.<span class="property">query</span>.<span class="property">id</span>);</span><br><span class="line">        <span class="comment">// 对比上面，this.app this.ctx.app均可以访问</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在继承于 Controller, Service 基类的实例中，可以通过 this.app 访问到 Application 对象。</p>
<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><hr>
<p>Context 是一个请求级别的对象，继承自 Koa.Context。每一次收到用户请求时，框架会实例化一个 Context 对象，这个对象封装了本次用户请求的信息，并提供方法来获取请求参数或者设置响应信息。框架会将所有的 Service 挂载到 Context 实例上，一些插件也会将一些其他方法和对象挂载到它上面（egg-sequelize 会将所有的 model 挂载到 Context 上）。</p>
<h3 id="获取方式-1"><a href="#获取方式-1" class="headerlink" title="获取方式"></a>获取方式</h3><p>最常见的 Context 获取实例方式是在 Middleware，Controller以及Service中。<br>框架的 Middleware 同时支持 Koa v1 和 Koa v2两种不同的中间件写法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// koa v1</span></span><br><span class="line"><span class="keyword">function</span>* <span class="title function_">middleware</span>(<span class="params">next</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="keyword">yield</span> next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// koa v2</span></span><br><span class="line"><span class="keyword">async</span> <span class="keyword">function</span> <span class="title function_">middleware</span>(<span class="params">ctx, next</span>) &#123;</span><br><span class="line">    <span class="comment">// do something</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(ctx.<span class="property">query</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除了在请求时可以获取 Context 实例外，在非用户请求的场景下，如果需要访问 service / model 等 Context 实例上的对象，可以通过 Application.createAnonymousContext()方法创建一个匿名的 Context 实例</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">beforeStart</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = app.<span class="title function_">createAnonymousContext</span>();</span><br><span class="line">        <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">posts</span>.<span class="title function_">load</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>定时任务中每一个 task 都接受一个 Context 实例作为参数:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/schedule/refresh.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">task</span> = <span class="keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">    <span class="keyword">await</span> ctx.<span class="property">service</span>.<span class="property">posts</span>.<span class="title function_">refresh</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Request-amp-Response"><a href="#Request-amp-Response" class="headerlink" title="Request &amp; Response"></a>Request &amp; Response</h2><hr>
<p>Request 是一个请求级别的对象，继承自 Koa.Request。封装了 Node.js 原生的 HTTP Request对象，提供了一系列辅助方法获取 HTTP 请求常用参数。</p>
<p>Response 是一个请求级别的对象，继承自 Koa.Response。封装了 Node.js 原生的 HTTP Response对象，提供了一系列辅助方法设置 HTTP 响应。</p>
<h3 id="获取方式-2"><a href="#获取方式-2" class="headerlink" title="获取方式"></a>获取方式</h3><p>可以在 Context 的实例上获取到当前请求的 Request(ctx.request) 和 Response(ctx.response) 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> id = ctx.<span class="property">request</span>.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">        ctx.<span class="property">response</span>.<span class="property">body</span> = app.<span class="property">cache</span>.<span class="title function_">get</span>(id);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>Koa 会在 Context 上代理一部分 Request 和 Response 上的方法和属性，参见 Koa.Context。</li>
<li>如上面例子中的 ctx.request.query.id 和 ctx.query.id 是等价的，ctx.response.body= 和 ctx.body= 是等价的。</li>
<li>需要注意的是，获取 POST 的 body 应该使用 ctx.request.body，而不是 ctx.body。</li>
</ul>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h2><p>框架提供了一个 Controller 基类，并推荐所有的 Controller 都继承于该基类实现。这个 Controller 基类有下列属性：</p>
<ul>
<li>ctx - 当前请求的 Context 实例。</li>
<li>app - 应用的 Application 实例。</li>
<li>config - 应用的配置。</li>
<li>service - 应用所有的 service。</li>
<li>logger - 为当前 controller 封装的 logger 对象。</li>
</ul>
<p>在 Controller 文件中，可以通过两种方式来引用 Controller 基类：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="comment">// 从 egg 上获取（推荐）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Controller</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Controller</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="comment">// implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserController</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 app 实例上获取</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">app.Controller</span> &#123;</span><br><span class="line">        <span class="comment">// implement</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Service"><a href="#Service" class="headerlink" title="Service"></a>Service</h2><hr>
<p>框架提供了一个 Service 基类，并推荐所有的 Service 都继承于该基类实现。</p>
<p>Service 基类的属性和 Controller 基类属性一致，访问方式也类似：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/service/user.js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 egg 上获取（推荐）</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">Service</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Service</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Service</span> &#123;</span><br><span class="line">    <span class="comment">// implement</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="title class_">UserService</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 从 app 实例上获取</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">class</span> <span class="title class_">UserService</span> <span class="keyword">extends</span> <span class="title class_ inherited__">app.Service</span> &#123;</span><br><span class="line">        <span class="comment">// implement</span></span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h2><hr>
<p>Helper 用来提供一些实用的 utility 函数。它的作用在于我们可以将一些常用的动作抽离在 helper.js 里面成为一个独立的函数，这样可以用 JavaScript 来写复杂的逻辑，避免逻辑分散各处，同时可以更好的编写测试用例。</p>
<p>Helper 自身是一个类，有和 Controller 基类一样的属性，它也会在每次请求时进行实例化，因此 Helper 上的所有函数也能获取到当前请求相关的上下文信息。</p>
<h3 id="获取方式-3"><a href="#获取方式-3" class="headerlink" title="获取方式"></a>获取方式</h3><p>可以在 Context 的实例上获取到当前请求的 Helper(ctx.helper) 实例。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/user.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">UserController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">fetch</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> &#123; app, ctx &#125; = <span class="variable language_">this</span>;</span><br><span class="line">        <span class="keyword">const</span> id = ctx.<span class="property">query</span>.<span class="property">id</span>;</span><br><span class="line">        <span class="keyword">const</span> user = app.<span class="property">cache</span>.<span class="title function_">get</span>(id);</span><br><span class="line">        ctx.<span class="property">body</span> = ctx.<span class="property">helper</span>.<span class="title function_">formatUser</span>(user);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>除此之外，Helper 的实例还可以在模板中获取到，例如可以在模板中获取到 security 插件提供的 shtml 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/view/home.nj</span></span><br><span class="line">&#123;&#123; helper.<span class="title function_">shtml</span>(value) &#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义-helper-方法"><a href="#自定义-helper-方法" class="headerlink" title="自定义 helper 方法"></a>自定义 helper 方法</h3><p>应用开发中，我们可能经常要自定义一些 helper 方法，例如上面例子中的 formatUser，我们可以通过框架扩展的形式来自定义 helper 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/helper.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">formatUser</span>(<span class="params">user</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">only</span>(user, [ <span class="string">&#x27;name&#x27;</span>, <span class="string">&#x27;phone&#x27;</span> ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h2 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h2><p>推荐应用开发遵循配置和代码分离的原则，将一些需要硬编码的业务配置都放到配置文件中，同时配置文件支持各个不同的运行环境使用不同的配置，使用起来也非常方便，所有框架、插件和应用级别的配置都可以通过 Config 对象获取到。</p>
<h3 id="获取方式-4"><a href="#获取方式-4" class="headerlink" title="获取方式"></a>获取方式</h3><p>可以通过 app.config 从 Application 实例上获取到 config 对象，也可以在 Controller, Service, Helper 的实例上通过 this.config 获取到 config 对象。</p>
<h2 id="Logger"><a href="#Logger" class="headerlink" title="Logger"></a>Logger</h2><hr>
<p>框架内置了功能强大的日志功能，可以非常方便的打印各种级别的日志到对应的日志文件中，每一个 logger 对象都提供了 4 个级别的方法：</p>
<ul>
<li>logger.debug()</li>
<li>logger.info()</li>
<li>logger.warn()</li>
<li>logger.error()</li>
</ul>
<p>在框架中提供了多个 Logger 对象：</p>
<h3 id="App-Logger"><a href="#App-Logger" class="headerlink" title="App Logger"></a>App Logger</h3><p>可以通过 app.logger 来获取到它，如果想做一些应用级别的日志记录，如记录启动阶段的一些数据信息，记录一些业务上与请求无关的信息，都可以通过 App Logger 来完成。</p>
<h3 id="App-CoreLogger"><a href="#App-CoreLogger" class="headerlink" title="App CoreLogger"></a>App CoreLogger</h3><p>可以通过 app.coreLogger 来获取到它，一般在开发应用时都不应该通过 CoreLogger 打印日志，而框架和插件则需要通过它来打印应用级别的日志，这样可以更清晰的区分应用和框架打印的日志，通过 CoreLogger 打印的日志会放到和 Logger 不同的文件中。</p>
<h3 id="Context-Logger"><a href="#Context-Logger" class="headerlink" title="Context Logger"></a>Context Logger</h3><p>可以通过 ctx.logger 从 Context 实例上获取到它，从访问方式上可以看出来，Context Logger 一定是与请求相关的，它打印的日志都会在前面带上一些当前请求相关的信息（如 [$userId/$ip/$traceId/${cost}ms $method $url]），通过这些信息，可以从日志快速定位请求，并串联一次请求中的所有的日志。</p>
<h3 id="Context-CoreLogger"><a href="#Context-CoreLogger" class="headerlink" title="Context CoreLogger"></a>Context CoreLogger</h3><p>可以通过 ctx.coreLogger 获取到它，和 Context Logger 的区别是一般只有插件和框架会通过它来记录日志。</p>
<h3 id="Controller-Logger-amp-Service-Logger"><a href="#Controller-Logger-amp-Service-Logger" class="headerlink" title="Controller Logger &amp; Service Logger"></a>Controller Logger &amp; Service Logger</h3><p>可以在 Controller 和 Service 实例上通过 this.logger 获取到它们，它们本质上就是一个 Context Logger，不过在打印日志的时候还会额外的加上文件路径，方便定位日志的打印位置。</p>
<h1 id="Subscription"><a href="#Subscription" class="headerlink" title="Subscription"></a>Subscription</h1><hr>
<p>订阅模型是一种比较常见的开发模式，譬如消息中间件的消费者或调度任务。因此我们提供了 Subscription 基类来规范化这个模式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title class_">Subscription</span> = <span class="built_in">require</span>(<span class="string">&#x27;egg&#x27;</span>).<span class="property">Subscription</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Schedule</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Subscription</span> &#123;</span><br><span class="line">    <span class="comment">// 需要实现此方法</span></span><br><span class="line">    <span class="comment">// subscribe 可以为 async function 或 generator function</span></span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">subscribe</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>egg内置的HttpClient</title>
    <url>/2018/12/28/egg%E5%86%85%E7%BD%AE%E7%9A%84HttpClient/</url>
    <content><![CDATA[<h2 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h2><hr>
<p>最早做项目时，还不知道 egg 基于 urllib 内置实现了一个 HttpClient, 可以非常方便的完成任何 HTTP 请求。最近刚好有时间来看下 egg 的文档，就来聊聊 egg 内置的 HttpClient。<span id="more"></span></p>
<p>可以通过 app 使用 HttpClient，也可以通过 Context 使用 HttpClient。</p>
<p>框架在初始化时，自动将HttpClient 初始化到 app.httpclient，同时增加了一个 app.curl(url, options) 方法， 同 app.httpclient.request(url, options)是等价的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    app.<span class="title function_">beforeStart</span>(<span class="title function_">async</span> () =&gt; &#123;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> app.<span class="title function_">curl</span>(<span class="string">&#x27;https://registry.npm.taobao.org/egg/latest&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在 Context 中同样提供了 ctx.curl(url, options) 和 ctx.httpclient，使用方法同 app 下使用相同。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">index</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://registry.npm.taobao.org/egg/latest&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="基本HTTP请求"><a href="#基本HTTP请求" class="headerlink" title="基本HTTP请求"></a>基本HTTP请求</h2><h3 id="GET"><a href="#GET" class="headerlink" title="GET"></a>GET</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://httpbin.org/get?foo=bar&#x27;</span>);</span><br><span class="line">        ctx.<span class="property">status</span> = result.<span class="property">status</span>;</span><br><span class="line">        ctx.<span class="title function_">set</span>(result.<span class="property">headers</span>);</span><br><span class="line">        ctx.<span class="property">body</span> = result.<span class="property">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>GET 请求可以不用设置 options.methods, HttpClient 的默认 method 会设置为 GET。</li>
<li>返回值 result 会包含3个属性： status, headers, data<ul>
<li>status: 响应状态码，这个就是大家熟悉的 http 状态码： 200, 302, 404等；</li>
<li>headers: 响应头，类似 { ‘content-type’: ‘text/html’}</li>
<li>data: 响应body, 默认 HttpClient 不会做处理，直接返回 Buffer 类型数据。一旦设置了 options.dataType, HttpClient 会根据此参数对 data 进行处理。</li>
</ul>
</li>
</ul>
<h3 id="POST"><a href="#POST" class="headerlink" title="POST"></a>POST</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">post</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="comment">// 通过 contentType 告诉 HttpClient 以 JSON 格式发送数据</span></span><br><span class="line">            <span class="attr">contentType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">hello</span>: <span class="string">&#x27;world&#x27;</span>,</span><br><span class="line">                <span class="attr">now</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 明确告诉 HttpClient 以 JSON 格式处理响应 body</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="PUT"><a href="#PUT" class="headerlink" title="PUT"></a>PUT</h3><p>用法与 POST 类似，更加适合更新数据和替换数据的语义，除了 method 参数需要设置为 PUT，其他参数与 POST 几乎一致。</p>
<h3 id="DELETE"><a href="#DELETE" class="headerlink" title="DELETE"></a>DELETE</h3><p>删除数据会选择 DELETE 请求，通常不需要加请求 body, 但 HttpClient 不会限制。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">del</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://httpbin.org/delete&#x27;</span>, &#123;</span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;DELETE&#x27;</span>,</span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        ctx.<span class="property">body</span> = result.<span class="property">data</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="高级-HTTP-请求"><a href="#高级-HTTP-请求" class="headerlink" title="高级 HTTP 请求"></a>高级 HTTP 请求</h2><p>这部分主要是涉及到表单及文件上传相关的请求。</p>
<h3 id="Form-表单提交"><a href="#Form-表单提交" class="headerlink" title="Form 表单提交"></a>Form 表单提交</h3><p>面向浏览器的 Form 表单（不包含文件）的提交接口，通常都是以 content-type: application/x-www-form-urlencoded 的格式提交请求数据。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">submit</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 必须指定 method，支持 POST，PUT 和 DELETE</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="comment">// 不需要设置 contentType，HttpClient 会默认以 application/x-www-form-urlencoded 格式发送请求</span></span><br><span class="line">            <span class="attr">data</span>: &#123;</span><br><span class="line">                <span class="attr">now</span>: <span class="title class_">Date</span>.<span class="title function_">now</span>(),</span><br><span class="line">                <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span>,</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// 明确告诉 HttpClient 以 JSON 格式处理响应 body</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        ctx.<span class="property">body</span> = result.<span class="property">data</span>.<span class="property">form</span>;</span><br><span class="line">        <span class="comment">// 响应最终会是类似以下的结果：</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//   &quot;foo&quot;: &quot;bar&quot;,</span></span><br><span class="line">        <span class="comment">//   &quot;now&quot;: &quot;1483864184348&quot;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="以-Multipart-方式上传文件"><a href="#以-Multipart-方式上传文件" class="headerlink" title="以 Multipart 方式上传文件"></a>以 Multipart 方式上传文件</h3><p>当 From 表单提交包含文件的时候，请求数据格式，就必须以 multipart/form-data 进行提交。此时，需引入 fromstream 帮助我们生成可被 HttpClient 消费的 form 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FormStream</span> = <span class="built_in">require</span>(<span class="string">&#x27;formstream&#x27;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">upload</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="keyword">const</span> form = <span class="keyword">new</span> <span class="title class_">FormStream</span>();</span><br><span class="line">        <span class="comment">// 设置普通的 key value</span></span><br><span class="line">        form.<span class="title function_">field</span>(<span class="string">&#x27;foo&#x27;</span>, <span class="string">&#x27;bar&#x27;</span>);</span><br><span class="line">        <span class="comment">// 上传当前文件本身用于测试</span></span><br><span class="line">        form.<span class="title function_">file</span>(<span class="string">&#x27;file&#x27;</span>, __filename);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(<span class="string">&#x27;https://httpbin.org/post&#x27;</span>, &#123;</span><br><span class="line">            <span class="comment">// 必须指定 method，支持 POST，PUT</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="comment">// 生成符合 multipart/form-data 要求的请求 headers</span></span><br><span class="line">            <span class="attr">headers</span>: form.<span class="title function_">headers</span>(),</span><br><span class="line">            <span class="comment">// 以 stream 模式提交</span></span><br><span class="line">            <span class="attr">stream</span>: form,</span><br><span class="line">            <span class="comment">// 明确告诉 HttpClient 以 JSON 格式处理响应 body</span></span><br><span class="line">            <span class="attr">dataType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">        &#125;);</span><br><span class="line">        ctx.<span class="property">body</span> = result.<span class="property">data</span>.<span class="property">files</span>;</span><br><span class="line">        <span class="comment">// 响应最终会是类似以下的结果：</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//   &quot;file&quot;: &quot;&#x27;use strict&#x27;;\n\nconst For....&quot;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>可以继续通过 form.file() 添加更多文件以实现一次性上传多个文件的需求。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">form.<span class="title function_">file</span>(<span class="string">&#x27;file1&#x27;</span>, file1);</span><br><span class="line">form.<span class="title function_">file</span>(<span class="string">&#x27;file2&#x27;</span>, file2);</span><br></pre></td></tr></table></figure>

<h3 id="以-Stream-方式上传文件"><a href="#以-Stream-方式上传文件" class="headerlink" title="以 Stream 方式上传文件"></a>以 Stream 方式上传文件</h3><p>Stream 实际会以 Transfer-Encoding: Chunked 传输编码格式发送，这个转换是 HTTP 模块自动实现的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/controller/npm.js</span></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title class_">FormStream</span> = <span class="built_in">require</span>(<span class="string">&#x27;formstream&#x27;</span>);</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">NpmController</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Controller</span> &#123;</span><br><span class="line">    <span class="keyword">async</span> <span class="title function_">uploadByStream</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">const</span> ctx = <span class="variable language_">this</span>.<span class="property">ctx</span>;</span><br><span class="line">        <span class="comment">// 上传当前文件本身用于测试</span></span><br><span class="line">        <span class="keyword">const</span> fileStream = fs.<span class="title function_">createReadStream</span>(__filename);</span><br><span class="line">        <span class="comment">// httpbin.org 不支持 stream 模式，使用本地 stream 接口代替</span></span><br><span class="line">        <span class="keyword">const</span> url = <span class="string">`<span class="subst">$&#123;ctx.protocol&#125;</span>://<span class="subst">$&#123;ctx.host&#125;</span>/stream`</span>;</span><br><span class="line">        <span class="keyword">const</span> result = <span class="keyword">await</span> ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">            <span class="comment">// 必须指定 method，支持 POST，PUT</span></span><br><span class="line">            <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">            <span class="comment">// 以 stream 模式提交</span></span><br><span class="line">            <span class="attr">stream</span>: fileStream,</span><br><span class="line">        &#125;);</span><br><span class="line">        ctx.<span class="property">status</span> = result.<span class="property">status</span>;</span><br><span class="line">        ctx.<span class="title function_">set</span>(result.<span class="property">headers</span>);</span><br><span class="line">        ctx.<span class="property">body</span> = result.<span class="property">data</span>;</span><br><span class="line">        <span class="comment">// 响应最终会是类似以下的结果：</span></span><br><span class="line">        <span class="comment">// &#123;&quot;streamSize&quot;:574&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h2 id="Options-参数详解"><a href="#Options-参数详解" class="headerlink" title="Options 参数详解"></a>Options 参数详解</h2><h3 id="HttpClient-默认全局配置"><a href="#HttpClient-默认全局配置" class="headerlink" title="HttpClient 默认全局配置"></a>HttpClient 默认全局配置</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// config/config.default.js</span></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">httpclient</span> = &#123;</span><br><span class="line">    <span class="comment">// 是否开启本地 DNS 缓存，默认关闭，开启后有两个特性</span></span><br><span class="line">    <span class="comment">// 1. 所有的 DNS 查询都会默认优先使用缓存的，即使 DNS 查询错误也不影响应用</span></span><br><span class="line">    <span class="comment">// 2. 对同一个域名，在 dnsCacheLookupInterval 的间隔内（默认 10s）只会查询一次</span></span><br><span class="line">    <span class="attr">enableDNSCache</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 对同一个域名进行 DNS 查询的最小间隔时间</span></span><br><span class="line">    <span class="attr">dnsCacheLookupInterval</span>: <span class="number">10000</span>,</span><br><span class="line">    <span class="comment">// DNS 同时缓存的最大域名数量，默认 1000</span></span><br><span class="line">    <span class="attr">dnsCacheMaxLength</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">request</span>: &#123;</span><br><span class="line">        <span class="comment">// 默认 request 超时时间</span></span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">3000</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">httpAgent</span>: &#123;</span><br><span class="line">        <span class="comment">// 默认开启 http KeepAlive 功能</span></span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 空闲的 KeepAlive socket 最长可以存活 4 秒</span></span><br><span class="line">        <span class="attr">freeSocketTimeout</span>: <span class="number">4000</span>,</span><br><span class="line">        <span class="comment">// 当 socket 超过 30 秒都没有任何活动，就会被当作超时处理掉</span></span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">        <span class="comment">// 允许创建的最大 socket 数</span></span><br><span class="line">        <span class="attr">maxSockets</span>: <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>,</span><br><span class="line">        <span class="comment">// 最大空闲 socket 数</span></span><br><span class="line">        <span class="attr">maxFreeSockets</span>: <span class="number">256</span>,</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    <span class="attr">httpsAgent</span>: &#123;</span><br><span class="line">        <span class="comment">// 默认开启 https KeepAlive 功能</span></span><br><span class="line">        <span class="attr">keepAlive</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="comment">// 空闲的 KeepAlive socket 最长可以存活 4 秒</span></span><br><span class="line">        <span class="attr">freeSocketTimeout</span>: <span class="number">4000</span>,</span><br><span class="line">        <span class="comment">// 当 socket 超过 30 秒都没有任何活动，就会被当作超时处理掉</span></span><br><span class="line">        <span class="attr">timeout</span>: <span class="number">30000</span>,</span><br><span class="line">        <span class="comment">// 允许创建的最大 socket 数</span></span><br><span class="line">        <span class="attr">maxSockets</span>: <span class="title class_">Number</span>.<span class="property">MAX_SAFE_INTEGER</span>,</span><br><span class="line">        <span class="comment">// 最大空闲 socket 数</span></span><br><span class="line">        <span class="attr">maxFreeSockets</span>: <span class="number">256</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="data-Object"><a href="#data-Object" class="headerlink" title="data: Object"></a>data: Object</h4><ul>
<li>GET, HEAD: 通过querystring.stringify(data)处理后拼接到url的 query 参数上。</li>
<li>POST, PUT, DELETE等：需要根据 contentType 做进一步处理判断:<ul>
<li>contentTyp = json: 通过 JSON.stringify(data) 处理，并设置body 发送。</li>
<li>其他： 通过 querystring.stringify(data) 处理，并设置 body 发送。</li>
</ul>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// GET </span></span><br><span class="line">ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST </span></span><br><span class="line">ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// post + json + data</span></span><br><span class="line">ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">contentType</span>: <span class="string">&#x27;json&#x27;</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123; <span class="attr">foo</span>: <span class="string">&#x27;bar&#x27;</span> &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h4 id="dataAsQueryString-Boolean"><a href="#dataAsQueryString-Boolean" class="headerlink" title="dataAsQueryString: Boolean"></a>dataAsQueryString: Boolean</h4><p>如果 dataAsQueryString=true ,即使在 POST 情况下，也会强制 options.data 以 querystring.stringify 处理之后拼接到 url 的 query 参数上。</p>
<p>可以解决以 stream 发送数据，且额外的请求参数以 url query 形式传递的场景：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">dataAsQueryString</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">data</span>: &#123;,</span><br><span class="line">        <span class="attr">accessToken</span>: <span class="string">&#x27;some data&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">stream</span>: fileStream,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="content-String-Buffer"><a href="#content-String-Buffer" class="headerlink" title="content: String|Buffer"></a>content: String|Buffer</h4><p>发送请求正文，如若设置了此参数，会直接忽略 data 参数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="title function_">curl</span>(url, &#123;</span><br><span class="line">    <span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line">    <span class="attr">content</span>: <span class="string">&#x27;&lt;xml&gt;hello world&lt;/xml&gt;&#x27;</span>,</span><br><span class="line">    <span class="attr">headers</span>: &#123;</span><br><span class="line">        <span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;text/html&#x27;</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>egg框架扩展</title>
    <url>/2018/12/28/egg%E6%A1%86%E6%9E%B6%E6%89%A9%E5%B1%95/</url>
    <content><![CDATA[<p>egg框架提供了多种扩展点扩展自身的功能：</p>
<ul>
<li>Applictaion</li>
<li>Context</li>
<li>Request</li>
<li>Response</li>
<li>Helper<span id="more"></span>

</li>
</ul>
<h2 id="Application"><a href="#Application" class="headerlink" title="Application"></a>Application</h2><hr>
<p>app 对象指的是 Koa 的全局应用对象，全局只有一个，在启动时被创建。</p>
<h3 id="访问方式"><a href="#访问方式" class="headerlink" title="访问方式"></a>访问方式</h3><ul>
<li>ctx.app</li>
<li>Controller, MiddleWare, Helper, Service中都可以通过 this.app 访问到 Application 对象。</li>
<li>在 app.js 中 app 对象会作为第一个参数注入到入口函数中</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = <span class="function"><span class="params">app</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// app对象可访问</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="扩展方式"><a href="#扩展方式" class="headerlink" title="扩展方式"></a>扩展方式</h3><p>框架会把 app/extend/application.js 中定义的对象与 Koa Application 的 prototype 对象进行合并，在应用启动时会基于扩展后的 prototype生成 app 对象。可通过方法扩展和属性扩展。</p>
<p>一般来说属性的计算只需要进行一次，那么一定要实现缓存，否则在多次访问属性时会计算多次，这样会降低应用性能。</p>
<p>推荐的方式是使用 Symbol + Getter 的模式</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/application.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BAR</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Application#bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 方法扩展</span></span><br><span class="line">    <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="comment">// this 就是 app 对象</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性扩展</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">bar</span>() &#123;</span><br><span class="line">        <span class="comment">// this 就是 app 对象，在其中可以调用 app 上的其他方法，后访问属性</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>[<span class="variable constant_">BAR</span>]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">BAR</span>] = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">xx</span> + <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">yy</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable constant_">BAR</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><hr>
<p>Context 指的是 Koa 的请求上下文，这是 请求级别 的对象，每次请求生成一个 Context 实例，通常我们也简写成 ctx。在所有的文档中，Context 和 ctx 都是指 Koa 的上下文对象。</p>
<h3 id="访问方式："><a href="#访问方式：" class="headerlink" title="访问方式："></a>访问方式：</h3><ul>
<li>middleware 中的 this 就是 ctx 。例： this.cookies.get(‘foo’)。</li>
<li>controller 中有两种写法：类的写法通过 this.ctx，方法的写法直接通过 ctx 入参。</li>
<li>helper, service 中的 this 指向 helper， service 本身，使用 this.ctx 访问 context 对象。</li>
</ul>
<p>### 扩展方式</p>
<p>框架会把 app/extend/context.js 中定义的对象与 Koa Context 的 prototype 对象进行合并，在处理请求时会基于扩展后的 prototype 生成 ctx 对象。可通过方法扩展和属性扩展。</p>
<p>一般来说属性的计算在同一次请求中只需要进行一次，那么一定要实现缓存，否则在同一次请求中多次访问属性时会计算多次，这样会降低应用性能。</p>
<p>推荐的方式是使用 Symbol + Getter 的模式。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/context.js</span></span><br><span class="line"><span class="keyword">const</span> <span class="variable constant_">BAR</span> = <span class="title class_">Symbol</span>(<span class="string">&#x27;Application#bar&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="comment">// 方法扩展</span></span><br><span class="line">    <span class="title function_">doSomething</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// do something</span></span><br><span class="line">        <span class="comment">// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性。</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 属性扩展</span></span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">bar</span>() &#123;</span><br><span class="line">        <span class="comment">// this 就是 ctx 对象，在其中可以调用 ctx 上的其他方法，或访问属性</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="variable language_">this</span>[<span class="variable constant_">BAR</span>]) &#123;</span><br><span class="line">            <span class="variable language_">this</span>[<span class="variable constant_">BAR</span>] = <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">xx</span> + <span class="variable language_">this</span>.<span class="property">config</span>.<span class="property">yy</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>[<span class="variable constant_">BAR</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h2><hr>
<p>Request 对象和 Koa 的 Request 对象相同，是 请求级别 的对象，它提供了大量请求相关的属性和方法供使用。</p>
<h3 id="访问方式-1"><a href="#访问方式-1" class="headerlink" title="访问方式"></a>访问方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">request</span></span><br></pre></td></tr></table></figure>
<p>ctx 上很多属性和方法都代理到 request 对象上，对于这些属性和方法使用 ctx 和 使用 request 去访问是等价的。例： ctx.url === ctx.request.url.</p>
<h3 id="扩展方式-1"><a href="#扩展方式-1" class="headerlink" title="扩展方式"></a>扩展方式</h3><p>框架会把 app/extend/request.js 中定义的对象与内置的 request 的 prototype 对象进行合并，在处理请求时会基于扩展后的 prototype 生成 request 对象。</p>
<p>例如增加一个 request.foo 属性 getter:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/request.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="keyword">get</span> <span class="title function_">foo</span>() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">get</span>(<span class="string">&#x27;x-request-foo&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h2><hr>
<p>Response 对象和 Koa 的 Response 对象相同，是 请求级别 的对象，它提供了大量响应相关的属性和方法供使用。</p>
<h3 id="访问方式-2"><a href="#访问方式-2" class="headerlink" title="访问方式"></a>访问方式</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">ctx.<span class="property">response</span></span><br></pre></td></tr></table></figure>
<p>ctx 上的很多属性和方法都被代理到 response 对象上，对于这些属性和方法使用 ctx 和使用 response 去访问它们是等价的，例如 ctx.status = 404 和 ctx.response.status = 404 是等价的。</p>
<h3 id="扩展方式-2"><a href="#扩展方式-2" class="headerlink" title="扩展方式"></a>扩展方式</h3><p>框架会把 app/extend/response.js 中定义的对象与内置 response 的 prototype 对象进行合并，在处理请求时会基于扩展后的 prototype 生成 response 对象。</p>
<p>例如：增加一个 response.foo 属性 setter:</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/response.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="keyword">set</span> <span class="title function_">foo</span>(<span class="params">value</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">set</span>(<span class="string">&#x27;x-response-foo&#x27;</span>, value);</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>可以这样使用了：this.response.foo = ‘bar’;</p>
<h2 id="Helper"><a href="#Helper" class="headerlink" title="Helper"></a>Helper</h2><hr>
<p>Helper 函数用来提供一些实用的 utility 函数。</p>
<p>它的作用在于我们可以将一些常用的动作抽离在 helper.js 里面成为一个独立的函数，这样可以用 JavaScript 来写复杂的逻辑，避免逻辑分散各处。另外还有一个好处是 Helper 这样一个简单的函数，可以让我们更容易编写测试用例。</p>
<h3 id="访问方式-3"><a href="#访问方式-3" class="headerlink" title="访问方式"></a>访问方式</h3><p>通过 ctx.helper 访问 Helper 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 假设在 app/router.js 中定义了 home router</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;home&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;home.index&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 helper 计算指定 url path</span></span><br><span class="line">ctx.<span class="property">helper</span>.<span class="title function_">pathFor</span>(<span class="string">&#x27;home&#x27;</span>, &#123; <span class="attr">by</span>: <span class="string">&#x27;recent&#x27;</span>, <span class="attr">limit</span>: <span class="number">20</span> &#125;)</span><br><span class="line"><span class="comment">// =&gt; /?by=recent&amp;limit=20</span></span><br></pre></td></tr></table></figure>

<h3 id="扩展方式-3"><a href="#扩展方式-3" class="headerlink" title="扩展方式"></a>扩展方式</h3><p>框架会把 app/extend/helper.js 定义的对象与内置的 helper 的prototype 对象合并，在处理请求时会基于扩展后的 prototype 生成 helper 对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// app/extend/helper.js</span></span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="title function_">foo</span>(<span class="params">param</span>) &#123;</span><br><span class="line">        <span class="comment">// this 是 helper 对象，在其中可以调用其他 helper 方法</span></span><br><span class="line">        <span class="comment">// this.ctx =&gt; context 对象</span></span><br><span class="line">        <span class="comment">// this.app =&gt; application 对象</span></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Node.js</tag>
        <tag>egg</tag>
      </tags>
  </entry>
  <entry>
    <title>form表单相同文件多次点击上传不了的问题</title>
    <url>/2017/05/09/form%E8%A1%A8%E5%8D%95%E7%9B%B8%E5%90%8C%E6%96%87%E4%BB%B6%E5%A4%9A%E6%AC%A1%E4%B8%8A%E4%BC%A0%E7%9A%84%E4%B8%8D%E6%89%A7%E8%A1%8C%E4%B8%8A%E4%BC%A0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>利用 form 表单提交文件时，如果第一次上传失败，当你再次选择上次的文件时，发现 onchange 事件不能再次触发了，该如何解决呢？<span id="more"></span></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>).<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述代码，当我们多次都选择同一个文件的时候，会发现不再触发了 onchange 方法，因为只有文件改变才会触发 change 方法。<br>因此你只需在 onchange 方法中，将 input 的 value 值清空即可。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">document.getElementById(&#x27;test&#x27;).onchange = function(e)&#123;</span><br><span class="line">	//此处填写你需要执行的代码</span><br><span class="line"></span><br><span class="line">    this.value = &#x27;&#x27;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2015/11/25/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>linux常用命令学习(一)--ls</title>
    <url>/2016/04/12/linux/</url>
    <content><![CDATA[<h2 id="linux命令格式"><a href="#linux命令格式" class="headerlink" title="linux命令格式"></a>linux命令格式</h2><p>命令 [选项] [参数]</p>
<h2 id="第一条linux命令-ls"><a href="#第一条linux命令-ls" class="headerlink" title="第一条linux命令: ls"></a>第一条linux命令: ls</h2><p>ls是linux系统中最常用的命令之一。ls是list的缩写，用于显示目录下的文件的相关信息。<span id="more"></span></p>
<p>ls [选项] [文件]</p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-l</td>
<td align="center">除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来。</td>
</tr>
<tr>
<td>-a</td>
<td align="center">显示所有文件，包括隐藏文件</td>
</tr>
<tr>
<td>-d</td>
<td align="center">查看目录属性</td>
</tr>
<tr>
<td>-h</td>
<td align="center">人性化显示文件大小</td>
</tr>
</tbody></table>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">ls</span></span><br><span class="line">anaconda-ks.cfg              install.log.syslog       mongodb-linux-x86_64-3.2.4.gz   rar                        receiver.zip</span><br><span class="line">apache-tomcat-7.0.68.tar.gz  libmcrypt-2.5.8          node-v0.10.28-linux-x64         rarlinux-x64-5.3.0.tar.gz  tomcat7</span><br><span class="line">install.log                  libmcrypt-2.5.8.tar.bz2  node-v0.10.28-linux-x64.tar.gz  receiver                   tomcat7.rar</span><br><span class="line">[root@kvm45072 ~]# </span><br></pre></td></tr></table></figure>

<h3 id="ls-a"><a href="#ls-a" class="headerlink" title="ls -a"></a>ls -a</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">ls</span> -a</span><br><span class="line">.                            .bash_logout   install.log                    .mongorc.js                     receiver      tomcat7.rar</span><br><span class="line">..                           .bash_profile  install.log.syslog             node-v0.10.28-linux-x64         receiver.zip  .viminfo</span><br><span class="line">anaconda-ks.cfg              .bashrc        libmcrypt-2.5.8                node-v0.10.28-linux-x64.tar.gz  .ssh</span><br><span class="line">apache-tomcat-7.0.68.tar.gz  .cshrc         libmcrypt-2.5.8.tar.bz2        rar                             .tcshrc</span><br><span class="line">.bash_history                .dbshell       mongodb-linux-x86_64-3.2.4.gz  rarlinux-x64-5.3.0.tar.gz       tomcat7</span><br><span class="line">[root@kvm45072 ~]# </span><br></pre></td></tr></table></figure>
<h3 id="ls-l"><a href="#ls-l" class="headerlink" title="ls -l"></a>ls -l</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">ls</span> -l</span><br><span class="line">total 120032</span><br><span class="line">-rw-------. 1 root root     1922 Sep  2  2014 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--. 1 root root  8900822 Apr  6 20:03 apache-tomcat-7.0.68.tar.gz</span><br><span class="line">-rw-r--r--. 1 root root    56834 Sep  2  2014 install.log</span><br><span class="line">-rw-r--r--. 1 root root     8912 Sep  2  2014 install.log.syslog</span><br><span class="line">drwxrwxrwx. 9  500 adm      4096 Oct 24  2014 libmcrypt-2.5.8</span><br><span class="line">-rw-r--r--. 1 root root   875425 Oct 24  2014 libmcrypt-2.5.8.tar.bz2</span><br><span class="line">-rw-r--r--. 1 root root 56521914 Mar 28 11:15 mongodb-linux-x86_64-3.2.4.gz</span><br><span class="line">drwxr-xr-x. 6 root root     4096 May  2  2014 node-v0.10.28-linux-x64</span><br><span class="line">-rw-r--r--. 1 root root  5352773 Mar 16 13:50 node-v0.10.28-linux-x64.tar.gz</span><br><span class="line">drwxr-xr-x. 2 1000 1000     4096 Nov 18 17:21 rar</span><br><span class="line">-rw-r--r--. 1 root root  1149037 Mar 17 14:29 rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">drwxr-xr-x. 5 root root     4096 Apr  6 19:33 receiver</span><br><span class="line">-rw-r--r--. 1 root root    75521 Feb 26 18:22 receiver.zip</span><br><span class="line">drwxr-xr-x. 9 root root     4096 Apr  7 11:19 tomcat7</span><br><span class="line">-rw-r--r--. 1 root root 49923690 Sep 16  2015 tomcat7.rar</span><br></pre></td></tr></table></figure>

<h3 id="ls-al"><a href="#ls-al" class="headerlink" title="ls -al"></a>ls -al</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root@kvm45072 ~]# <span class="built_in">ls</span> -al</span><br><span class="line">total 120080</span><br><span class="line">dr-xr-x---.  8 root root     4096 Apr  7 11:43 .</span><br><span class="line">dr-xr-xr-x. 25 root root     4096 Mar 28 12:02 ..</span><br><span class="line">-rw-------.  1 root root     1922 Sep  2  2014 anaconda-ks.cfg</span><br><span class="line">-rw-r--r--.  1 root root  8900822 Apr  6 20:03 apache-tomcat-7.0.68.tar.gz</span><br><span class="line">-rw-------.  1 root root     6247 Apr  7 18:47 .bash_history</span><br><span class="line">-rw-r--r--.  1 root root       18 May 20  2009 .bash_logout</span><br><span class="line">-rw-r--r--.  1 root root      176 May 20  2009 .bash_profile</span><br><span class="line">-rw-r--r--.  1 root root      176 Sep 23  2004 .bashrc</span><br><span class="line">-rw-r--r--.  1 root root      100 Sep 23  2004 .cshrc</span><br><span class="line">-rw-r--r--.  1 root root     2206 Apr  5 21:43 .dbshell</span><br><span class="line">-rw-r--r--.  1 root root    56834 Sep  2  2014 install.log</span><br><span class="line">-rw-r--r--.  1 root root     8912 Sep  2  2014 install.log.syslog</span><br><span class="line">drwxrwxrwx.  9  500 adm      4096 Oct 24  2014 libmcrypt-2.5.8</span><br><span class="line">-rw-r--r--.  1 root root   875425 Oct 24  2014 libmcrypt-2.5.8.tar.bz2</span><br><span class="line">-rw-r--r--.  1 root root 56521914 Mar 28 11:15 mongodb-linux-x86_64-3.2.4.gz</span><br><span class="line">-rw-------.  1 root root        0 Mar 28 12:13 .mongorc.js</span><br><span class="line">drwxr-xr-x.  6 root root     4096 May  2  2014 node-v0.10.28-linux-x64</span><br><span class="line">-rw-r--r--.  1 root root  5352773 Mar 16 13:50 node-v0.10.28-linux-x64.tar.gz</span><br><span class="line">drwxr-xr-x.  2 1000 1000     4096 Nov 18 17:21 rar</span><br><span class="line">-rw-r--r--.  1 root root  1149037 Mar 17 14:29 rarlinux-x64-5.3.0.tar.gz</span><br><span class="line">drwxr-xr-x.  5 root root     4096 Apr  6 19:33 receiver</span><br><span class="line">-rw-r--r--.  1 root root    75521 Feb 26 18:22 receiver.zip</span><br><span class="line">drwx------.  2 root root     4096 Dec 18  2014 .ssh</span><br><span class="line">-rw-r--r--.  1 root root      129 Dec  4  2004 .tcshrc</span><br><span class="line">drwxr-xr-x.  9 root root     4096 Apr  7 11:19 tomcat7</span><br><span class="line">-rw-r--r--.  1 root root 49923690 Sep 16  2015 tomcat7.rar</span><br><span class="line">-rw-------.  1 root root      663 Apr  6 19:21 .viminfo</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下压缩/解压缩文件-zip</title>
    <url>/2016/08/30/linux%E4%B8%8B%E5%8E%8B%E7%BC%A9-%E8%A7%A3%E5%8E%8B%E7%BC%A9%E6%96%87%E4%BB%B6/</url>
    <content><![CDATA[<p>在日常工作中，经常用到压缩/解压缩文件，在windows中大家习惯了压缩解压软件，右键即可。在linux系统下，我们也可以利用zip/unzip，tar，rar/unrar等命令，非常方便快捷的对文件进行压缩和解压缩。今天就来看一下zip命令。<span id="more"></span></p>
<hr>
<h2 id="zip命令"><a href="#zip命令" class="headerlink" title="zip命令"></a>zip命令</h2><p>zip命令的功：，压缩文件</p>
<h3 id="命令格式"><a href="#命令格式" class="headerlink" title="命令格式"></a>命令格式</h3><p><strong>zip 选项 压缩文件.zip  文件</strong></p>
<h3 id="常用命令参数"><a href="#常用命令参数" class="headerlink" title="常用命令参数"></a>常用命令参数</h3><table>
<thead>
<tr>
<th>参数</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td>-d</td>
<td align="center">从压缩文件中删除指定文件。</td>
</tr>
<tr>
<td>-D</td>
<td align="center">压缩文件内不建立文件目录</td>
</tr>
</tbody></table>
<p><strong>未完待续</strong></p>
]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>module.exports和exports的区别</title>
    <url>/2020/10/27/module-exports%E5%92%8Cexports%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<blockquote>
<p>require方能看到的只有 module.exports 这个对象，它是看不到 exports 对象的，而我们在编写模块时用到的 exports 对象，实际上只是对 module.exports 的引用。</p>
</blockquote>
<span id="more"></span>

<p>以上引用自<a href="https://www.zhihu.com/question/26621212/answer/625539463">Node.js模块里exports与module.exports的区别?</a> 问题下 <a href="https://www.zhihu.com/people/xiaomingplus">小明plus</a>的回答。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">require</span>(<span class="params"><span class="comment">/* ... */</span></span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> <span class="variable language_">module</span> = &#123; <span class="attr">exports</span>: &#123;&#125; &#125;;</span><br><span class="line">  (<span class="function">(<span class="params"><span class="variable language_">module</span>, <span class="built_in">exports</span></span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// Module code here. In this example, define a function.</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">someFunc</span>(<span class="params"></span>) &#123;&#125;</span><br><span class="line">    <span class="built_in">exports</span> = someFunc;</span><br><span class="line">    <span class="comment">// At this point, exports is no longer a shortcut to module.exports, and</span></span><br><span class="line">    <span class="comment">// this module will still export an empty default object.</span></span><br><span class="line">    <span class="variable language_">module</span>.<span class="property">exports</span> = someFunc;</span><br><span class="line">    <span class="comment">// At this point, the module will now export someFunc, instead of the</span></span><br><span class="line">    <span class="comment">// default object.</span></span><br><span class="line">  &#125;)(<span class="variable language_">module</span>, <span class="variable language_">module</span>.<span class="property">exports</span>);</span><br><span class="line">  <span class="keyword">return</span> <span class="variable language_">module</span>.<span class="property">exports</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>module.exports</tag>
        <tag>exports</tag>
      </tags>
  </entry>
  <entry>
    <title>package.json指南</title>
    <url>/2020/10/28/package-json%E8%AF%A6%E8%A7%A3/</url>
    <content><![CDATA[<style type="text/css">
@media screen and (min-width: 768px) {
  img.package-cover {
    max-width: 400px;
  }
}
</style>
<!-- ![](/images/npm.png) -->
<img class="package-cover" src="/images/npm.png" />

<p>在日常开发工作中，相信大家对于 package.json 并不陌生，但对于 package.json的各属性的含义，是否都详细了解呢？如果对于它了如指掌了，那么可忽略本文。对于尚不太熟悉的人，请继续阅读。</p>
<p>对于应用程序，package.json 文件中的内容没有固定的要求。 唯一的要求是必须遵守 JSON 格式，否则，尝试以编程的方式访问其属性的程序则无法读取它。</p>
<blockquote>
<p>它必须是实际的JSON，而不仅仅是JavaScript对象文字。</p>
</blockquote>
<span id="more"></span>

<h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>选取了一个典型的package.json实例，<a href="https://github.com/vuejs/vue">vue</a>仓库的package.json:</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.6.12&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reactive, component-oriented view layer for modern web interfaces.&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/vue.runtime.common.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;module&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/vue.runtime.esm.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;unpkg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/vue.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;jsdelivr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/vue.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;typings&quot;</span><span class="punctuation">:</span> <span class="string">&quot;types/index.d.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;dist/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types/*.d.ts&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;sideEffects&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:cjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-runtime-cjs-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:esm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-runtime-esm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;karma start test/unit/karma.dev.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-server-renderer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-compiler &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:weex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:weex-framework&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:weex:factory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:weex-factory&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:weex:compiler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:weex-compiler &quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/build.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build -- web-runtime-cjs,web-server-renderer&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build:weex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build -- weex&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run lint &amp;&amp; flow check &amp;&amp; npm run test:types &amp;&amp; npm run test:cover &amp;&amp; npm run test:e2e -- --env phantomjs &amp;&amp; npm run test:ssr &amp;&amp; npm run test:weex&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:unit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;karma start test/unit/karma.unit.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:cover&quot;</span><span class="punctuation">:</span> <span class="string">&quot;karma start test/unit/karma.cover.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:e2e&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build -- web-full-prod,web-server-basic-renderer &amp;&amp; node test/e2e/runner.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:weex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build:weex &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/weex/jasmine.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build:ssr &amp;&amp; jasmine JASMINE_CONFIG_PATH=test/ssr/jasmine.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:sauce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run sauce -- 0 &amp;&amp; npm run sauce -- 1 &amp;&amp; npm run sauce -- 2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;test:types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tsc -p ./types/test/tsconfig.json&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;eslint src scripts test&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flow&quot;</span><span class="punctuation">:</span> <span class="string">&quot;flow check&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sauce&quot;</span><span class="punctuation">:</span> <span class="string">&quot;karma start test/unit/karma.sauce.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;bench:ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;npm run build:ssr &amp;&amp; node benchmarks/ssr/renderToString.js &amp;&amp; node benchmarks/ssr/renderToStream.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash scripts/release.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:weex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;bash scripts/release-weex.sh&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;release:note&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/gen-release-note.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git-cz&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;gitHooks&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;pre-commit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lint-staged&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commit-msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node scripts/verify-commit-msg.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;*.js&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">      <span class="string">&quot;eslint --fix&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="string">&quot;git add&quot;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;repository&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;git+https://github.com/vuejs/vue.git&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;author&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Evan You&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;license&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vuejs/vue/issues&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vuejs/vue#readme&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;@babel/core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-proposal-class-properties&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-syntax-dynamic-import&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-syntax-jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/plugin-transform-flow-strip-types&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/preset-env&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@babel/register&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^7.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^12.12.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;@types/webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.22&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;acorn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.2.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^10.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-helper-vue-jsx-merge-props&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-plugin-istanbul&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-plugin-transform-vue-jsx&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;babel-preset-flow-vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;buble&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chalk&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;chromedriver&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.45.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;codecov&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.9.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cross-spawn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^6.0.5&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cz-conventional-changelog&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;de-indent&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;es6-promise&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;escodegen&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.7.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-flowtype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.34.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;eslint-plugin-jasmine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.8.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;file-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;flow-bin&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.61.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;hash-sum&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;he&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;http-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.11.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jasmine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.99.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;jasmine-core&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.99.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-chrome-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-coverage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-firefox-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-jasmine&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-mocha-reporter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.2.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-phantomjs-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-safari-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-sauce-launcher&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-sourcemap-loader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0-rc.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lint-staged&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^8.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lodash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.17.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lodash.template&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.4.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lodash.uniq&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.5.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lru-cache&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^5.1.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nightwatch&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.9.16&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;nightwatch-helpers&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;phantomjs-prebuilt&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.1.14&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;puppeteer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.11.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.3&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-alias&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.3.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-buble&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.19.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-commonjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^9.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-flow-no-whitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^1.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-node-resolve&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^4.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;rollup-plugin-replace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;selenium-server&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.53.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;serialize-javascript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.1.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;shelljs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.8.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terser&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.10.2&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;typescript&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^3.6.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;webpack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~4.28.4&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weex-js-runtime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.23.6&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;weex-styler&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.3.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;yorkie&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.0.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;commitizen&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/cz-conventional-changelog&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="主要属性简介"><a href="#主要属性简介" class="headerlink" title="主要属性简介"></a>主要属性简介</h2><h3 id="name-✨"><a href="#name-✨" class="headerlink" title="name ✨"></a>name ✨</h3><blockquote>
<p>设置 npm包或者工程项目的名称。</p>
</blockquote>
<p>一些规则：</p>
<ul>
<li>名称必须少于214个字符，且不能包含空格，只能包含小写字母、连字符（-）或下划线（_）。</li>
<li>新包的名称不能有大写字母</li>
<li>名称最终成为URL的一部分、命令行上的参数和文件夹名称。因此，名称不能包含任何非url安全字符。</li>
</ul>
<p>一些tips:</p>
<ul>
<li>不要使用与 Node 核心模块相同的名称</li>
<li>不要在名称中加入 js 或 node。</li>
<li>名称可能作为参数传递给 require(), 因此它应该简短，但也具有合理的描述性。</li>
</ul>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;vue&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="author"><a href="#author" class="headerlink" title="author"></a>author</h3><blockquote>
<p>npm包或者工程项目的作者</p>
</blockquote>
<h3 id="contributors"><a href="#contributors" class="headerlink" title="contributors"></a>contributors</h3><blockquote>
<p>除作者外，该项目可以有一个或多个贡献者。此属性为数组结构。</p>
</blockquote>
<h3 id="version-✨"><a href="#version-✨" class="headerlink" title="version ✨"></a>version ✨</h3><blockquote>
<p>指定 npm包或者工程项目的当前版本。</p>
</blockquote>
<p>该属性遵循版本的语义版本控制记法，意味着该版本始终以3个数字表示： x.x.x</p>
<p>Version 必须能够被 <a href="https://github.com/npm/node-semver">node-semver</a> 解析。具体规范参考<a href="https://docs.npmjs.com/cli/v6/using-npm/semver">semver</a>。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.6.12&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="description-✨"><a href="#description-✨" class="headerlink" title="description ✨"></a>description ✨</h3><blockquote>
<p>对 npm包或者工程项目的简短描述。</p>
</blockquote>
<p>它将被展示在 npm search, 这有助于开发者发现你的 package。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Reactive, component-oriented view layer for modern web interfaces.&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="keywords-✨"><a href="#keywords-✨" class="headerlink" title="keywords ✨"></a>keywords ✨</h3><blockquote>
<p>设置关键字，它是一个字符串数组。</p>
</blockquote>
<p>它将被列出在 npm search，这有助于开发者发现你的 package。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;keywords&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;vue&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="homepage"><a href="#homepage" class="headerlink" title="homepage"></a>homepage</h3><blockquote>
<p>设置 npm包或者工程项目的主页，通常指向项目的readme。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;homepage&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://github.com/vuejs/vue#readme&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="bugs"><a href="#bugs" class="headerlink" title="bugs"></a>bugs</h3><blockquote>
<p>项目的问题跟踪的 url 或应该报告问题的电子邮件地址。</p>
</blockquote>
<p>这些对遇到您的软件包问题的人很有帮助。最常见的和上面的 vue 的类似，指向项目的 issues。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bugs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://github.com/owner/project/issues&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;project@hostname.com&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="licence-✨"><a href="#licence-✨" class="headerlink" title="licence ✨"></a>licence ✨</h3><blockquote>
<p>指定软件的许可证。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;licence&quot;</span><span class="punctuation">:</span> <span class="string">&quot;MIT&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>最流行的六开源许可证： GPL、BSD、MIT、Mozilla、Apache和 LGPL。</p>
<p>具体区分参考<a href="http://www.ruanyifeng.com/blog/2011/05/how_to_choose_free_software_licenses.html">如何选择开源许可证？</a></p>
<h3 id="funding"><a href="#funding" class="headerlink" title="funding"></a>funding</h3><blockquote>
<p>可以指定一个对象，其中包含一个URL，该URL提供有关帮助您的 package 开发的资金的最新信息（比较少看到😂），可以是一个字符串URL，也可以为数组。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;funding&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;individual&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http://example.com/donate&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;funding&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;patreon&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://www.patreon.com/my-account&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;funding&quot;</span><span class="punctuation">:</span> <span class="string">&quot;http://example.com/donate&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;funding&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;individual&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;http://example.com/donate&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="string">&quot;http://example.com/donateAlso&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;patreon&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;url&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;https://www.patreon.com/my-account&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<h3 id="files"><a href="#files" class="headerlink" title="files"></a>files</h3><blockquote>
<p>可选的 files 字段为一个文件模式数组，描述当你的 package 作为依赖被安装时要包含的选项。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;files&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;src&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;dist/*.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;types/*.d.ts&quot;</span></span><br><span class="line"><span class="punctuation">]</span></span><br></pre></td></tr></table></figure>

<p>文件模式遵循与 .gitignore相近的语法，但是表达的意义想法，它是指包含一个文件、目录或者 glob模式。</p>
<p>省略该字段，将使其默认为 [“*”]，意味着它将包含所有文件。</p>
<p>您还可以在包的根目录或子目录中提供.npmignore文件，它将防止包含文件。在包的根目录下，它不会覆盖“files”字段，但在子目录中会覆盖。npmignore文件就像.gitignore一样工作。如果有一个.gitignore文件，并且丢失了.npmignore，那么.gitignore的内容将被使用。</p>
<p>包含在 “package.json#file” 中的文件，不能通过.npmignore或.gitignore排除。</p>
<h3 id="main"><a href="#main" class="headerlink" title="main"></a>main</h3><blockquote>
<p>设置 package 的入口。</p>
</blockquote>
<p>当在应用程序中导入此 package 时，应用程序会在该位置搜索模块的导出。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;main&quot;</span><span class="punctuation">:</span> <span class="string">&quot;dist/vue.runtime.common.js&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="browserslist"><a href="#browserslist" class="headerlink" title="browserslist"></a>browserslist</h3><blockquote>
<p>如果你的 package 用于浏览器端，该字段用于说明，你的 package 支持的浏览器及其版本</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;Android &gt;= 7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;IOS &gt;= 11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Safari &gt;= 11&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Chrome &gt;= 49&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Firefox &gt;= 31&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;Samsung &gt;= 5&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下配置说明需要支持使用率超过 %1的所有浏览器的最新的两个主版本，但不包含 IE8 及更低版本。</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;browserslist&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="string">&quot;&gt; 1%&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;last 2 versions&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="string">&quot;not ie &lt;= 8&quot;</span></span><br><span class="line">  <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="scripts-✨"><a href="#scripts-✨" class="headerlink" title="scripts ✨"></a>scripts ✨</h3><blockquote>
<p>scripts 指定了运行脚本命令的 npm 命令行的缩写。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;dev&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-full-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:cjs&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-runtime-cjs-dev&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:esm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-runtime-esm&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:test&quot;</span><span class="punctuation">:</span> <span class="string">&quot;karma start test/unit/karma.dev.config.js&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;dev:ssr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;rollup -w -c scripts/config.js --environment TARGET:web-server-renderer&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="bin"><a href="#bin" class="headerlink" title="bin"></a>bin</h3><blockquote>
<p>bin项用来指定各个内部命令对应的可执行文件的位置。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;bin&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;someTool&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./bin/someTool.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>上面代码指定，someTool 命令对应的可执行文件为 bin 子目录下的 someTool.js。Npm会寻找这个文件，在node_modules/.bin/目录下建立符号链接。在上面的例子中，someTool.js会建立符号链接node_modules/.bin/someTool。由于node_modules/.bin/目录会在运行时加入系统的PATH变量，因此在运行npm时，就可以不带路径，直接通过命令来调用这些脚本。</p>
<p>因此，像下面这样的写法可以采用简写。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;./node_modules/bin/someTool.js build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 简写为</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;someTool build&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>所有node_modules/.bin/目录下的命令，都可以用npm run [命令]的格式运行。在命令行下，键入npm run，然后按tab键，就会显示所有可以使用的命令。</p>
<h3 id="config"><a href="#config" class="headerlink" title="config"></a>config</h3><blockquote>
<p>config 对象可以用来设置 package 脚本中使用的配置参数。</p>
</blockquote>
<p>比如，一个 package 有如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;foo&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;config&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;port&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8080&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span> <span class="string">&quot;node server.js&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>然后，在 server.js 脚本中可引用 config字段的值：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">http</span><br><span class="line">  .<span class="title function_">createServer</span>(...)</span><br><span class="line">  .<span class="title function_">listen</span>(process.<span class="property">env</span>.<span class="property">npm_package_config_port</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然用户可通过执行 npm config set foo:port 8001 来覆盖。</p>
<h3 id="dependencies"><a href="#dependencies" class="headerlink" title="dependencies"></a>dependencies</h3><blockquote>
<p>dependencies 字段指定了项目运行依赖的模块。</p>
</blockquote>
<p>该对象的各个成员分别有模块名和对应的版本组成，表示依赖模块及其版本范围。版本范围遵循<a href="https://docs.npmjs.com/cli/v6/using-npm/semver">semver</a></p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;devDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;browserify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~13.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;karma-browserify&quot;</span><span class="punctuation">:</span> <span class="string">&quot;~5.0.1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<p>请不要在依赖对象中放置测试用例或者转译器。</p>
<h3 id="devDependencies"><a href="#devDependencies" class="headerlink" title="devDependencies"></a>devDependencies</h3><p>devDependencies 字段指定了项目开发所需要的模块。</p>
<p>该对象的各个成员分别有模块名和对应的版本组成，表示依赖模块及其版本范围。版本范围遵循<a href="https://docs.npmjs.com/cli/v6/using-npm/semver">semver</a></p>
<h3 id="peerDependencies"><a href="#peerDependencies" class="headerlink" title="peerDependencies"></a>peerDependencies</h3><p>该字段用来供插件指定去所需要的主工具的版本。</p>
<blockquote>
<p>peerDependencies的目的是提示宿主环境去安装满足插件peerDependencies所指定依赖的包，然后在插件import或者require所依赖的包的时候，永远都是引用宿主环境统一安装的npm包，最终解决插件与所依赖包不一致的问题。</p>
</blockquote>
<p>举例，我们使用 element-ui, element-ui的 package.json中有如下配置：</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;peerDependencies&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;vue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^2.5.17&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>它要求宿主环境安装指定版本的 vue 版本。</p>
<h3 id="private"><a href="#private" class="headerlink" title="private"></a>private</h3><blockquote>
<p>如果设置为 true，则可以防止应用程序/软件包被意外发布到 npm 上。</p>
</blockquote>
<h3 id="engines"><a href="#engines" class="headerlink" title="engines"></a>engines</h3><blockquote>
<p>设置此 package 或 项目要运行的 Node.js 或其他命令的版本。</p>
</blockquote>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;engines&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;node&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;= 6.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;npm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&gt;= 3.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;yarn&quot;</span><span class="punctuation">:</span> <span class="string">&quot;^0.13.0&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>本片文章介绍了日常使用中使用频率较高的属性描述，如需查看全部属性，可查阅<a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json">package.json</a></p>
<p><strong>参考</strong></p>
<ol>
<li><a href="http://nodejs.cn/learn">node.js入门教程</a></li>
<li><a href="https://docs.npmjs.com/cli/v6/configuring-npm/package-json">package.json</a></li>
<li><a href="https://javascript.ruanyifeng.com/nodejs/packagejson.html">package.json文件</a></li>
<li><a href="https://www.cnblogs.com/wonyun/p/9692476.html">探讨npm依赖管理之peerDependencies</a></li>
</ol>
]]></content>
      <categories>
        <category>Node.js</category>
      </categories>
      <tags>
        <tag>package.json</tag>
      </tags>
  </entry>
  <entry>
    <title>React学习笔记(1)</title>
    <url>/2016/02/05/react-1/</url>
    <content><![CDATA[<h2 id="1-React"><a href="#1-React" class="headerlink" title="1 React"></a>1 React</h2><p>React是什么东西呢？引用官网的介绍:’一个用来构建用户界面的javascript库’。React起源于FaceBook的内部项目，由于其技术团队对于所有的Javascript MVC框架都不满意，就开发了React。目前应用于FaceBook及Instagram,并在2013年5月开源了。<span id="more"></span>对于前端的发展来看，已经不能说是新技术了，只是在国内的关注及使用来看，太慢了。好了闲言碎语不多讲，咱们就开说了。</p>
<h2 id="2-browser-js和JSXTansformer-js"><a href="#2-browser-js和JSXTansformer-js" class="headerlink" title="2 browser.js和JSXTansformer.js"></a>2 browser.js和JSXTansformer.js</h2><blockquote>
<p>JSX语法，像是在Javascript代码里直接写XML的语法，实质上这只是一个语法糖，每一个XML标签都会被JSX转换工具转换成纯Javascript代码，React 官方推荐使用JSX， 当然你想直接使用纯Javascript代码写也是可以的，只是使用JSX，组件的结构和组件之间的关系看上去更加清晰。</p>
</blockquote>
<p>要把带有JSX语法的代码转化为纯Javascript代码，有多种方式,对于内联与HTML中的代码或者是未经过转化的外部文件:(1)在script标签中要加上type=”text/babel”，并引入browser.js文件即可;(2) 在script标签中要加上type=”text/jsx”，并引入JSXTransformer.js文件。</p>
<h3 id="2-1-browser-js："><a href="#2-1-browser-js：" class="headerlink" title="2.1 browser.js："></a>2.1 browser.js：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;build/browser.min.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入brower.min.js，注意代码type类型：<strong>type=”text/babel</strong>“</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/babel&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ** Our code goes here! **</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="2-2-JSXTransformer-js："><a href="#2-2-JSXTransformer-js：" class="headerlink" title="2.2 JSXTransformer.js："></a>2.2 JSXTransformer.js：</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span> <span class="attr">src</span>=<span class="string">&quot;build/JSXTransformer.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>引入 JSXTransformer.js, 可以将包裹在<script type="text/jsx"></script>标签中的JSX代码，在浏览器里实现代码转换,不过这种方式并不建议在生产环境使用，建议的方法是在代码上线前就将代码转换好。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/jsx&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="comment">// ** Our code goes here! **</span></span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>下面的命令用于将src目录中的js文件转换成标准的js文件，并放在build文件中。此时，可在html文件中，利用<script type="text/javascript" src="build/helloworld.js"></script>“引入build文件中的js文件。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install -g react-tools</span><br><span class="line">$ jsx --watch src/ build/</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>react技术栈相关</title>
    <url>/2018/12/17/react%E6%8A%80%E6%9C%AF%E6%A0%88%E7%9B%B8%E5%85%B3/</url>
    <content><![CDATA[<img src='/images/post/react.jpeg' style="display:block; margin: 0 auto;">
<span id="more"></span>
## React

<h3 id="React方法绑定，实现在类定义的组件中绑定this上下文效果"><a href="#React方法绑定，实现在类定义的组件中绑定this上下文效果" class="headerlink" title="React方法绑定，实现在类定义的组件中绑定this上下文效果"></a>React方法绑定，实现在类定义的组件中绑定this上下文效果</h3><h4 id="bind方法"><a href="#bind方法" class="headerlink" title="bind方法"></a>bind方法</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params">e, arg</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e, arg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick.bind(this,</span> &#x27;<span class="attr">test</span>&#x27;)&#125;&gt;</span>Test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="构造器内声明"><a href="#构造器内声明" class="headerlink" title="构造器内声明"></a>构造器内声明</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">props</span>)&#123;</span><br><span class="line">        <span class="variable language_">super</span>(props);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">handleClick</span> = <span class="variable language_">this</span>.<span class="property">handleClick</span>.<span class="title function_">bind</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="title function_">handleClick</span> = (<span class="params">e</span>) =&gt; &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleClick&#125;</span>&gt;</span>Test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// or，可传递参数 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; <span class="title class_">Component</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">App</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Component</span> &#123;</span><br><span class="line">    <span class="title function_">handleClick</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">render</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="language-xml"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;(e)</span> =&gt;</span> this.handleClick(e)&#125;&gt;Test<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="React组件生命周期"><a href="#React组件生命周期" class="headerlink" title="React组件生命周期"></a>React组件生命周期</h3><h4 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h4><p>当组件实例被创建并插入DOM时，其生命周期调用顺序如下：</p>
<ul>
<li>constructor()</li>
<li>static getDerivedStateFromProps()</li>
<li>render()</li>
<li>componentDidMount()</li>
</ul>
<blockquote>
<p>componentWillMount 即将过时，避免使用。</p>
</blockquote>
<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>当组件的 props 或 state 发生变化时触发更新，组件生命周期调用顺序如下：</p>
<ul>
<li>static getDerivedStateFromProps()</li>
<li>shouldComponentUpdate()</li>
<li>render()</li>
<li>getSnapshotBeforeUpdate()</li>
<li>componentDidUpdate()</li>
</ul>
<h4 id="卸载"><a href="#卸载" class="headerlink" title="卸载"></a>卸载</h4><p>当组件从DOM中移除时会调用如下方法：</p>
<ul>
<li>componentWillUnmount()</li>
</ul>
<h4 id="错误处理"><a href="#错误处理" class="headerlink" title="错误处理"></a>错误处理</h4><p>当渲染过程，生命周期，或子组件函的构造函数中抛出错误时，会调用如下方法：</p>
<ul>
<li>static getDerivedStateFromError()</li>
<li>componentDidCatch()</li>
</ul>
<h2 id="Reudx"><a href="#Reudx" class="headerlink" title="Reudx"></a>Reudx</h2><h3 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h3><p>store 是保存数据的地方，整个应用只能有一个 store。</p>
<p>Redux 提供了 createStore 方法来生成 store。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer); <span class="comment">// 要想生成 store， 必须传入一个 reducer.</span></span><br></pre></td></tr></table></figure>

<h3 id="State"><a href="#State" class="headerlink" title="State"></a>State</h3><p>Store 对象包含所有的数据。如果想得到某个时间点的数据，就要对 Store 生成快照。这种时点的数据集合，就叫 State。<br>获取当前时刻的 State，通过 Store.getState() 得到。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = store.<span class="title function_">getState</span>();</span><br></pre></td></tr></table></figure>
<p>Redux 规定，一个 State 对应一个 View, 只要 State 相同， View 就相同。反之亦然、</p>
<h3 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h3><p>State 变化会导致 View 变化。但用户接触不到 State，只能接触到 View。所以 State 变化必须是 View 导致的。 Action 就是 View 发出的通知，表示 State 要发生变化了。<br>Action 是一个对象，其中 type 属性是必须的，表示 Action 的名称。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> action = &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD_TODO&#x27;</span>,</span><br><span class="line">    <span class="attr">payload</span>: <span class="string">&#x27;Learn Redux&#x27;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
<p>改变 State 唯一的办法，就是使用 Action。</p>
<h3 id="Action-Creator"><a href="#Action-Creator" class="headerlink" title="Action Creator"></a>Action Creator</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="variable constant_">ADD_TODO</span> = <span class="string">&#x27;添加TODO&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">addTodo</span>(<span class="params">text</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        <span class="attr">type</span>: <span class="variable constant_">ADD_TODO</span>,</span><br><span class="line">        text</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> action = <span class="title function_">addTodo</span>(<span class="string">&#x27;Learn Redux&#x27;</span>);</span><br></pre></td></tr></table></figure>

<h3 id="store-dispatch"><a href="#store-dispatch" class="headerlink" title="store.dispatch()"></a>store.dispatch()</h3><p>store.dispatch() 是 View 发出 Action 唯一方法。</p>
<h3 id="Reducer"><a href="#Reducer" class="headerlink" title="Reducer"></a>Reducer</h3><p>Store 收到 Action 后，必须给出一个新的 State，这样 View 才会发生变化，这种 State 的计算过程叫做 Reducer。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> defaultState = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">reducer</span>(state = defaultState, action) =&gt; &#123;</span><br><span class="line">    <span class="keyword">switch</span>(action.<span class="property">type</span>) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">&#x27;ADD&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> state + action.<span class="property">payload</span>;</span><br><span class="line">        <span class="attr">default</span>:</span><br><span class="line">            <span class="keyword">return</span> state;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> state = <span class="title function_">reducer</span>(<span class="number">1</span>, &#123;</span><br><span class="line">    <span class="attr">type</span>: <span class="string">&#x27;ADD&#x27;</span>,</span><br><span class="line">    <span class="attr">payload</span>: <span class="number">2</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="store-subscribe"><a href="#store-subscribe" class="headerlink" title="store.subscribe"></a>store.subscribe</h3><p>Store 允许使用 store.subscribe 方法设置监听函数，一旦 State 发生变化，就自动执行这个函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(reducer);</span><br><span class="line"></span><br><span class="line">store.<span class="title function_">subscribe</span>(listener);</span><br></pre></td></tr></table></figure>

<h3 id="combineReducer"><a href="#combineReducer" class="headerlink" title="combineReducer"></a>combineReducer</h3><p>Redux 提供了一个 combineReducer 方法，用于 Reducer 的拆分。只要定义好了各个子 Reducer 函数，用 combineReducer 将它们合成一个大的 Reducer.</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; combineReducer &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> chatReducer = <span class="title function_">combineReducer</span>(&#123;</span><br><span class="line">    chatLog,</span><br><span class="line">    statusMessage,</span><br><span class="line">    userName,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> todoApp;</span><br></pre></td></tr></table></figure>


<h2 id="React-Redux"><a href="#React-Redux" class="headerlink" title="React-Redux"></a>React-Redux</h2><h3 id="UI组件"><a href="#UI组件" class="headerlink" title="UI组件"></a>UI组件</h3><ul>
<li>只负责UI呈现，不带任何业务逻辑</li>
<li>没有状态（无 state）</li>
<li>不适用任何 Redux 的 API</li>
</ul>
<h3 id="容器组件"><a href="#容器组件" class="headerlink" title="容器组件"></a>容器组件</h3><ul>
<li>负责管理数据和业务逻辑，不负责 UI 呈现</li>
<li>带有内部状态</li>
<li>使用 Redux 的 API</li>
</ul>
<h3 id="connect"><a href="#connect" class="headerlink" title="connect()"></a>connect()</h3><p>connnect() 方法用于从 UI 组件生成容器组件。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; connect &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">VisibleTodoList</span> = <span class="title function_">connect</span>(</span><br><span class="line">    mapStateToProps,</span><br><span class="line">    mapDispatchToProps,</span><br><span class="line">)(<span class="title class_">TodoList</span>);</span><br></pre></td></tr></table></figure>
<p>connect 方法接收两个参数：mapStateToProps &amp; mapDispatchToProps。前者负责输入逻辑，将 state 映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action。</p>
<h3 id="mapStateToProps"><a href="#mapStateToProps" class="headerlink" title="mapStateToProps"></a>mapStateToProps</h3><p>mapStateToProps 是一个函数，用于建立一个从（外部的）state 对象到 （UI组件）props 对象的映射关系。</p>
<h3 id="mapDispatchToProps"><a href="#mapDispatchToProps" class="headerlink" title="mapDispatchToProps"></a>mapDispatchToProps</h3><p>mapDispatchToProps 用来建立 UI 组件的参数到 store.dispatch 方法的映射。</p>
<h3 id="Provider-组件"><a href="#Provider-组件" class="headerlink" title="Provider 组件"></a>Provider 组件</h3><p>React-Redux 提供 Provider 组件，可以让容器组件拿到 state。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Provider</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> todoApp <span class="keyword">from</span> <span class="string">&#x27;./reducers&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">App</span> <span class="keyword">from</span> <span class="string">&#x27;./components/App&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> store = <span class="title function_">createStore</span>(todoApp);</span><br><span class="line"><span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">App</span>/&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;root&#x27;</span>);</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="中间件"><a href="#中间件" class="headerlink" title="中间件"></a>中间件</h3><p>中间件是一个函数，对 store.dispatch 方法进行了改造，在发出 Action 和执行 Reducer 之间，添加了其他功能。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; applyMiddleware, createStore &#125; <span class="keyword">from</span> <span class="string">&#x27;redux&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">&#x27;redux-logger&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> logger = <span class="title function_">createLogger</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="title function_">applyMiddleware</span>(logger);</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>注意：</p>
<ul>
<li>createStore 方法可以接受整个应用的初始状态作为参数， applyMiddleware 就成为了第三个参数了。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    reducer,</span><br><span class="line">    initial_state,</span><br><span class="line">    <span class="title function_">applyMiddleware</span>(logger),</span><br><span class="line">);</span><br></pre></td></tr></table></figure></li>
<li>中间件的次序有讲究。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="title function_">createStore</span>(</span><br><span class="line">    reducer,</span><br><span class="line">    <span class="title function_">applyMiddleware</span>(thunk, promise, logger),</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
应用了中间件[A, B, C], 一个 action 的完整执行流程为： A -&gt; B -&gt; C -&gt; dispatch -&gt; C -&gt; B -&gt; A.</li>
</ul>
<h3 id="lt-Provider-store-gt"><a href="#lt-Provider-store-gt" class="headerlink" title="&lt;Provider store&gt;"></a>&lt;Provider store&gt;</h3><p>&lt;Provider store&gt; 使组件层级中的 connect() 方法，都能获得 Redux store。正常情况下，根组件应该嵌套在 &lt;Provider&gt; 中才能使用 connect() 方法。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">ReactDom</span>.<span class="title function_">render</span>(</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">Provider</span> <span class="attr">store</span>=<span class="string">&#123;store&#125;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">MyRootComponent</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">Provider</span>&gt;</span></span>,</span><br><span class="line">    rootEl</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="connect-mapStateToProps-mapDispatchToProps-mergeProps-options"><a href="#connect-mapStateToProps-mapDispatchToProps-mergeProps-options" class="headerlink" title="connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])"></a>connect([mapStateToProps], [mapDispatchToProps], [mergeProps], [options])</h3><p>连接 React 组件与 Redux store。连接操作不会改变原来的组件类，返回一个新的已与 Redux store 连接的组件类。</p>
<h2 id="Redux-Saga"><a href="#Redux-Saga" class="headerlink" title="Redux-Saga"></a>Redux-Saga</h2><blockquote>
<p>Sagas 被实现为 Generator functions，它会 yield 对象到 redux-saga middleware。 被 yield 的对象都是一类指令，指令可被 middleware 解释执行。当 middleware 取得一个 yield 后的 Promise，middleware 会暂停 Saga，直到 Promise 完成。</p>
</blockquote>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>React</tag>
      </tags>
  </entry>
  <entry>
    <title>web性能优化：prefetch和preload的使用和区别</title>
    <url>/2022/12/13/web%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%EF%BC%9Aprefetch%E5%92%8Cpreload%E7%9A%84%E4%BD%BF%E7%94%A8%E5%92%8C%E5%8C%BA%E5%88%AB/</url>
    <content><![CDATA[<p>在 web 性能优化中， 我们总想尽办法，加速首屏的资源加载与渲染。preload 和 prefetch的出现，为我们提供了 更加细粒度的控制浏览器加载资源的方法。<br>prefetch和preload都是HTML中的链接标签，用于优化资源的预加载，以提高页面加载速度和性能。它们的主要区别在于加载时机和优先级。<span id="more"></span></p>
<h3 id="preload"><a href="#preload" class="headerlink" title="preload"></a>preload</h3><p>preload 是一个声明式的 fetch，可以强制浏览器在不阻塞 document的 onload 事件的情况下，请求资源。preload 顾名思义是一种资源的预加载方式，它通过向浏览器声明，去提交资源加载的需求，当资源真正被使用的时候立即执行，无需等待网络的消耗。</p>
<h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><p>使用方式：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;script&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;style&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxx.css&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中， rel 属性值为 preload，as属性用于规定资源的类型，并根据资源设置 Accept 请求头，以便能够使用正常的策略去请求对应的资源； href 为资源请求地址</p>
<p>as 可取值为 style, script, iamge, font, fetch, document, audio, vidoe等。如果 as 属性被省略，请求会被当做异步请求处理。</p>
<p>另外，在请求跨域资源时，推荐加上 crossorigin 属性，否则可能会导致资源的二次加载（尤其是 font 资源）</p>
<p><strong>使用场景</strong></p>
<ul>
<li>加载当前页面渲染时必需的关键资源。</li>
<li>加载字体文件、CSS、JavaScript等，确保其尽快可用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;preload&quot;</span> <span class="attr">as</span>=<span class="string">&quot;font&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxxx.com&quot;</span> <span class="attr">crossorigin</span>=<span class="string">&quot;anonymous&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul>
<li>preload加载的资源是在浏览器渲染机制之前进行处理的，并且不会阻塞onload事件；</li>
<li>preload可以支持加载多种类型的资源，并且可以加载跨域资源；</li>
<li>preload加载的js脚本其加载和执行的过程是分离的。即preload会预加载 相应的脚本代码，待到需要时自行调用；</li>
</ul>
<h3 id="prefatch"><a href="#prefatch" class="headerlink" title="prefatch"></a>prefatch</h3><p>prefetch 告诉浏览器这个资源将来可能需要，但是具体的加载时间，由浏览器决定。prefetch 是一种利用浏览器的空闲时间在加载页面将来可能用到的资源的一种机制，通常可以用来加载非首页的其他页面所需的资源，以便加快后续页面的首屏速度。</p>
<p>prefetch加载的资源可以获取非当前页面所需要的资源，并且将其放入缓存至少5分钟（无论资源是否可以缓存）；并且，当页面跳转时，未完成的prefetch请求不会被中断；</p>
<h4 id="使用方式-1"><a href="#使用方式-1" class="headerlink" title="使用方式"></a>使用方式</h4><p>它的用法跟 preload 是一样的：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;prefecth&quot;</span> <span class="attr">as</span>=<span class="string">&quot;sacript&quot;</span> <span class="attr">href</span>=<span class="string">&quot;xxxx.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>使用场景</strong></p>
<ul>
<li>用于加载下一页可能需要的资源。</li>
<li>对用户行为进行预测，提前加载可能会用到的资源。</li>
</ul>
<h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><table>
<thead>
<tr>
<th align="left">—</th>
<th align="left">preload</th>
<th align="left">prefech</th>
</tr>
</thead>
<tbody><tr>
<td align="left">作用</td>
<td align="left">preload标签用于告知浏览器提前预加载指定的资源（通常是当前页面即将用到的资源），以优先加载和缓存这些资源，加速页面渲染。</td>
<td align="left">prefetch标签用于告知浏览器在空闲时间预加载指定的资源（通常是页面未打开的资源），以便后续可能用到。它并不会阻塞页面的加载和渲染过程。</td>
</tr>
<tr>
<td align="left">加载时机</td>
<td align="left">浏览器会在解析preload标签时立即开始加载指定的资源，并将其优先级提高，尽快获取资源。</td>
<td align="left">浏览器会在当前页面加载完毕后，在空闲时间异步加载prefetch标签指定的资源。</td>
</tr>
<tr>
<td align="left">优先级</td>
<td align="left">preload的优先级较高，它会被浏览器优先加载，有利于提高页面渲染速度。</td>
<td align="left">prefetch的优先级较低，不会影响首屏渲染。浏览器会根据网络情况和设备资源来决定是否加载预加载的资源。</td>
</tr>
</tbody></table>
<p>主要区别</p>
<ul>
<li><p>加载优先级：<br>preload：高优先级加载，适用于当前页面渲染时必需的资源。<br>prefetch：低优先级加载，适用于未来可能需要的资源。</p>
</li>
<li><p>使用目的：<br>preload：用来加载当前页面渲染时需要的资源，提高页面加载速度。<br>prefetch：用来提前加载用户可能访问的资源，以提高后续导航的性能。</p>
</li>
<li><p>缓存处理：<br>preload：资源被优先加载，并且会被立即使用（如用于当前页面的渲染）。<br>prefetch：资源会被缓存，但可能不会立即使用，直到用户导航到需要这些资源的页面。</p>
</li>
</ul>
<p><strong>注意事项：</strong></p>
<ul>
<li>prefetch和preload不会阻塞主文档的加载，但它们可能会影响其他资源的加载。</li>
<li>使用prefetch和preload时，要确保只预加载或预取真正需要的资源，避免浪费带宽和资源。</li>
<li>预加载的资源如果没有被使用到，会对性能产生不必要的开销，因此需要根据实际场景进行选择和优化。</li>
</ul>
<p>综合来说，prefetch适合预加载未来可能用到的资源，而preload适合优先加载当前页面即将用到的关键资源，以提高页面加载速度。</p>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>web</tag>
      </tags>
  </entry>
  <entry>
    <title>上岸·offer，前端开发者的刷题小站</title>
    <url>/2025/04/17/%E4%B8%8A%E5%B2%B8%C2%B7offer%EF%BC%8C%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E5%88%B7%E9%A2%98%E5%B0%8F%E7%AB%99/</url>
    <content><![CDATA[<blockquote>
<p>契机:去年9月份，由于公司经营原因，组里的两名小伙伴被迫离开了公司。作为开发者，我们都深知这两年互联网寒冬，找工作不容易，所以就想着能不能帮帮他们。因为，萌生了一个想法，做一个刷题的小站，帮助他们快速上岸。<span id="more"></span></p>
</blockquote>
<h3 id="开发过程"><a href="#开发过程" class="headerlink" title="开发过程"></a>开发过程</h3><p>说干就干，业余时间利用AI + 爬虫，爬取了网上的一些面经和面试题。目前大概有1000+的面试题目，根据题目的考察内容，形成了20+的分类（比如：HTML、CSS、JavaScript、Vue、React、Node.js、网络、算法设计模式、网络安全、性能优化等）。以此为基础，通过AI辅助，对所有面试题进行了重新的整理。主要通过GPT4o，对所有面试题进行了重新的回答和总结，帮助开发者能快速理解面试题的答案以及回答的要点，避免长篇大论，却不能回答到面试者的心趴上（哈哈， 麦琳警告⚠️）。</p>
<p>中间经历了业务高峰期，搁置了许久。最近终于有时间了，最后在cursor + Claude的帮助下，利用业余时间，实际花了大概大半天时间，完成了网站内容的搭建（AI真的太太太强大了！）。</p>
<h3 id="小站地址"><a href="#小站地址" class="headerlink" title="小站地址"></a>小站地址</h3><p>小站地址：<a href="https://max.jiaochunxiao.cn/">上岸·offer</a></p>
<p>功能目前还是比较简陋，后续会继续完善。也欢迎大家一起共建，一起进步。</p>
<p>大家可以点击<a href="https://max.jiaochunxiao.cn/contact">这里</a>，联系我们，提出宝贵的意见和建议。同时也可以提交面试题，我们会在第一时间进行审核和发布。</p>
<p><img src="/images/post/home.png" alt="网站首页"></p>
<p><img src="/images/post/cover.png" alt="网站分类"></p>
<p><img src="/images/post/demo.png" alt="题目讲解"></p>
]]></content>
      <categories>
        <category>web</category>
        <category>工具</category>
      </categories>
      <tags>
        <tag>web</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title>关于form表单下点击button的自动提交问题</title>
    <url>/2017/05/08/%E5%85%B3%E4%BA%8Eform%E8%A1%A8%E5%8D%95%E4%B8%8B%E7%82%B9%E5%87%BBbutton%E7%9A%84%E8%87%AA%E5%8A%A8%E6%8F%90%E4%BA%A4%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<p>今天刚好一个java开发的同事在做一个后台管理系统，前端代码也是他自己再写，然后他发现自己写的表单，点击的时候，总是会提交两次，百思不得其解，就过来问我。看了他的代码，就想起来了form表单下的点击button的自动提交的表单的问题，刚好写篇文章吧，其实很简单，O(∩_∩)O哈哈~。<span id="more"></span></p>
<p>先看下同事的代码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//html片段</span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&#x27;xxxx/xxx/upload&#x27;</span> <span class="attr">method</span>=<span class="string">&#x27;post&#x27;</span> <span class="attr">enctype</span>=<span class="string">&#x27;multipart/form-data&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>城市:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">&#x27;city-input&#x27;</span> <span class="attr">type</span>=<span class="string">&#x27;text&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;city&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span>&gt;</span>banner:<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">name</span>=<span class="string">&#x27;banner&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&#x27;formSubmit()&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">//js片段</span><br><span class="line"></span><br><span class="line">function formSubmit()&#123;</span><br><span class="line">    $.ajaxFileUpload(&#123;</span><br><span class="line">        url: &#x27;xxxx/xxx/upload&#x27;,</span><br><span class="line">        type: &#x27;post&#x27;,</span><br><span class="line">        data : &#123;</span><br><span class="line">            city: $(&#x27;.city-input&#x27;).val()</span><br><span class="line">        &#125;,</span><br><span class="line">        secureuri: false, //一般设置为false</span><br><span class="line">        fileElementId: &#x27;banner&#x27;, // 上传文件的id、name属性名</span><br><span class="line">        dataType: &#x27;JSON&#x27;, //返回值类型，一般设置为json、application/json  这里要用大写  不然会取不到返回的数据</span><br><span class="line">        success: function(data, status)&#123;  </span><br><span class="line">            alert(data);</span><br><span class="line">        &#125;,</span><br><span class="line">        error: function(data, status, e)&#123;</span><br><span class="line">            alert(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="提交表单"><a href="#提交表单" class="headerlink" title="提交表单"></a>提交表单</h3><p>当用户点击提交按钮或图像按钮时，就会提交表单。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--通用提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span> <span class="attr">value</span>=<span class="string">&#x27;Submit Form&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--自定义提交按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&#x27;submit&#x27;</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--图像按钮--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;image&#x27;</span> <span class="attr">src</span>=<span class="string">&#x27;submit.png&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上面那段代码中，之所以出现表单提交了两次，是因为：button的type在Internet Explorer 下的默认类型是 “button”，而其他浏览器中（包括 W3C 规范）的默认值是 “submit”。</p>
<p>因此：<br><strong>请始终为按钮规定 type 属性</strong></p>
<p>上述代码中，只需要添加button 的 type属性为 button，即可避免两次提交ajax，只执行formSubmit方法中的操作。<br>同时，也可以通过下面的方式，阻止表单的默认事件，</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">onsubmit</span>=<span class="string">&#x27;return false&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>关于meta，你应该知道的事</title>
    <url>/2017/02/27/%E5%85%B3%E4%BA%8Emeta%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/</url>
    <content><![CDATA[<p>在PC端开发中，你可能没有怎么关注 meta 标签，但在移动端开发中，如果你忽略了它，会使你陷入疯狂中[为曾经抹泪.jpg]。其实不止是移动开发，网站的SEO，也离不开它。下面就来看下关于 meta 标签，你应该知道的事。<span id="more"></span></p>
<h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a><meta>基本知识</h2><p>meta标签提供了一些基本的元数据，虽然不会显示在页面上，但会被浏览器解析。</p>
<p>定义：</p>
<blockquote>
<meta> 元素可提供有关页面的元信息（meta-information），比如针对搜索引擎和更新频度的描述和关键词。
</blockquote>
<meta> 标签位于文档的头部，不包含任何内容。<meta> 标签的属性定义了与文档相关联的名称/值对。

<p>属性：</p>
<blockquote>
<table>
<thead>
<tr>
<th>属性名</th>
<th align="center">值</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td>charset (html5)</td>
<td align="center">character_set</td>
<td align="center">定义文档的字符编码</td>
</tr>
<tr>
<td>content</td>
<td align="center">text</td>
<td align="center">定义与http-equiv或name属性相关的元信息</td>
</tr>
<tr>
<td>http-equiv</td>
<td align="center">content-type,default-type,refresh</td>
<td align="center">把content属性关联到HTTP头部</td>
</tr>
<tr>
<td>name</td>
<td align="center">application-name,author,description,generator,keywords</td>
<td align="center">把content属性关联到一个名称</td>
</tr>
<tr>
<td>scheme</td>
<td align="center">format/URI</td>
<td align="center">HTML5不支持。定义用于翻译content属性值的格式。</td>
</tr>
</tbody></table>
</blockquote>
<h2 id="常见用法："><a href="#常见用法：" class="headerlink" title="常见用法："></a>常见用法：</h2><h3 id="http-equiv，相当于http头文件作用。"><a href="#http-equiv，相当于http头文件作用。" class="headerlink" title="http-equiv，相当于http头文件作用。"></a>http-equiv，相当于http头文件作用。</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;Content-Type&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;Type=text/html; charset=utf-8&#x27;</span>&gt;</span></span><br><span class="line">//声明网页字符编码，上述的书写方式，目前更多的被下面更简单，向后兼容的声明方式所替代。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//X-UA-Compatible 是用来设置IE兼容模式，支持IE8及以上的浏览器，不支持IE7。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=6&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE6 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=7&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE7 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=8&quot;</span> /&gt;</span><span class="comment">&lt;!-- 使用IE8 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=EmulateIE8&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//refresh 声明页面定时刷新或跳转</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;refresh&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;5&#x27;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;refresh&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;5;url=http://jiaochunxiao.github.io&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//关于使用IE版本和Chrome</span><br><span class="line">//强制使用IE最新版本的标准模式，强制IE使用Chrome Frame，最好的</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//expires 网页到期时间</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;expires&#x27;</span> <span class="attr">conotent</span>=<span class="string">&#x27;&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//cache-control</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&#x27;cache-control&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;no-cache&#x27;</span>&gt;</span></span><br><span class="line">1. no-cache:必须先向服务器确认返回的响应是否发生变化，然后使用该响应来满足后续对同一网址的请求。因此如果存在合适的验证令牌（ETag),no-cache会发起往返通信来验证缓存的响应。如果资源未发生变化，则避免下载。</span><br><span class="line">2. no-store:直接禁止浏览器及所有中间缓存存储任何版本的响应，每次用户请求该资源时，都会向服务器发送请求，并下载完整响应。</span><br><span class="line">3. public:缓存所有响应，即使它有关联的HTTP身份验证。大多数情况下，public不是必需的，因为明确的缓存信息已表示响应是缓存的。</span><br><span class="line">4. private:通常只为单个用户缓存，不允许任何中间缓存对其进行缓存。例：用户浏览器可缓存包含个人信息的网页，但cdn不能缓存。</span><br><span class="line">5. max-age:指定从请求的时间开始，允许获取的响应被重用的最长时间，即在该时间段内，不用去服务器重新请求。	</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="name"><a href="#name" class="headerlink" title="name"></a>name</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//声明作者信息</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;author&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;jiaochunxiao&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//声明文档关键字，有利于SEO</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;keywords&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;web,html,css,jiaochunxiao&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//声明文档描述网页内容的相关信息，搜索引擎也会使用它。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;description&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;前端学习...&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//声明网页搜索引擎索引方式</span><br><span class="line">//通常取值有all,none,index,follow,noindex,nofollow</span><br><span class="line">//all:文件将被检索，且页面上的链接可以被查询</span><br><span class="line">//none:文件将被忽略，搜索引擎不检索，等价于noindex,nofollow</span><br><span class="line">//index:文件将被检索</span><br><span class="line">//follow:页面上的链接可被查询</span><br><span class="line">//noindex:文件不被检索</span><br><span class="line">//nofollow:页面上的链接不可被查询</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;robots&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;index,follow&#x27;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//关于浏览器内核控制，针对国内使用双核的浏览器，告诉浏览器选择合适内核渲染。</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;renderer&quot;</span> <span class="attr">content</span>=<span class="string">&quot;webkit|ie-comp|ie-stand&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//网站重访,通知搜索引擎多少天访问一次</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;revisit-after&quot;</span> <span class="attr">content</span>=<span class="string">&quot;1days&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//copyright</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;copyright&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;相关信息&#x27;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//generator</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&#x27;generator&#x27;</span> <span class="attr">content</span>=<span class="string">&#x27;xxxx&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="移动端常见meta标签设置"><a href="#移动端常见meta标签设置" class="headerlink" title="移动端常见meta标签设置"></a>移动端常见meta标签设置</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//定义可视区域，屏幕禁止缩放</span><br><span class="line">//width：viewport的高度</span><br><span class="line">//initial-scale:屏幕的初始缩放比例</span><br><span class="line">//maximus-scale:允许屏幕缩放的最大比例</span><br><span class="line">//minimus-scale:允许屏幕缩放的最小比例</span><br><span class="line">//user-scalable:是否允许用户手动缩放</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//开启全屏模式</span><br><span class="line">//uc浏览器全屏，只写第一行也可以实现</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;full-screen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;browsermode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;application&quot;</span>&gt;</span></span><br><span class="line">//QQ浏览器全屏</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-fullscreen&quot;</span> <span class="attr">content</span>=<span class="string">&quot;true&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-page-mode&quot;</span> <span class="attr">content</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">//设置屏幕方向，强制竖屏或者横屏</span><br><span class="line">//UC浏览器，content取值为portrait（竖屏）、landscape（横屏）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;screen-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span>&gt;</span></span><br><span class="line">//QQ浏览器，content取值为portrait（竖屏）、landscape（横屏）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;x5-orientation&quot;</span> <span class="attr">content</span>=<span class="string">&quot;portrait&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//隐藏状态栏/设置状态栏颜色，ios私有属性</span><br><span class="line">//只在开启全屏模式下才生效，content值为：default（白色）/black（黑色）/black-translucent（半透明）</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-status-bar-style&quot;</span> <span class="attr">content</span>=<span class="string">&quot;black-translucent&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//启用webapp模式，ios私有属性</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;apple-mobile-web-app-capable&quot;</span> <span class="attr">content</span>=<span class="string">&quot;yes&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//忽略数字自动识别为电话</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;telephone=no&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">//忽略自动识别邮箱</span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;format-detection&quot;</span> <span class="attr">content</span>=<span class="string">&quot;email=no&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure>


<p><em>参考</em>：</p>
<ul>
<li><a href="https://segmentfault.com/a/1190000000654839">移动端Web系列4–meta</a></li>
<li><a href="https://gist.github.com/overtrue/f540fbea3c33e3da53fd">移动端头部meta大全</a></li>
<li><a href="https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching?hl=zh-cn#cache-control">HTTP 缓存</a></li>
</ul>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTML</tag>
      </tags>
  </entry>
  <entry>
    <title>关于移动端300ms延迟及解决方案</title>
    <url>/2017/11/15/%E5%85%B3%E4%BA%8E%E7%A7%BB%E5%8A%A8%E7%AB%AF300ms%E5%BB%B6%E8%BF%9F%E5%8F%8A%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>一般情况下，在移动开发过程中，针对click事件，浏览器会有300ms的派发延迟。由于这300ms的延迟，通常会带来一些问题，比如点击穿透。那么浏览器为什么有300ms的延迟呢？<span id="more"></span></p>
<h2 id="300ms延迟的由来"><a href="#300ms延迟的由来" class="headerlink" title="300ms延迟的由来"></a>300ms延迟的由来</h2><blockquote>
<p>这要追溯至 2007 年初。苹果公司在发布首款 iPhone 前夕，遇到一个问题：当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。<br>这当中最出名的，当属双击缩放(double tap to zoom)，这也是会有上述 300 毫秒延迟的主要原因。<br>双击缩放，顾名思义，即用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。 那么这和 300 毫秒延迟有什么联系呢？ 假定这么一个场景。用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。<br>即：移动端要判断是否是双击，所以单击之后不能够立刻触发click，要等300ms，直到确认不是双击了才触发click。所以就导致了click有延迟。<br>鉴于iPhone的成功，其他移动浏览器都复制了 iPhone Safari 浏览器的多数约定，包括双击缩放，几乎现在所有的移动端浏览器都有这个功能。</p>
</blockquote>
<p>但目前在开发webapp时，基本不需要双击缩放的功能，为了提高用户的使用体验，我们要解决这 300 ms延迟问题。以下为社区常见的几种解决方案：</p>
<h3 id="浏览器解决方案"><a href="#浏览器解决方案" class="headerlink" title="浏览器解决方案"></a>浏览器解决方案</h3><p>为了解决300ms延迟，浏览器的开发厂商，提供了一些解决方案。自2014年的Chrome 32版本已经把这个延迟去掉了，通过设置meta标签：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>即把viewport设置成当前设备的实际像素，浏览器就没有300ms延迟。据官方说明，这个举动受到了IE/Firefox/Safari(IOS 9.3)的支持，可用来消除页面点击延迟。但对于低版本的浏览器，此方法并不适用。</p>
<p>另外针对chrome浏览器，通过设置initial-scale=1.0，也可以用来消除延迟，但safari无效。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;initial-scale=1.0&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="fastclick"><a href="#fastclick" class="headerlink" title="fastclick"></a>fastclick</h3><p>通过引入<a href="https://github.com/ftlabs/fastclick">fastclick</a>（FT Labs专门为解决移动端浏览器300ms点击延迟所开发的轻量级库）。<br>fastclick 通过检测手指点击时的touchstart事件 和 touchend 事件之间的移动距离来判断滚动还是点击，通过DOM自定义事件，立即触发一个模拟 click事件，并把浏览器在300ms之后真正触发的click事件阻止掉。</p>
<h3 id="设置CSS"><a href="#设置CSS" class="headerlink" title="设置CSS"></a>设置CSS</h3><p>css 属性 touch-action 用于指定某个给定区域是否允许用户操作，以及如何响应用户操作。</p>
<blockquote>
<p>manipulation:<br>Enable panning and pinch zoom gestures, but disable additional non-standard gestures such as double-tap to zoom. Disabling double-tap to zoom removes the need for browsers to delay the generation of click events when the user taps the screen. This is an alias for “pan-x pan-y pinch-zoom” (which, for compatibility, is itself still valid).</p>
</blockquote>
<p>大意为：浏览器只允许进行滚动和持续缩放操作。任何其它被auto值支持的行为不被支持。启用平移和缩小缩放手势，但禁用其他非标准手势，例如双击以进行缩放。 禁用双击可缩放功能可减少浏览器在用户点击屏幕时延迟生成点击事件的需要。 </p>
<p>通过设置：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">html&#123;</span><br><span class="line">	touch-action: manipulation;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>只需上面简单的css设置，就解决了300ms的延迟问题，并且主要移动端Android Webview, Chrome for Android, Safria, 及采用webkit内核的浏览器均支持此属性。</p>
<p><strong>综上最佳解决方案为利用CSS touch-action: manipulation属性。</strong></p>
<hr>
<h2 id="关于点击穿透问题"><a href="#关于点击穿透问题" class="headerlink" title="关于点击穿透问题"></a>关于点击穿透问题</h2><p>移动端提供了 touchstart、touchmove、touchend，click事件等模拟鼠标事件。在移动端的触发顺序为： touchstart &gt; touchmove &gt; touchend &gt; click。通过上述的事件触发顺序，我们就可以来说一下点击穿透问题了。</p>
<h3 id="点击穿透的场景"><a href="#点击穿透的场景" class="headerlink" title="点击穿透的场景"></a>点击穿透的场景</h3><p>页面中存在上下两层或多层，当上层的元素通过点击或触摸，导致DOM改变，下层中相对位置的元素触发了点击事件，这种现象就是点击穿透。</p>
<p>比较常见的是，页面有遮罩层，遮罩层上元素绑定touch事件，而遮罩层下方元素绑定了click事件，当touch事件触发后，遮罩层元素消失，浏览器300ms后触发该元素位置的click事件，由于遮罩层元素已经消失，就触发了当前位置元素的click事件。</p>
<p><em>参考</em></p>
<ul>
<li><a href="http://www.jianshu.com/p/6e2b68a93c88">移动端300ms点击延迟和点击穿透问题</a></li>
</ul>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于webpack的一些点</title>
    <url>/2019/03/06/%E5%85%B3%E4%BA%8Ewebpack%E7%9A%84%E4%B8%80%E4%BA%9B%E7%82%B9/</url>
    <content><![CDATA[<p>记录webpack的一些基本概念及相关优化。</p>
<span id="more"></span>
<h2 id="webpack-核心概念"><a href="#webpack-核心概念" class="headerlink" title="webpack 核心概念"></a>webpack 核心概念</h2><ul>
<li>entry: 入口起点，指示 webpack 构建内部依赖的开始。</li>
<li>output: 构建结果的输出及文件命名。</li>
<li>moudule: webpack 里一切皆为模块，一个模块对应一个文件，webpack 会从 Entry 开始递归找出所有依赖模块。</li>
<li>loader: webpack 只能理解 JavaScript 和 JSON 文件。loader 让 webpack 能够去处理其他类型的文件，并将它们转换为有效 模块，以供应用程序使用，以及被添加到依赖图中。loader 可以理解为一个转换器。</li>
<li>plugin: loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。</li>
</ul>
<h2 id="提高-webpack-打包速度"><a href="#提高-webpack-打包速度" class="headerlink" title="提高 webpack 打包速度"></a>提高 webpack 打包速度</h2><h3 id="DllPlugin"><a href="#DllPlugin" class="headerlink" title="DllPlugin"></a>DllPlugin</h3><p>之前我们利用 CommonsChunkPlugin 来分拆公共模块，但是在webpack v4之后已经被移除，现在利用DLLPlugin 和 DLLReferencePlugin 来拆分 bundles，同时还大大提升了构建的速度。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// webpack-dll.js</span></span><br><span class="line"><span class="keyword">const</span> options = &#123;</span><br><span class="line">    <span class="attr">entry</span>: &#123;</span><br><span class="line">        <span class="attr">vendors</span>: [<span class="string">&#x27;react&#x27;</span>, <span class="string">&#x27;react-dom&#x27;</span>, <span class="string">&#x27;react-router-dom&#x27;</span>],</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">output</span>: &#123;</span><br><span class="line">        <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;../dist/&#x27;</span>),</span><br><span class="line">        <span class="attr">filename</span>: <span class="string">&#x27;[name].js&#x27;</span>,</span><br><span class="line">        <span class="attr">library</span>: <span class="string">&#x27;[name]&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">plugins</span>: [</span><br><span class="line">        <span class="keyword">new</span> webpack.<span class="title class_">DllPlugin</span>(&#123;</span><br><span class="line">            <span class="attr">context</span>: __dirname,</span><br><span class="line">            <span class="attr">path</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;manifest.json&#x27;</span>),</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;[name]&#x27;</span></span><br><span class="line">        &#125;)</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;development&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// webpack.dev.config.js</span></span><br><span class="line"><span class="attr">plugins</span>: [</span><br><span class="line">    <span class="keyword">new</span> webpack.<span class="title class_">DllReferencePlugin</span>(&#123;</span><br><span class="line">        <span class="attr">context</span>: __dirname,</span><br><span class="line">        <span class="attr">manifest</span>: <span class="built_in">require</span>(<span class="string">&#x27;./manifest.json&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;vendors&#x27;</span></span><br><span class="line">    &#125;),</span><br><span class="line">    <span class="comment">// ....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="利用-HappyPack-提高打包速度"><a href="#利用-HappyPack-提高打包速度" class="headerlink" title="利用 HappyPack 提高打包速度"></a>利用 HappyPack 提高打包速度</h3><p>在 webpack 构建过程中，随着项目的文件越来越多，需要解析和处理大量的文件。但是由于 node.js 是单线程，所以构建过程中并不能并行的去处理文件，从而造成了构建时间的增加。<br>HappyPack 是 webpack 的一个插件，可以通过 HappyPack 可以将构建任务分解给多个子进程并发的执行，子进程处理完后，再将结果通知给主进程，从而提高了 webpack 的构建速度。</p>
<p><em>HappyPack 对 file-loader、url-loader 支持不友好，不建议对该 loader 使用</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> happyThreadPool = <span class="title class_">HappyPack</span>.<span class="title class_">ThreadPool</span>(&#123;<span class="attr">size</span>: <span class="number">4</span>&#125;);</span><br><span class="line"><span class="comment">// module.rules 中配置</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">test</span>: <span class="regexp">/\.js$/</span>,</span><br><span class="line">    <span class="attr">include</span>: [</span><br><span class="line">        path.<span class="title function_">resolve</span>(__dirname, <span class="string">&#x27;../src&#x27;</span>),</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">use</span>: [<span class="string">&#x27;happypack/loader?id=js&#x27;</span>],</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// plugins 中配置</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">HappyPack</span>(&#123;</span><br><span class="line">    <span class="attr">id</span>: <span class="string">&#x27;js&#x27;</span>,</span><br><span class="line">    <span class="attr">verbose</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// 使用多少子进程来进行编译，一般设置为4为最佳</span></span><br><span class="line">    <span class="comment">// threads: 4,</span></span><br><span class="line">    <span class="comment">// 设置 HappyPack 插件中所有 loaders 均采用子进程数</span></span><br><span class="line">    <span class="attr">threadPool</span>: happyThreadPool,</span><br><span class="line">    <span class="attr">loaders</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">loader</span>: <span class="string">&#x27;babel-loader&#x27;</span>,</span><br><span class="line">            <span class="attr">query</span>: &#123;</span><br><span class="line">                <span class="attr">cacheDirectory</span>: <span class="literal">true</span>,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;),</span><br></pre></td></tr></table></figure>

<h2 id="optimization"><a href="#optimization" class="headerlink" title="optimization"></a>optimization</h2><p>从 webpack4 开始，会根据 mode 来执行不同的优化。不过所有的优化，还是可以手动配置和重写的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">optimization</span>: &#123;</span><br><span class="line">        <span class="attr">minimize</span>: <span class="literal">true</span>, <span class="comment">// production模式下，默认为 true, 告知 webpack 使用 TerserPlugin 压缩 bundle.</span></span><br><span class="line">        <span class="comment">// 允许你通过提供一个或多个定制化的 TerserPlugin实例，来覆盖默认压缩工具。</span></span><br><span class="line">        <span class="attr">minimizer</span>: [</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">UglifyJsPlugin</span>(&#123;</span><br><span class="line">                <span class="attr">sourceMap</span>: <span class="literal">true</span>, <span class="comment">// cheap-source-map options don&#x27;t work with this plugin.</span></span><br><span class="line">                <span class="attr">parallel</span>: <span class="literal">true</span>, <span class="comment">// 使用多进程提升构建速度，默认为 os.cpus().length - 1, 可手动设置。</span></span><br><span class="line">                <span class="attr">uglifyOptions</span>: &#123;</span><br><span class="line">                    <span class="attr">compress</span>: &#123;</span><br><span class="line">                        <span class="attr">warnings</span>: <span class="literal">true</span>, <span class="comment">// 显示警告</span></span><br><span class="line">                        <span class="attr">drop_debugger</span>: <span class="literal">true</span>, <span class="comment">// 去除debugger</span></span><br><span class="line">                        <span class="attr">drop_console</span>: <span class="literal">true</span> <span class="comment">// 去除console</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">runtimeChunk</span>: &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;manifest&#x27;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">splitChunks</span>: &#123;</span><br><span class="line">            <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>, <span class="comment">// 块的范围，有三个可选值：initial(初始块)、async(按需加载块)、all(全部块)，默认为all</span></span><br><span class="line">            <span class="attr">cacheGroups</span>: &#123;</span><br><span class="line">                <span class="comment">// 基本类库</span></span><br><span class="line">                <span class="attr">vendor</span>: &#123;</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/[\/]node_modules[\/]/</span>,</span><br><span class="line">                    <span class="attr">chunks</span>: <span class="string">&#x27;initial&#x27;</span>,</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;vendor&#x27;</span>,</span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">10</span>,</span><br><span class="line">                    <span class="attr">enforce</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//公共组</span></span><br><span class="line">                <span class="attr">common</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;comomn&#x27;</span>,</span><br><span class="line">                    <span class="attr">test</span>: path.<span class="title function_">join</span>(__dirname, <span class="string">&#x27;..&#x27;</span>, <span class="string">&#x27;src/lib&#x27;</span>),</span><br><span class="line">                    <span class="attr">minChunks</span>: <span class="number">2</span>, <span class="comment">// 最小共用次数</span></span><br><span class="line">                    <span class="attr">priority</span>: <span class="number">5</span>,</span><br><span class="line">                    <span class="attr">reuseExistingChunk</span>: <span class="literal">true</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">styles</span>: &#123;</span><br><span class="line">                    <span class="attr">name</span>: <span class="string">&#x27;styles&#x27;</span>,</span><br><span class="line">                    <span class="attr">test</span>: <span class="regexp">/\.css$/</span>,</span><br><span class="line">                    <span class="attr">chunks</span>: <span class="string">&#x27;all&#x27;</span>,</span><br><span class="line">                &#125;,</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>webpack</tag>
      </tags>
  </entry>
  <entry>
    <title>关于移动端实现border:1px的解决方案</title>
    <url>/2017/02/19/%E5%85%B3%E4%BA%8E%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%AE%9E%E7%8E%B0border-1px%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>关于移动端border-1px问题由来，我想大家都应该很清楚了。简言之，是由不同手机的物理像素密度不同导致的。不同设备的由于设备像素比的不同，渲染出来的实际效果大不相同。首先，了解下设备像素比。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">devicePixelRatio = 屏幕物理像素/独立像素</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>如何实现1像素的border呢？</p>
<p>1、利用device-pixel-ratio</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//元素正常设置border，增加一个类border-1px</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">1.5</span>), (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">1.5</span>)&#123;</span><br><span class="line">    <span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">          -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">          -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.7</span>);</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.7</span>);</span><br><span class="line">          -webkit-<span class="attribute">transform-origin</span>: left top;</span><br><span class="line">          <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">-webkit-min-device-pixel-ratio</span>: <span class="number">2</span>), (<span class="attribute">min-device-pixel-ratio</span>: <span class="number">2</span>)&#123;</span><br><span class="line">  	<span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">        <span class="selector-tag">&amp;</span><span class="selector-pseudo">::after</span>&#123;</span><br><span class="line">          <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">          <span class="attribute">position</span>: absolute;</span><br><span class="line">          <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">          <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span><br><span class="line">          -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">          <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">          <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">          -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">          <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">          -webkit-<span class="attribute">transform-origin</span>: left top;</span><br><span class="line">          <span class="attribute">transform-origin</span>: left top;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一种实现方案：<br><strong>devicePixelRatio = 2</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>devicePixelRatio = 3</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=0.3333333333333333, maximum-scale=0.3333333333333333, minimum-scale=0.3333333333333333, user-scalable=no&quot;&gt;</span><br></pre></td></tr></table></figure>
<p>2、使用box-shadow</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">box-shadow: inset 1px -1px 1px -1px #fff,inset -1px 1px 1px -1px #fff;</span><br></pre></td></tr></table></figure>
<p>优点：满足所有场景，包括圆角，代码量少。<br>缺点：边框有阴影，颜色变浅。</p>
<p>3、使用伪类+transform 实现</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单条border</span></span><br><span class="line"><span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">		<span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">	    <span class="attribute">display</span>: block;</span><br><span class="line">	    <span class="attribute">position</span>: absolute;</span><br><span class="line">	    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">	    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">	    <span class="attribute">bottom</span>: <span class="number">0</span>;</span><br><span class="line">	    <span class="attribute">height</span>: <span class="number">1px</span>;</span><br><span class="line">	    <span class="attribute">background-color</span>: <span class="number">#e5e5e5</span>;</span><br><span class="line">	    -webkit-<span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">	    <span class="attribute">transform</span>: <span class="built_in">scaleY</span>(<span class="number">0.5</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//四条border</span></span><br><span class="line"><span class="selector-class">.border-1px</span>&#123;</span><br><span class="line">	<span class="attribute">position</span>: relative;</span><br><span class="line">	<span class="selector-tag">&amp;</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">        <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="attribute">position</span>: absolute;</span><br><span class="line">        <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">        <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#fff</span>;</span><br><span class="line">        -webkit-<span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">200%</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">200%</span>;</span><br><span class="line">        -webkit-<span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">        <span class="attribute">transform</span>: <span class="built_in">scale</span>(<span class="number">0.5</span>);</span><br><span class="line">        <span class="comment">//-webkit-transform-origin: left top;</span></span><br><span class="line">        <span class="comment">//transform-origin: left top;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优点：所有场景都满足，支持圆角（伪类和本类都需要加border-radius）<br>缺点：对于已经使用伪类的元素，可能需要多层嵌套</p>
<p>4、利用背景渐变</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.background-gradient-1px</span> &#123;</span><br><span class="line">	<span class="attribute">background</span>:</span><br><span class="line">		<span class="built_in">linear-gradient</span>(<span class="number">180deg</span>, <span class="number">#fff</span>, <span class="number">#fff</span> <span class="number">50%</span>, transparent <span class="number">50%</span>) top    left  / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">		<span class="built_in">linear-gradient</span>(<span class="number">90deg</span>,  <span class="number">#fff</span>, <span class="number">#fff</span> <span class="number">50%</span>, transparent <span class="number">50%</span>) top    right / <span class="number">1px</span> <span class="number">100%</span> no-repeat,</span><br><span class="line">		<span class="built_in">linear-gradient</span>(<span class="number">0</span>,      <span class="number">#fff</span>, <span class="number">#fff</span> <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom right / <span class="number">100%</span> <span class="number">1px</span> no-repeat,</span><br><span class="line">		<span class="built_in">linear-gradient</span>(-<span class="number">90deg</span>, <span class="number">#fff</span>, <span class="number">#fff</span> <span class="number">50%</span>, transparent <span class="number">50%</span>) bottom left  / <span class="number">1px</span> <span class="number">100%</span> no-repeat;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 或者 */</span></span><br><span class="line"><span class="selector-class">.background-gradient-1px</span>&#123;</span><br><span class="line">	<span class="attribute">background</span>: <span class="built_in">-webkit-gradient</span>(linear, left top, left bottom, <span class="built_in">color-stop</span>(.<span class="number">5</span>, transparent), <span class="built_in">color-stop</span>(.<span class="number">5</span>, <span class="number">#fff</span>), <span class="built_in">to</span>(<span class="number">#fff</span>)) left bottom repeat-x;</span><br><span class="line">	<span class="attribute">background-size</span>: <span class="number">100%</span> <span class="number">1px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优点：可以实现单条、多条边框，颜色可随意设置<br>缺点：代码量大，圆角无法实现，兼容性问题</p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>关于类数组和数组</title>
    <url>/2016/06/12/%E5%85%B3%E4%BA%8E%E7%B1%BB%E6%95%B0%E7%BB%84%E5%92%8C%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>在前端开发中，我们经常会碰到这样一个概念：类数组。那究竟类数组和数组有什么样的关联呢？<span id="more"></span></p>
<h2 id="类数组-ArrayLike"><a href="#类数组-ArrayLike" class="headerlink" title="类数组(ArrayLike)"></a>类数组(ArrayLike)</h2><p>从字面上我们就能认识到，类数组是指和数组有相似特点的对象，可以读取类数组的长度，也可以通过索引获取类数组中的元素。大家最为熟知的类数组，就是 arguments 。今天我们来熟悉另外一个类数组对象。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nodeList = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nodeList[<span class="number">0</span>]);<span class="comment">//&lt;div&gt;....&lt;/div&gt;</span></span><br><span class="line">nodeList.<span class="title function_">pop</span>();<span class="comment">//Uncaught TypeError: document.querySelectorAll(...).pop is not a function(…)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nodeList <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>从上述代码中我们可以看到，定义了一个nodeList变量，也能通过索引获取相关元素，但当我们执行数组pop方法时，控制台报错了：Uncaught TypeError: document.querySelectorAll(…).pop is not a function(…) 。然后我们通过 instanceof 方法，控制台输出为 false 。这是因为nodeList 是一个类数组对象，但是不能执行数组的 pop 方法。</p>
<p>常见的类数组对象： arguments, nodeList(以下代码形式返回类型为NodeList:childNodes, labels(select元素), getElementsByName(name), getElementsByClassName(className), getElementsByTagName(tagName), getElementsByTagNameNS(namespaceURI, tagName), querySelectorAll(selectors), document.all.tags(tagName)), styleSheetList(document.styleSheets), HTMLCollection(以下代码形式返回类型为HTMLCollection: children, document.images, document.links, document.anchors, document.scripts, document.forms, document.applets, document.embeds等) 等。</p>
<blockquote>
<p>类数组拥有一些原生数组（Array）的行为，但类数组相比数组具有更加自由的扩展，它来自于对开发者对Javascript 对象的扩展。简言之：对于它的原型（prototype）我们可以自由定义，而不会污染到javascript原生的Array。类数组来自于数组，但比数组更适合扩展。</p>
</blockquote>
<h2 id="类数组转换为数组对象"><a href="#类数组转换为数组对象" class="headerlink" title="类数组转换为数组对象"></a>类数组转换为数组对象</h2><p>上面我们说了类数组的优点，但是类数组毕竟不是数组对象，数组对象的大部分方法，类数组都不支持。对于数组（Array）对象，拥有很多方法，诸如： shift, unshift, pop, push, slice, splice, concat等等。ES6<br>又提供了forEach, isArray, indexOf, lastIndexOf, every, some, map, filter, reduce 等方法。当我们想对类数组对象进行操作时，如果能直接调用数组的方法，将大大提高我们的开发效率，如何将类数组转换为数组呢？<br>** Array.prototype.slice.call(arrayLike) **</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">slice</span>.<span class="title function_">call</span>(<span class="title class_">ArrayLike</span>);</span><br></pre></td></tr></table></figure>
<p>先执行完上述代码后，类数组就完成了向数组对象的转换。</p>
<ul>
<li><p>Array.prototype.slice方法返回的是一个Array对象，这也是为什么用slice方法的原因。</p>
</li>
<li><p>能调用call的只有方法，所以我们用Array.prototype.slice.call, 而不能用[].call这种形式。同时call的第一个参数表示调用slice的环境变为了arrayLike对象。call方法也是js中实现继承的一种方式。</p>
</li>
</ul>
<hr>
<p>update: ES6新增了Array.from()方法</p>
<blockquote>
<p>Array.from方法用于将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括ES6新增的数据结构Set和Map）。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span>: <span class="string">&#x27;a&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span>: <span class="string">&#x27;b&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span>: <span class="string">&#x27;c&#x27;</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">3</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// ES5的写法</span></span><br><span class="line"><span class="keyword">var</span> arr1 = [].<span class="property">slice</span>.<span class="title function_">call</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES6的写法</span></span><br><span class="line"><span class="keyword">let</span> arr2 = <span class="title class_">Array</span>.<span class="title function_">from</span>(arrayLike); <span class="comment">// [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// NodeList对象</span></span><br><span class="line"><span class="keyword">let</span> ps = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;p&#x27;</span>);</span><br><span class="line"><span class="title class_">Array</span>.<span class="title function_">from</span>(ps).<span class="title function_">forEach</span>(<span class="keyword">function</span> (<span class="params">p</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(p);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> args = <span class="title class_">Array</span>.<span class="title function_">from</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">  <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<p>2016/08/11<br>ES6的扩展运算符 …</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> x = <span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;div&#x27;</span>); </span><br><span class="line"><span class="keyword">let</span> y = <span class="title class_">Array</span>.<span class="title function_">from</span>(x); </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(y <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//true</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>([...x] <span class="keyword">instanceof</span> <span class="title class_">Array</span>);<span class="comment">//true</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
        <tag>array</tag>
      </tags>
  </entry>
  <entry>
    <title>初探javascript单元测试框架-Jasmine</title>
    <url>/2018/01/24/%E5%88%9D%E6%8E%A2javascript%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%95%E6%A1%86%E6%9E%B6-Jasmine/</url>
    <content><![CDATA[<img src='jasmine.png' width='400'/>

<p>Jasmine 是一个用 Javascript 代码的行为驱动测试框架，它不依赖于任何其它 Javascript 框架。Jasmine 与 Mocha 大概是目前最火的两个单元测试框架了。</p>
<span id="more"></span>

<h3 id="Jasmine-API"><a href="#Jasmine-API" class="headerlink" title="Jasmine API"></a>Jasmine API</h3><h4 id="describe"><a href="#describe" class="headerlink" title="describe"></a>describe</h4><p>describe 是 Jasmine的全局函数，也称之为’测试套件’，用于创建一组相关的测试。它通常包含两个参数：描述当前套件的字符串和实际执行的函数。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;A suite is just a function&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="literal">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;a spec&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">expect</span>(a).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="it"><a href="#it" class="headerlink" title="it"></a>it</h4><p>it块成为测试用例，定义一个单独的测试case，是测试的最小单位。一个 it 应当包含至少一个 expectation。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">it</span>(description, testFunction, timeout)</span><br></pre></td></tr></table></figure>
<p>it 函数包含三个参数， 第一个参数为字符串，用于描述当前测试用例；第二个参数为实际执行的函数，第三个参数为一个异步的超时时间。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;A suite is just a function&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;a spec&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="literal">true</span>;</span><br><span class="line">        <span class="title function_">expect</span>(a).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;another spec&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="literal">false</span>;</span><br><span class="line">        <span class="title function_">expect</span>(a).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="expectations"><a href="#expectations" class="headerlink" title="expectations"></a>expectations</h4><p>expectations 是由方法 expect 方法创建的断言， 返回 true 或 false 。expect 语句传递一个参数，及要测试的实际值，后面紧跟一个 Matchers，来判断测试是否正确。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;A suite is just a function&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> a;</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;a spec&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="literal">true</span>;</span><br><span class="line">        <span class="comment">// 下面语句即为 expectation</span></span><br><span class="line">        <span class="title function_">expect</span>(a).<span class="title function_">toBe</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;another spec&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        a = <span class="literal">false</span>;</span><br><span class="line">        <span class="title function_">expect</span>(a).<span class="title function_">toBe</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="Matchers"><a href="#Matchers" class="headerlink" title="Matchers"></a>Matchers</h4><p>Matchers 用来对实际测试值与期望值进行比较，实现断言操作。<br><strong>任何Matcher都能通过在expect调用Matcher之前，通过调用not来实现一个否定断言。</strong></p>
<p>常用的Matchers():</p>
<blockquote>
<ul>
<li>not 表示对后面断言的否定</li>
</ul>
</blockquote>
<ul>
<li>toBe() 判断实际值与期望值是否相等，等价于 ===</li>
<li>toBeDefined() 判断变量或属性是否已声明且赋值（是否不等于undefined）</li>
<li>toBeUndefined() 判断变量或属性是否已声明且赋值（是否等于undefined)</li>
<li>toBeNull() 判断变量是否为null</li>
<li>toBeNaN() 判断变量是否为NaN(not a number)</li>
<li>toBeTruthy() 判断变量如果转换为布尔值，是否为true</li>
<li>toBeFalsy() 判断变量如果转换为布尔值，是否为false</li>
<li>toEqual() 判断变量是否相等</li>
<li>toBeLessThan() 判断实际值是否小于期望值</li>
<li>toBeLessThanOrEqual() 判断实际值是佛小于等于期望值</li>
<li>toContain() 判断数组或字符串是否包含期望值，不能用于对象判断</li>
<li>toMatch() 判断实际值是否与正则匹配</li>
</ul>
<h4 id="测试用例钩子函数"><a href="#测试用例钩子函数" class="headerlink" title="测试用例钩子函数"></a>测试用例钩子函数</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;test&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="title function_">beforeAll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在所有的Spect(it)执行之前执行，且只执行一次。</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">afterAll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在所有Spect(it)执行之后执行，且只执行一次。</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在describe每个Spect(it)执行之前执行。</span></span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="title function_">afterEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在describe每个Spect(it)执行之后执行。</span></span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="this-关键字"><a href="#this-关键字" class="headerlink" title="this 关键字"></a>this 关键字</h4><p>describe 里的每个 beforeEach, afterEach, it 的 this 都是相同的。</p>
<h4 id="describe-嵌套"><a href="#describe-嵌套" class="headerlink" title="describe 嵌套"></a>describe 嵌套</h4><p>describe 可以嵌套， 不同 describe 函数体执行时，从外到内依次执行 beforeEach，每个 it 执行结束时，会按从内到外依次执行 afterEach。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title function_">describe</span>(<span class="string">&#x27;test describe&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> foo;</span><br><span class="line">    <span class="title function_">beforeAll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        foo = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">afterAll</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        foo = <span class="string">&#x27;all&#x27;</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">beforeEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        foo = <span class="number">1</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="title function_">afterEach</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        foo = <span class="number">2</span>;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">it</span>(<span class="string">&#x27;test 1&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="number">1</span>).<span class="title function_">toBe</span>(<span class="number">1</span>);</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">describe</span>(<span class="string">&#x27;test inner&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="title function_">expect</span>(<span class="literal">true</span>).<span class="title function_">toBeTruthy</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>单元测试</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Nginx</title>
    <url>/2020/11/30/%E5%88%9D%E8%AF%86nginx/</url>
    <content><![CDATA[<h3 id="Nginx概述"><a href="#Nginx概述" class="headerlink" title="Nginx概述"></a>Nginx概述</h3><p>Nginx (engine x) 是一款轻量级的 Web 服务器 、反向代理服务器及电子邮件（IMAP/POP3）代理服务器。</p>
<p>由伊戈尔·赛索耶夫创建并于2004年首次公开发布。2011年成立同名公司以提供支持。2019年3月11日，Nginx公司被F5 Networks以6.7亿美元收购。</p>
<p>Nginx是免费的开源软件，根据类BSD许可证的条款发布。一大部分Web服务器使用Nginx，通常作为负载均衡器。</p>
<span id="more"></span>

<p><img src="/images/nginx/nginx_server_history.png" alt="web server市场份额统计"></p>
<p><img src="/images/nginx/nginx_market.png" alt="2020年10月web server市场份额"></p>
<ul>
<li>Apache：Apache 软件基金会的一个开放源码的网页服务器，可以在大多数计算机操作系统中运行。由于其多平台和安全性被广泛使用，是最流行的 Web服务器端软件之一。它快速、可靠并且可通过简单的 API 扩展，将 Perl/Python 等解释器编译到服务器中。</li>
<li>Microsoft：微软提供的基于运行 Microsoft Windows 的互联网基本服务。互联网信息服务（Internet Information Services），简称 IIS。</li>
<li>Google：谷歌自主开发的 Google Web Server，简称 gws 。</li>
<li>nginx：由伊戈尔·赛索耶夫为俄罗斯访问量第二的 Rambler.ru 站点开发的，免费开源、轻量级、高性能 Web 服务器。</li>
</ul>
<h4 id="Tengine"><a href="#Tengine" class="headerlink" title="Tengine"></a>Tengine</h4><p><a href="http://tengine.taobao.org/">Tengine</a></p>
<blockquote>
<p>Tengine是由淘宝网发起的Web服务器项目。它在Nginx的基础上，针对大访问量网站的需求，添加了很多高级功能和特性。Tengine的性能和稳定性已经在大型的网站如淘宝网，天猫商城等得到了很好的检验。它的最终目标是打造一个高效、稳定、安全、易用的Web平台。</p>
</blockquote>
<h4 id="OpenResty"><a href="#OpenResty" class="headerlink" title="OpenResty"></a>OpenResty</h4><p><a href="https://openresty.org/cn/">OpenResty</a></p>
<blockquote>
<p>OpenResty® 是一个基于 Nginx 与 Lua 的高性能 Web 平台，其内部集成了大量精良的 Lua 库、第三方模块以及大多数的依赖项。用于方便地搭建能够处理超高并发、扩展性极高的动态 Web 应用、Web 服务和动态网关。</p>
</blockquote>
<h4 id="国内主流网站的使用情况"><a href="#国内主流网站的使用情况" class="headerlink" title="国内主流网站的使用情况"></a>国内主流网站的使用情况</h4><ul>
<li><p>百度主页</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.baidu.com/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Accept-Ranges: bytes</span><br><span class="line">Cache-Control: private, no-cache, no-store, proxy-revalidate, no-transform</span><br><span class="line">Connection: keep-alive</span><br><span class="line">Content-Length: 277</span><br><span class="line">Content-Type: text/html</span><br><span class="line">Date: Tue, 24 Nov 2020 09:23:21 GMT</span><br><span class="line">Etag: <span class="string">&quot;575e1f5d-115&quot;</span></span><br><span class="line">Last-Modified: Mon, 13 Jun 2016 02:50:05 GMT</span><br><span class="line">Pragma: no-cache</span><br><span class="line">Server: bfe/1.0.8.18</span><br></pre></td></tr></table></figure></li>
<li><p>淘宝主站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.taobao.com/</span><br><span class="line">HTTP/2 200</span><br><span class="line">server: Tengine</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>腾讯主站</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.qq.com/</span><br><span class="line">HTTP/2 200</span><br><span class="line"><span class="built_in">date</span>: Tue, 24 Nov 2020 09:26:35 GMT</span><br><span class="line">content-type: text/html; charset=GB2312</span><br><span class="line">server: squid/3.5.24</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>腾讯邮箱</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://mail.qq.com/</span><br><span class="line">HTTP/2 200</span><br><span class="line">server: nginx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>新浪</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://sina.com/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx/1.13.7</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
<li><p>头条</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.toutiao.com/</span><br><span class="line">HTTP/2 200</span><br><span class="line">server: Tengine</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>京东</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.jd.com/</span><br><span class="line">HTTP/1.1 200 OK</span><br><span class="line">Server: nginx</span><br><span class="line">...</span><br></pre></td></tr></table></figure></li>
<li><p>美团</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ curl -I https://www.meituan.com/</span><br><span class="line">HTTP/1.1 302 Moved Temporarily</span><br><span class="line">Server: openresty</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="为什么选择-nginx？"><a href="#为什么选择-nginx？" class="headerlink" title="为什么选择 nginx？"></a>为什么选择 nginx？</h4><ul>
<li><p>更快</p>
<ul>
<li>正常情况下，单次次请求的响应更快</li>
<li>高并发情况下，相比其他服务器响应更快</li>
</ul>
</li>
<li><p>高扩展性</p>
<p>nginx 由不同层次，不同功能，不同类型的低耦合的模块组成。</p>
</li>
<li><p>高可靠性</p>
<p>Master/Wokr工作模式</p>
</li>
<li><p>低内存消耗</p>
<p>一般情况下，10000个非活跃的HTTP keep-alive连接在nginx中仅消耗2.5MB内存。</p>
</li>
<li><p>单机支持10w以上的并发连接</p>
<p>理论上，Nginx支持的并发连接上限取决于内存，10w远未封顶。</p>
</li>
<li><p>热部署</p>
</li>
<li><p>最自由的BSD协议</p>
</li>
</ul>
<h4 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h4><p><img src="/images/nginx/forward_proxy.png" alt="正向代理"></p>
<p>正向代理是一个位于客户端和目标服务器之间的服务器(代理服务器)，为了从目标服务器取得内容，客户端向代理服务器发送一个请求并指定目标，然后代理服务器向目标服务器转交请求并将获得的内容返回给客户端。</p>
<p>为什么要使用正向代理：</p>
<ul>
<li><p>突破访问限制</p>
<p>比如我们日常使用VPN来访问国外网站</p>
</li>
<li><p>提高访问速度</p>
<p>通常代理服务器都设置一个较大的硬盘缓冲区，会将部分请求的响应保存到缓冲区中，当其他用户再访问相同的信息时， 则直接由缓冲区中取出信息，传给用户，以提高访问速度。</p>
</li>
<li><p>隐藏客户端真实IP</p>
</li>
</ul>
<h4 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h4><p><img src="/images/nginx/reverse_proxy.png" alt="反向代理"></p>
<p>反向代理是指以代理服务器来接受internet上的连接请求，然后将请求转发给内部网络上的服务器，并将从服务器上得到的结果返回给internet上请求连接的客户端，此时代理服务器对外就表现为一个反向代理服务器。</p>
<p>为什么使用反向代理?</p>
<ul>
<li>保护和隐藏原始资源服务器</li>
<li>加密和SSL加速</li>
<li>通过缓存静态资源，加速Web请求</li>
<li>实现负载均衡</li>
</ul>
<h4 id="正向代理与反向代理的区别"><a href="#正向代理与反向代理的区别" class="headerlink" title="正向代理与反向代理的区别"></a>正向代理与反向代理的区别</h4><ul>
<li><p>正向代理和反向代理的区别在于代理的对象不同。正向代理代理的是客户端，反向代理代理的是服务端。</p>
</li>
<li><p>正向代理一般是在客户端架设，比如安装代理软件等，反向代理一般是服务端架设。</p>
</li>
<li><p>正向代理中，服务器不知道真正的客户端到底是谁，以为访问自己的就是真实的客户端。而在反向代理中，客户端不知道真正的服务器是谁，以为自己访问的就是真实的服务器</p>
</li>
<li><p>正向代理和反向代理的作用和目的不同。正向代理主要是用来解决访问限制问题。而反向代理则是提供负载均衡、安全防护等作用。二者均能提高访问速度。</p>
</li>
</ul>
<h4 id="负载均衡"><a href="#负载均衡" class="headerlink" title="负载均衡"></a>负载均衡</h4><h3 id="nginx-进程模型"><a href="#nginx-进程模型" class="headerlink" title="nginx 进程模型"></a>nginx 进程模型</h3><p><img src="/images/nginx/nginx_model.png" alt="nginx_model"></p>
<h3 id="nginx-常用命令"><a href="#nginx-常用命令" class="headerlink" title="nginx 常用命令"></a>nginx 常用命令</h3><table>
<thead>
<tr>
<th>参数</th>
<th>含义</th>
</tr>
</thead>
<tbody><tr>
<td>-?,-h</td>
<td>this help</td>
</tr>
<tr>
<td>-v</td>
<td>show version and exit</td>
</tr>
<tr>
<td>-V</td>
<td>show version and configure options then exit</td>
</tr>
<tr>
<td>-t</td>
<td>test configuration and exit</td>
</tr>
<tr>
<td>-T</td>
<td>test configuration, dump it and exit</td>
</tr>
<tr>
<td>-q</td>
<td>suppress non-error messages during configuration testing</td>
</tr>
<tr>
<td>-s signal</td>
<td>send signal to a master process: stop, quit, reopen, reload</td>
</tr>
<tr>
<td>-p prefix</td>
<td>set prefix path (default: /etc/nginx/)</td>
</tr>
<tr>
<td>-c filename</td>
<td>set configuration file (default: /etc/nginx/nginx.conf)</td>
</tr>
<tr>
<td>-g directives</td>
<td>set global directives out of configuration file</td>
</tr>
</tbody></table>
<h3 id="nginx配置文件"><a href="#nginx配置文件" class="headerlink" title="nginx配置文件"></a>nginx配置文件</h3><h4 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user  nginx;</span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line">error_log  /var/log/nginx/error.log warn;</span><br><span class="line">pid        /var/run/nginx.pid;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       /etc/nginx/mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line"></span><br><span class="line">    log_format  main  <span class="string">&#x27;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;$status $body_bytes_sent &quot;$http_referer&quot; &#x27;</span></span><br><span class="line">                      <span class="string">&#x27;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">    access_log  /var/log/nginx/access.log  main;</span><br><span class="line"></span><br><span class="line">    sendfile        on;</span><br><span class="line">    <span class="comment">#tcp_nopush     on;</span></span><br><span class="line"></span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line"></span><br><span class="line">    <span class="comment">#gzip  on;</span></span><br><span class="line"></span><br><span class="line">    include /etc/nginx/conf.d/*.conf;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><ul>
<li>配置文件由指令与指令块构成</li>
<li>每条指令以;分号结尾，指令与参数间以空格符合分割</li>
<li>指令块以{} 大括号将多条指令组织在一起</li>
<li>include 语句允许组合多个配置文件以提升可维护性</li>
<li>使用 # 符号添加注释，提高可读性</li>
<li>使用 $ 符号使用变量</li>
<li>部分指令的参数支持正则表达式</li>
</ul>
<h4 id="nginx配置构成"><a href="#nginx配置构成" class="headerlink" title="nginx配置构成"></a>nginx配置构成</h4><ul>
<li><p>全局块</p>
<p>从配置文件开始到events之间的模块配置，配置影响nginx全局的指令。一般有运行nginx服务器的用户组，nginx进程pid存放路径，日志存放路径，配置文件引入，允许生成worker process数等。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">user</span><br><span class="line">work_process: auto | 4;</span><br></pre></td></tr></table></figure>
</li>
<li><p>events</p>
<p>events 主要影响 nginx 服务器与用户网络的链接。有每个进程的最大连接数，选取哪种事件驱动模型处理连接请求，是否允许同时接受多个网路连接，开启多个网络连接序列化等</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">events &#123;</span><br><span class="line">  use epoll;</span><br><span class="line">  work_connections 65535;</span><br><span class="line">  <span class="comment"># ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>http</p>
<p>nginx中配置最频繁的部分。可以嵌套多个server，配置代理，缓存，日志定义等绝大多数功能和第三方模块的配置。</p>
<p>http分为全局块，server 块。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">http &#123;</span><br><span class="line">  include       mime.types;</span><br><span class="line">  default_type  application/octet-stream;</span><br><span class="line">  upstream node_cluster &#123;</span><br><span class="line">    server 10.16.48.158:8080;</span><br><span class="line">    server 10.16.48.158:8081;</span><br><span class="line">    server 10.16.48.158:8082;</span><br><span class="line">  &#125;</span><br><span class="line">  server &#123;</span><br><span class="line">    server_name docker.test;</span><br><span class="line">    listen 80;</span><br><span class="line">    index index.html index.htm;</span><br><span class="line">    root /apps/;</span><br><span class="line">    location ~ /docker/ &#123;</span><br><span class="line">      proxy_pass http://node_cluster;</span><br><span class="line">      proxy_http_version 1.1;</span><br><span class="line">      proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line">      proxy_set_header Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line">      proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line">      proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    access_log  /var/log/nginx/docker.test.log;</span><br><span class="line">    error_log  /var/log/nginx/docker.test.error.log;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>location的基本语法</p>
<ul>
<li>匹配URI类型，有四种参数可选，也可不带参数</li>
<li>命令location, 用@来标识</li>
</ul>
</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">location [ = | ~ | ~* | ^~ ] /URI &#123;...&#125;</span><br><span class="line">location @/name/ &#123;...&#125;</span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th align="left">参数</th>
<th align="left">解释</th>
</tr>
</thead>
<tbody><tr>
<td align="left">空</td>
<td align="left">location后没有参数，直接跟着标准URI,表示前缀匹配，代表跟请求中的URI从头开始匹配</td>
</tr>
<tr>
<td align="left">=</td>
<td align="left">用于标准 URI 前，要求请求字符串与其精准匹配，成功则立即处理，nginx停止搜索其他匹配。</td>
</tr>
<tr>
<td align="left">^~</td>
<td align="left">用于标准 URI 前，并要求一旦匹配到就会立即处理，不再去匹配其他的那些个正则 URI，一般用来匹配目录</td>
</tr>
<tr>
<td align="left">~</td>
<td align="left">用于正则 URI 前，表示 URI 包含正则表达式， 区分大小写</td>
</tr>
<tr>
<td align="left">~*</td>
<td align="left">用于正则 URI 前， 表示 URI 包含正则表达式， 不区分大小写</td>
</tr>
<tr>
<td align="left">@</td>
<td align="left">@ 定义一个命名的 location，@ 定义的locaiton名字一般用在内部定向，例如error_page, try_files命令中。它的功能类似于编程中的goto。</td>
</tr>
</tbody></table>
<p>location 匹配顺序</p>
<p>nginx有两层指令来匹配请求 URI 。第一个层次是 server 指令，它通过域名、ip 和端口来做第一层级匹配，当找到匹配的 server 后就进入此 server 的 location 匹配。</p>
<p>location 的匹配并不完全按照其在配置文件中出现的顺序来匹配，请求URI 会按如下规则进行匹配：</p>
<ul>
<li>先精准匹配 = ，精准匹配成功则会立即停止其他类型匹配；</li>
<li>没有精准匹配成功时，进行前缀匹配。先查找带有 ^~ 的前缀匹配，带有 ^~ 的前缀匹配成功则立即停止其他类型匹配，普通前缀匹配（不带参数 ^~ ）成功则会暂存，继续查找正则匹配；</li>
<li>= 和 ^~ 均未匹配成功前提下，查找正则匹配 ~ 和 ~* 。当同时有多个正则匹配时，按其在配置文件中出现的先后顺序优先匹配，命中则立即停止其他类型匹配；</li>
<li>所有正则匹配均未成功时，返回步骤 2 中暂存的普通前缀匹配（不带参数 ^~ ）结果</li>
</ul>
<p>以上规则简单总结就是优先级从高到低依次为（序号越小优先级越高）：</p>
<blockquote>
<ol>
<li>location =    # 精准匹配</li>
<li>location ^~   # 带参前缀匹配</li>
<li>location ~    # 正则匹配（区分大小写）</li>
<li>location ~*   # 正则匹配（不区分大小写）</li>
<li>location /a   # 普通前缀匹配，优先级低于带参数前缀匹配。</li>
<li>location /    # 任何没有匹配成功的，都会匹配这里处理</li>
</ol>
</blockquote>
<h4 id="http模块配置"><a href="#http模块配置" class="headerlink" title="http模块配置"></a>http模块配置</h4><h3 id="nginx负载均衡的几种方法"><a href="#nginx负载均衡的几种方法" class="headerlink" title="nginx负载均衡的几种方法"></a>nginx负载均衡的几种方法</h3><h4 id="轮询-round-robin"><a href="#轮询-round-robin" class="headerlink" title="轮询(round-robin)"></a>轮询(round-robin)</h4><p>每个请求按时间顺序逐一分配到不同的后端服务器，如果后端服务器down掉，能自动剔除</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream node_cluster &#123;</span><br><span class="line">    server 10.16.48.158:8080;</span><br><span class="line">    server 10.16.48.158:8081;</span><br><span class="line">    server 10.16.48.158:8082;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    location ~ /docker/ &#123;</span><br><span class="line">        proxy_pass http://node_cluster;</span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="加权轮询"><a href="#加权轮询" class="headerlink" title="加权轮询"></a>加权轮询</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream node_cluster &#123;</span><br><span class="line">    server 10.16.48.158:8080 weight=2;</span><br><span class="line">    server 10.16.48.158:8081 weight=1;</span><br><span class="line">    server 10.16.48.158:8082 weight=1;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    root /apps/;</span><br><span class="line">    location ~ /docker/ &#123;</span><br><span class="line">        proxy_pass http://node_cluster;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="ip-hash"><a href="#ip-hash" class="headerlink" title="ip-hash"></a>ip-hash</h4><p>根据每个请求的ip的hash结果分配，因此每个固定ip能访问到同一个后端服务器，可以解决session问题。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">upstream node_cluster &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 10.16.48.158:8080;</span><br><span class="line">    server 10.16.48.158:8081;</span><br><span class="line">    server 10.16.48.158:8082;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">    ...</span><br><span class="line">    root /apps/;</span><br><span class="line">    location ~ /docker/ &#123;</span><br><span class="line">        proxy_pass http://node_cluster;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="热备"><a href="#热备" class="headerlink" title="热备"></a>热备</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream node_cluster &#123;</span><br><span class="line">    ip_hash;</span><br><span class="line">    server 10.16.48.158:8080;</span><br><span class="line">    server 10.16.48.158:8081;</span><br><span class="line">    server 10.16.48.158:8082 back;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="其他的一些方式"><a href="#其他的一些方式" class="headerlink" title="其他的一些方式"></a>其他的一些方式</h4><ul>
<li><p>fair（第三方）</p>
<p>按照后端服务器的响应时间来分配请求，响应时间短的优先分配。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream favresin&#123;</span><br><span class="line">    server 10.0.0.10:8080;</span><br><span class="line">    server 10.0.0.11:8080;</span><br><span class="line">    fair;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>url_hash（第三方）</p>
<p>按访问url的hash结果来分配请求，使每个url定向到同一个后端服务器，后端服务器为缓存时比较有效。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">upstream resinserver&#123;</span><br><span class="line">    server 10.0.0.10:7777;</span><br><span class="line">    server 10.0.0.11:8888;</span><br><span class="line">    <span class="built_in">hash</span> <span class="variable">$request_uri</span>;</span><br><span class="line">    hash_method crc32;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="参数解释"><a href="#参数解释" class="headerlink" title="参数解释"></a>参数解释</h4></li>
<li><p>down，表示当前的server暂时不参与负载均衡。</p>
</li>
<li><p>backup，预留的备份机器。当其他所有的非backup机器出现故障或者忙的时候，才会请求backup机器，因此这台机器的压力最轻。</p>
</li>
<li><p>max_fails，允许请求失败的次数，默认为1。当超过最大次数时，返回proxy_next_upstream 模块定义的错误。</p>
</li>
<li><p>fail_timeout，请求失败超时时间，在经历了max_fails次失败后，暂停服务的时间。max_fails和fail_timeout可以一起使用</p>
</li>
</ul>
<p><em>参考</em></p>
<ul>
<li><a href="https://www.nginx.cn/doc/">nginx中文文档</a></li>
<li><a href="http://tengine.taobao.org/book/index.html#">Nginx开发从入门到精通</a></li>
<li><a href="https://cloud.tencent.com/developer/article/1418457">终于有人把正向代理和反向代理解释的明明白白了</a></li>
<li><a href="https://www.cnblogs.com/lvgg/p/6140584.html">nignx 负载均衡的几种算法介绍</a></li>
<li><a href="https://www.cnblogs.com/sunsky303/p/11865321.html">hash 算法原理及应用漫谈</a></li>
<li><a href="http://nginx.org/en/docs/varindex.html">Alphabetical index of variables</a></li>
</ul>
]]></content>
      <categories>
        <category>Nginx</category>
      </categories>
      <tags>
        <tag>Nginx</tag>
      </tags>
  </entry>
  <entry>
    <title>利用github actions实现hexo博客的自动部署</title>
    <url>/2021/11/01/%E5%88%A9%E7%94%A8github-action%E5%AE%9E%E7%8E%B0hexo%E5%8D%9A%E5%AE%A2%E7%9A%84%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2/</url>
    <content><![CDATA[<p><img src="/images/github/actions-workflow.svg"><br>之前从阮一峰老师的博客，了解了github 推出的 github actions，有尝试过一点好玩的定时任务。最近想起，自己好久没有更新博客了，于是想来用 github actions 实现基于 hexo 框架的博客自动部署。（你看到的就是通过github actions 自动部署的~~）。</p>
<span id="more"></span>

<h3 id="什么是-Github-Actions"><a href="#什么是-Github-Actions" class="headerlink" title="什么是 Github Actions"></a>什么是 Github Actions</h3><blockquote>
<p>Automate, customize, and execute your software development workflows right in your repository with GitHub Actions. You can discover, create, and share actions to perform any job you’d like, including CI/CD, and combine actions in a completely customized workflow.</p>
</blockquote>
<p>Github Actions 是 Github 官方推出的持续集成服务，它允许你自定义工作流程，以满足自身的需求。我们可以通过创建工作流程文件，实现自动化构建、测试、打包、部署项目等。</p>
<h3 id="Github-Actions的工作流程语法"><a href="#Github-Actions的工作流程语法" class="headerlink" title="Github Actions的工作流程语法"></a>Github Actions的工作流程语法</h3><p>Github Actions的几个专业术语：</p>
<ul>
<li>workflow （工作流程）：持续集成一次运行的过程，就是一个 workflow。</li>
<li>job （任务）：一个 workflow 由一个或多个 jobs 构成，含义是一次持续集成的运行，可以完成多个任务。</li>
<li>step（步骤）：每个 job 由多个 step 构成，一步步完成。</li>
<li>action （动作）：每个 step 可以依次执行一个或多个命令（action）。</li>
</ul>
<p>Github Actions的配置文件叫做 workflow，存放于代码仓库根目录下的 .github/workflows目录下。</p>
<p>workflow 文件采用 YAML 格式，文件名可以任意命名，但统一后缀为 .yml。一个仓库可以拥有多个workflow文件， Github 只要发现 .github/workflows 目录下存在 .yml文件，就会自动运行该文件。</p>
<p>workflow 文件的配置字段非常多，可参考<a href="https://docs.github.com/en/actions/learn-github-actions/workflow-syntax-for-github-actions">官方文档</a>。(<a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">中文地址</a>)</p>
<p>文件示例：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This is a basic workflow to help you get started with Actions</span></span><br><span class="line"></span><br><span class="line"><span class="attr">name:</span> <span class="string">HELLO</span> <span class="string">GITHUB</span> <span class="string">ACTION</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Controls when the workflow will run</span></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="comment"># Triggers the workflow on push or pull request events but only for the main branch</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">  <span class="attr">schedule:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">cron:</span> <span class="string">&#x27;0 0 * * *&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># Allows you to run this workflow manually from the Actions tab</span></span><br><span class="line">  <span class="attr">workflow_dispatch:</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># A workflow run is made up of one or more jobs that can run sequentially or in parallel</span></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="comment"># This workflow contains a single job called &quot;build&quot;</span></span><br><span class="line">  <span class="attr">build:</span></span><br><span class="line">    <span class="comment"># The type of runner that the job will run on</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Steps represent a sequence of tasks that will be executed as part of the job</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="comment"># Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it</span></span><br><span class="line"><span class="comment">#       - uses: actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">&#x27;Checkout codes&#x27;</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a single command using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">weather</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">bash</span> <span class="string">./weather.sh</span></span><br><span class="line"></span><br><span class="line">      <span class="comment"># Runs a set of commands using the runners shell</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Get</span> <span class="string">Date</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">echo</span> <span class="string">&quot;REPORT_DATE=$(TZ=&#x27;:Asia/Shanghai&#x27; date &#x27;+%Y-%m-%d %T&#x27;)&quot;</span> <span class="string">&gt;&gt;</span> <span class="string">$GITHUB_ENV</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">Send</span> <span class="string">email</span></span><br><span class="line">        <span class="attr">uses:</span> <span class="string">dawidd6/action-send-mail@master</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">server_address:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.MAIL_SERVICE</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">server_port:</span> <span class="number">465</span></span><br><span class="line">          <span class="attr">username:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.MAIL_USERNAME</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">password:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.MAIL_PASSWORD</span> <span class="string">&#125;&#125;</span></span><br><span class="line">          <span class="attr">subject:</span> <span class="string">天气预报</span> <span class="string">($&#123;&#123;env.REPORT_DATE&#125;&#125;)</span></span><br><span class="line">          <span class="attr">html_body:</span> <span class="string">file://result.html</span></span><br><span class="line">          <span class="attr">to:</span> <span class="string">jiaochunxiao2008@163.com</span></span><br><span class="line">          <span class="attr">from:</span> <span class="string">天气小助手</span></span><br><span class="line">          <span class="attr">content_type:</span> <span class="string">text/html</span></span><br></pre></td></tr></table></figure>

<ul>
<li>name: workflow名称，可省略，默认为当前workflow文件名</li>
<li>on: 触发 workflow的条件，通常是某些事件，上述示例中当git push时，就会触发。<br>on 字段也可以为数组，表示一系列事件都可以触发，如：<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span> [<span class="string">push</span>, <span class="string">pull_request</span>]</span><br></pre></td></tr></table></figure>
完整事件列表，可参考<a href="https://docs.github.com/en/actions/learn-github-actions/events-that-trigger-workflows">官方文档</a><ul>
<li>on.&lt;push|pull_request&gt;.&lt;tags|branches&gt;<br>指定触发事件事，限定的分支或标签<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure></li>
<li>on.schedule<br>您可以使用 POSIX cron 语法安排工作流程在特定的 UTC 时间运行。 预定的工作流程在默认或基础分支的最新提交上运行。 您可以运行预定工作流程的最短间隔是每 5 分钟一次。</li>
</ul>
</li>
<li>jobs<br>工作流程运行包括一项或多项作业。 作业默认是并行运行。 要按顺序运行作业，您可以使用&lt;job_id&gt;needs 关键词在其他作业上定义依赖项。每个作业在 runs-on 指定的运行器环境中运行。<br>在工作流程的使用限制之内可运行无限数量的作业。<ul>
<li>jobs.&lt;job_id&gt;.name<br>workflow 文件的主体是jobs字段，表示要执行的一项或多项任务。<br>jobs字段里面，需要写出每一项任务的job_id，具体名称自定义。job_id里面的name字段是任务的说明。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">my_first_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">first</span> <span class="string">job</span></span><br><span class="line">  <span class="attr">my_second_job:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">My</span> <span class="string">second</span> <span class="string">job</span></span><br></pre></td></tr></table></figure></li>
<li>jobs.&lt;job_id&gt;.needs<br>识别在此作业运行之前必须成功完成的任何作业。 它可以是一个字符串，也可以是字符串数组。 如果某个作业失败，则所有需要它的作业都会被跳过，除非这些作业使用让该作业继续的条件表达式。<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">job1:</span></span><br><span class="line">  <span class="attr">job2:</span></span><br><span class="line">    <span class="attr">needs:</span> <span class="string">job1</span></span><br><span class="line">  <span class="attr">job3:</span></span><br><span class="line">    <span class="attr">needs:</span> [<span class="string">job1</span>, <span class="string">job2</span>]</span><br></pre></td></tr></table></figure>
在此示例中，job1 必须在 job2 开始之前成功完成，而 job3 要等待 job1 和 job2 完成。</li>
<li>jobs.&lt;job_id&gt;.runs-on<br>必填。 要运行作业的机器类型。 机器可以是 GitHub 托管的运行器或自托管的运行器。</li>
<li>jobs.&lt;job_id&gt;.steps<br>steps字段指定每个 Job 的运行步骤，可以包含一个或多个步骤。每个步骤都可以指定以下三个字段。<ul>
<li>jobs.&lt;job_id&gt;.steps.name：步骤名称</li>
<li>jobs.&lt;job_id&gt;.steps.run：该步骤运行的命令或者 action。</li>
<li>jobs.&lt;job_id&gt;.steps.env：该步骤所需的环境变量。</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>了解完基本的Github Actions知识后，下面开始步入正题：如何利用github actions实现hexo博客的自动部署呢？</p>
<h3 id="如何利用github-actions实现hexo博客的自动部署"><a href="#如何利用github-actions实现hexo博客的自动部署" class="headerlink" title="如何利用github actions实现hexo博客的自动部署"></a>如何利用github actions实现hexo博客的自动部署</h3><p>由于我的博客地址是由两个仓库构成的，一个是博客的源码地址（blog-source，非公开)，一个是博客的部署地址(jiaochunxiao.github.io)的，公开的。所以以下步骤将展示两个仓库下的自动化部署流程。<br>当然，如果你的博客是通过同一仓库，不同分支完成的，也可以参考本文，适当调整完成。</p>
<h4 id="生成公私钥"><a href="#生成公私钥" class="headerlink" title="生成公私钥"></a>生成公私钥</h4><p>在仓库下执行以下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -b 4096 -C <span class="string">&quot;<span class="subst">$(git config user.email)</span>&quot;</span> -f github-deploy-key -N <span class="string">&quot;&quot;</span></span><br></pre></td></tr></table></figure>
<p>目录将生成两个文件</p>
<ul>
<li>github-deploy-key.pub: 公钥文件</li>
<li>github-deploy-key: 私钥文件</li>
</ul>
<p><strong>切记不要将此文件上传至github仓库中。</strong></p>
<h4 id="为博客源码仓库添加私钥"><a href="#为博客源码仓库添加私钥" class="headerlink" title="为博客源码仓库添加私钥"></a>为博客源码仓库添加私钥</h4><p>将github-deploy-key文件中的内容添加到，博客源码仓库（blog-source) 的 secret 中。</p>
<p>blog-source -&gt; setttings -&gt; secrets -&gt; new repository secret:</p>
<p><img src="/images/github/add_private.png"></p>
<p>添加后如图：<br><img src="/images/github/private_key.png"></p>
<h4 id="为部署仓库（xxx-github-io-添加公钥"><a href="#为部署仓库（xxx-github-io-添加公钥" class="headerlink" title="为部署仓库（xxx.github.io)添加公钥"></a>为部署仓库（xxx.github.io)添加公钥</h4><p>将github-deploy-key.pub文件中的内容添加到 部署仓库的deploy keys中。</p>
<p>xxx.github.io -&gt; setttings -&gt; deploy keys -&gt; add new deploy key:<br><img src="/images/github/add_public.png"></p>
<p>添加后如图；<br><img src="/images/github/public_key.png"></p>
<h4 id="源码博客编写-Github-Actions"><a href="#源码博客编写-Github-Actions" class="headerlink" title="源码博客编写 Github Actions"></a>源码博客编写 Github Actions</h4><p>在博客源码目录下创建：./github/workflow/deploy.yml文件。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">name:</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">on:</span></span><br><span class="line">  <span class="attr">push:</span></span><br><span class="line">    <span class="attr">branches:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line"></span><br><span class="line"><span class="attr">jobs:</span></span><br><span class="line">  <span class="attr">build-and-deploy:</span></span><br><span class="line">    <span class="attr">runs-on:</span> <span class="string">ubuntu-latest</span></span><br><span class="line">    <span class="attr">steps:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/checkout@v2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">uses:</span> <span class="string">actions/setup-node@v2</span></span><br><span class="line">        <span class="attr">with:</span></span><br><span class="line">          <span class="attr">node-version:</span> <span class="number">14.17</span><span class="number">.4</span></span><br><span class="line">          <span class="comment"># registry-url: https://registry.npmmirror.com/</span></span><br><span class="line"></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">setup</span> <span class="string">hexo</span></span><br><span class="line">        <span class="attr">env:</span></span><br><span class="line">          <span class="attr">ACTION_DEPLOY_KEY:</span> <span class="string">$&#123;&#123;</span> <span class="string">secrets.HEXO_DEPLOY_KEY</span> <span class="string">&#125;&#125;</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">|</span></span><br><span class="line"><span class="string">          mkdir -p ~/.ssh/</span></span><br><span class="line"><span class="string">          echo &quot;$ACTION_DEPLOY_KEY&quot; &gt; ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          chmod 600 ~/.ssh/id_rsa</span></span><br><span class="line"><span class="string">          ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts</span></span><br><span class="line"><span class="string">          git config --global user.name &#x27;jiaochunxiao&#x27;</span></span><br><span class="line"><span class="string">          git config --global user.email &#x27;jcx13627607951@gmail.com&#x27;</span></span><br><span class="line"><span class="string">          npm install</span></span><br><span class="line"><span class="string"></span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">build</span></span><br><span class="line">        <span class="attr">run:</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">clean</span> <span class="string">&amp;&amp;</span> <span class="string">npm</span> <span class="string">run</span> <span class="string">deploy</span></span><br></pre></td></tr></table></figure>

<h4 id="hexo配置修改"><a href="#hexo配置修改" class="headerlink" title="hexo配置修改"></a>hexo配置修改</h4><p>在源码仓仓库下的 _config.yml 文件中，增加以下内容</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repository:</span> <span class="string">git@github.com:jiaochunxiao/jiaochunxiao.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>此处repo填写ssh形式，填写https模式可能会导致失败</p>
</blockquote>
<h4 id="部署验证"><a href="#部署验证" class="headerlink" title="部署验证"></a>部署验证</h4><p>git push后：</p>
<p><img src="/images/github/deploying.png"></p>
<p>部署成功：<br><img src="/images/github/deployed.png"></p>
<p><em>参考</em></p>
<ul>
<li><a href="https://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html">GitHub Actions 入门教程</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/133764310">GitHub Actions 自动部署 Hexo</a></li>
<li><a href="https://docs.github.com/cn/actions/learn-github-actions/workflow-syntax-for-github-actions">GitHub Actions 的工作流程语法</a></li>
</ul>
]]></content>
      <categories>
        <category>工程化</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>github actions</tag>
      </tags>
  </entry>
  <entry>
    <title>前端常用方法总结</title>
    <url>/2016/11/15/%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>1、数字千分位格式化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">thousandFormate</span>(<span class="params">number</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> str = (number||<span class="number">0</span>).<span class="title function_">toString</span>(), result = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">while</span> (str.<span class="property">length</span> &gt; <span class="number">3</span>) &#123;</span><br><span class="line">        result = <span class="string">&#x27;,&#x27;</span> + str.<span class="title function_">slice</span>(-<span class="number">3</span>) + result;</span><br><span class="line">        str = str.<span class="title function_">slice</span>(<span class="number">0</span>, str.<span class="property">length</span> - <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (str) &#123; result = str + result; &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>2、随机整数<br>随机数的生成我们需要用到Math对象的方法。</p>
<blockquote>
<p>random() 方法可返回介于 0 ~ 1 之间的一个随机数<br>floor()方法对数进行下舍入<br>ceil()方法对数进行上舍入</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//生成一个0-5的随机整数</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//max-期望的最大值, min到max， 但不包含max</span></span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*max, <span class="number">10</span>) + min;</span><br><span class="line"><span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*max) + min;</span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*max) + min;</span><br><span class="line"></span><br><span class="line"><span class="comment">//max-期望最大值，min，包含max</span></span><br><span class="line"><span class="title class_">Math</span>.<span class="title function_">ceil</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()* max) + min;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成一个长度为n数组，每项值在min-max之间</span></span><br><span class="line"><span class="comment">//此函数返回的值在 min =&lt; x &lt; max</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">randomArray</span>(<span class="params">min, max, n</span>)&#123;</span><br><span class="line">	<span class="keyword">let</span> m = <span class="number">0</span>, array = [];</span><br><span class="line">	<span class="keyword">while</span>(m &lt; n)&#123;</span><br><span class="line">		array.<span class="title function_">push</span>(<span class="built_in">parseInt</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>()*(max-min)) + min);</span><br><span class="line">		m++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> array;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>3、日期格式化</p>
<p><em>有个有意思的问题：</em></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2016/11/16&#x27;</span>).<span class="title function_">getTime</span>());<span class="comment">//1479225600000</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&#x27;2016-11-16&#x27;</span>).<span class="title function_">getTime</span>());<span class="comment">//1479254400000</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1479225600000</span>);<span class="comment">//Wed Nov 16 2016 00:00:00 GMT+0800 (CST)</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(<span class="number">1479254400000</span>);<span class="comment">//Wed Nov 16 2016 08:00:00 GMT+0800 (CST)</span></span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">fmtDate</span>(<span class="params">date, fmt</span>)&#123; <span class="comment">// author: meizz</span></span><br><span class="line">    <span class="keyword">var</span> o = &#123;</span><br><span class="line">        <span class="string">&#x27;M+&#x27;</span>: date.<span class="title function_">getMonth</span>() + <span class="number">1</span>, <span class="comment">// 月份</span></span><br><span class="line">        <span class="string">&#x27;d+&#x27;</span>: date.<span class="title function_">getDate</span>(), <span class="comment">// 日</span></span><br><span class="line">        <span class="string">&#x27;h+&#x27;</span>: date.<span class="title function_">getHours</span>(), <span class="comment">// 小时</span></span><br><span class="line">        <span class="string">&#x27;m+&#x27;</span>: date.<span class="title function_">getMinutes</span>(), <span class="comment">// 分</span></span><br><span class="line">        <span class="string">&#x27;s+&#x27;</span>: date.<span class="title function_">getSeconds</span>(), <span class="comment">// 秒</span></span><br><span class="line">        <span class="string">&#x27;q+&#x27;</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>((date.<span class="title function_">getMonth</span>() + <span class="number">3</span>) / <span class="number">3</span>), <span class="comment">// 季度</span></span><br><span class="line">        <span class="string">&#x27;S&#x27;</span>: date.<span class="title function_">getMilliseconds</span>() <span class="comment">// 毫秒</span></span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="keyword">if</span> (<span class="regexp">/(y+)/</span>.<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">        fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (date.<span class="title function_">getFullYear</span>() + <span class="string">&#x27;&#x27;</span>).<span class="title function_">substr</span>(<span class="number">4</span> - <span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> k <span class="keyword">in</span> o) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(&#x27;</span> + k + <span class="string">&#x27;)&#x27;</span>).<span class="title function_">test</span>(fmt)) &#123;</span><br><span class="line">            fmt = fmt.<span class="title function_">replace</span>(<span class="title class_">RegExp</span>.<span class="property">$1</span>, (<span class="title class_">RegExp</span>.<span class="property">$1</span>.<span class="property">length</span> === <span class="number">1</span>) ? (o[k]) : ((<span class="string">&#x27;00&#x27;</span> + o[k]).<span class="title function_">substr</span>((<span class="string">&#x27;&#x27;</span> + o[k]).<span class="property">length</span>)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> fmt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title function_">fmtDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(),<span class="string">&#x27;yyyy-MM-dd hh:mm&#x27;</span>);</span><br><span class="line"><span class="title function_">fmtDate</span>(<span class="keyword">new</span> <span class="title class_">Date</span>(),<span class="string">&#x27;yyyy-MM-dd&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>4、 url中参数获取</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryString</span>(<span class="params">url</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> queryString = url ? url : ((location.<span class="property">search</span>.<span class="property">length</span>) ? location.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) : <span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> urlParams = queryString.<span class="title function_">split</span>(<span class="string">&#x27;&amp;&#x27;</span>);</span><br><span class="line">  <span class="keyword">var</span> arr = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">var</span> result = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; urlParams.<span class="property">length</span>; i++) &#123;</span><br><span class="line">    arr = aParams[i].<span class="title function_">split</span>(<span class="string">&#x27;=&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (arr[<span class="number">0</span>].<span class="property">length</span> &gt; <span class="number">0</span>) &#123;</span><br><span class="line">      result[arr[<span class="number">0</span>]] = <span class="built_in">decodeURIComponent</span>(<span class="built_in">escape</span>(arr[<span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外，利用正则表达式：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getQueryString</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="title class_">RegExp</span>(<span class="string">&#x27;(^|&amp;)&#x27;</span> + name + <span class="string">&#x27;=([^&amp;]*)(&amp;|$)&#x27;</span>)</span><br><span class="line">    <span class="keyword">var</span> search = <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) ? <span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">search</span>.<span class="title function_">substr</span>(<span class="number">1</span>) : <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">var</span> res = search.<span class="title function_">match</span>(reg)</span><br><span class="line">    <span class="keyword">return</span> res ? res[<span class="number">2</span>] : <span class="literal">null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5、获取cookie中相关字段的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">getCookie</span>(<span class="params">name</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> cookieName = <span class="built_in">encodeURIComponent</span>(name) + <span class="string">&#x27;=&#x27;</span>,</span><br><span class="line">        cookieStart = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(cookieName),</span><br><span class="line">        cookieValue = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span>(cookieStart &gt; -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">var</span> cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">indexOf</span>(<span class="string">&#x27;;&#x27;</span>, cookieStart);</span><br><span class="line">        <span class="keyword">if</span>(cookieEnd == -<span class="number">1</span>)&#123;</span><br><span class="line">            cookieEnd = <span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="property">length</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cookieValue = <span class="built_in">decodeURIComponent</span>(<span class="variable language_">document</span>.<span class="property">cookie</span>.<span class="title function_">substring</span>(cookieStart + cookieName.<span class="property">length</span>, cookieEnd));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cookieValue;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><em>未完待续，持续更新中</em></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>图片上传时校验图片格式、大小及尺寸</title>
    <url>/2017/06/14/%E5%9B%BE%E7%89%87%E4%B8%8A%E4%BC%A0%E6%97%B6%E6%A0%A1%E9%AA%8C%E5%9B%BE%E7%89%87%E5%A4%A7%E5%B0%8F%E5%8F%8A%E5%B0%BA%E5%AF%B8/</url>
    <content><![CDATA[<p>对于图片上传，大家应该都不陌生，有时候需要对图片的格式及大小进行校验。但是随着业务的发展，现在越来越多的地方，对图片的长宽尺寸有严格的限制，只校验图片的格式及大小，已经不能满足目前的需求。<span id="more"></span></p>
<h2 id="File-API"><a href="#File-API" class="headerlink" title="File API"></a>File API</h2><p>谈到图片、文件上传，就不得不提File API。 File API在表单文件输入字段基础上，添加了一些直接访问文件信息的接口。HTML5 在DOM中为文件输入元素添加了一个files集合。File 对象是特殊类型的Blob，且可以用在任意的Blob 类型的context中。比如： FileReader,URL.createObjectURL(),createImageBitma()及XMLHttpRequest.send()都能处理Blob和File。</p>
<p>File接口继承了Blob接口属性：</p>
<blockquote>
<p>File.lastModified<br>只读，返回当前File对象所引用文件最后修改时间，自1970年1月1日0:00以来的毫秒数<br>File.lastModifiedDate<br>只读，返回当前file对象所引用文件最后修改时间<br>File.name<br>只读，返回当前File对象所引用文件的名字<br>File.size<br>只读，返回文件的大小<br>File.type<br>只读，返回文件的MIME类型</p>
</blockquote>
<p>通过File API提供的FileReader类型，可以读取文件中的数据。FileReader是一种异步文件读取机制。FileReader提供了下面几个方法：</p>
<blockquote>
<p>1、 readAsText(file, encoding): 以纯文本形式读取文件，将读取到的文本保存在 result 属性中， 第二个参数用于指定编码类型，是可选的。<br>2、 readAsDataURL(file): 读取文件并将文件数据以URI的形式保存在result属性中<br>3、 readAsBinaryString(file): 读取文件并将一个字符串保存在result属性中，字符串中每个字符表示一字节<br>4、 readAsArrayBuffer(file): 读取文件并将一个包含文件内容的ArrayBuffer保存在result属性中</p>
</blockquote>
<p>由于读取过程是异步的，FileReader也提供了几个事件，最常用为progress、error和load事件。</p>
<h2 id="关于图片格式及大小"><a href="#关于图片格式及大小" class="headerlink" title="关于图片格式及大小"></a>关于图片格式及大小</h2><p>首先，对于图片的格式，可以从图片选择上传这一步就可以规避不需要的图片格式。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//只允许上传jpeg,png格式的图片</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">accept</span>=<span class="string">&#x27;image/jpeg, image/png&#x27;</span>&gt;</span></span><br><span class="line">//不限制图片格式</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">accept</span>=<span class="string">&#x27;image/*&#x27;</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>如果不设置accept属性，也可以在 onchange 事件中取得 files 值，然后对文件的 type 属性进行校验。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span>&#x27;&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>).<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> reg = <span class="regexp">/jpeg||png/</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(reg.<span class="title function_">test</span>(<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>].<span class="property">type</span>))</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//图片的大小, byte</span></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">files</span>[<span class="number">0</span>].<span class="property">size</span>)</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span> </span><br></pre></td></tr></table></figure>
<h2 id="图片的长宽尺寸"><a href="#图片的长宽尺寸" class="headerlink" title="图片的长宽尺寸"></a>图片的长宽尺寸</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&#x27;test&#x27;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&#x27;file&#x27;</span> <span class="attr">id</span>=<span class="string">&#x27;test&#x27;</span> <span class="attr">multiple</span> <span class="attr">accept</span>=<span class="string">&#x27;image/*&#x27;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">    <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;test&#x27;</span>).<span class="property">onchange</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">var</span> that = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//此处针对的是多图片上传</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//如果是单张图片，可跳过for循环 ，执行that.files[0]</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">for</span>(<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; that.<span class="property">files</span>.<span class="property">length</span>; m++)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">_loop</span>(m);</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">function</span> <span class="title function_">_loop</span>(<span class="params">m</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span></span><br><span class="line"><span class="language-javascript">            reader.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params">e</span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(e)</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> data = e.<span class="property">target</span>.<span class="property">result</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">var</span> image = <span class="keyword">new</span> <span class="title class_">Image</span>()</span></span><br><span class="line"><span class="language-javascript">                image.<span class="property">onload</span> = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> width = image.<span class="property">width</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">var</span> height = image.<span class="property">height</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;第&#x27;</span> + (m + <span class="number">1</span> ) + <span class="string">&#x27;张图片的宽高：&#x27;</span> + width + <span class="string">&#x27;x&#x27;</span> + height)</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                image.<span class="property">src</span> = data</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            reader.<span class="title function_">readAsDataURL</span>(that.<span class="property">files</span>[m])</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">    &#125;</span></span><br><span class="line"><span class="language-javascript"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><em>参考</em>：</p>
<ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/File">File</a></li>
<li>[Javascript高程]</li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>在keynote中插入高亮代码</title>
    <url>/2020/10/14/%E5%9C%A8keynote%E4%B8%AD%E6%8F%92%E5%85%A5%E9%AB%98%E4%BA%AE%E4%BB%A3%E7%A0%81/</url>
    <content><![CDATA[<p>做技术分享时，对于研发来讲，经常会有大量的代码介绍，那么如何快速在keynote中插入代码呢？</p>
<span id="more"></span>
<p>最简单的就是粘贴截图，O(∩_∩)O哈哈~</p>
<p>下面介绍另外一种方式，使用 RTF 格式插入文字格式的高亮代码。</p>
<p>首先，使用 brew 安装 highlight。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install highlight</span><br></pre></td></tr></table></figure>

<h3 id="粘贴文件中指定代码块"><a href="#粘贴文件中指定代码块" class="headerlink" title="粘贴文件中指定代码块"></a>粘贴文件中指定代码块</h3><p>如果只是想粘贴指定的代码块，可以选中需要粘贴的代码块，然后执行</p>
<ul>
<li><ol>
<li>步骤一：在编辑器选中要复制粘贴的代码块</li>
</ol>
</li>
</ul>
<ul>
<li><ol start="2">
<li>步骤二：在终端输入下面的命令</li>
</ol>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pbpaste | highlight --style=github --syntax=python -k <span class="string">&quot;Fira Code&quot;</span> -K 36 -O rtf | pbcopy</span><br></pre></td></tr></table></figure>
<ul>
<li>–syntax 指定语法，根据实际需要选择</li>
<li>–style 设定样式，github 样式</li>
<li>-k 设定font-family</li>
<li>-K 设定 font-size</li>
<li>-u 设定encoding</li>
<li>-t 空格代替tab</li>
</ul>
<ul>
<li><ol start="3">
<li>步骤三：在keynote中执行 command+v 即可</li>
</ol>
</li>
</ul>
<p>可以看到一下示例：</p>
<p><img src="/images/post/keynote-highlight-code.png" alt="github 样式"></p>
<p><img src="/images/post/keynote-highlight-code-1.png" alt="dark 样式"></p>
<p><img src="/images/post/keynote-highlight-code-2.png" alt="solarized-light 样式"></p>
<h3 id="粘贴指定文件"><a href="#粘贴指定文件" class="headerlink" title="粘贴指定文件"></a>粘贴指定文件</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">highlight --style=github -k <span class="string">&quot;Fira Code&quot;</span> -K 36 -u <span class="string">&quot;utf-8&quot;</span> -t 4 -O rtf &lt;filename&gt;| pbcopy</span><br></pre></td></tr></table></figure>

<p>然后在keynote中执行 command+v 即可。</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>keynote</tag>
      </tags>
  </entry>
  <entry>
    <title>基于Vue的权限控制系统的解决方案</title>
    <url>/2019/01/15/%E5%9F%BA%E4%BA%8EVue%E7%9A%84%E6%9D%83%E9%99%90%E6%8E%A7%E5%88%B6%E7%B3%BB%E7%BB%9F%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</url>
    <content><![CDATA[<p>目前公司内部，基于 Vue 全家桶的项目还是比较多的。在入职公司后，刚好团队在开发内部的一个运营管理的 MIS 系统。在项目初期，对于系统的权限控制，比较粗糙。随着 MIS 系统的内容越来越多，对于系统的用户权限便不得不去进行限制区分了。<span id="more"></span></p>
<p>公司内部项目最初是采用的，先加载所有的路由，只在菜单上做了显示与隐藏，这个显而易见的风险就是研发人员可以通过拼接路由的形式，访问到本来没有权限访问的内容，这样的权限设置对于研发而言，形同虚设。但是，由于是内部系统，最初的这个方案，就一直延续下来了。随着 MIS 系统内容的丰富，许多核心的数据开始增加，以前的这种方案带来的风险，逐渐被放大。于是，针对权限控制这一方案，开始了自我探索。</p>
<h3 id="iview-admin的路由权限"><a href="#iview-admin的路由权限" class="headerlink" title="iview-admin的路由权限"></a>iview-admin的路由权限</h3><p>iview-admin采用的是挂载全部路由，然后在路由的全局守卫进行判断。<a href="https://github.com/iview/iview-admin/blob/dev/src/router/router.js">router.js</a></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Main</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/Main.vue&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不作为Main组件的子页面展示的页面单独写，如下</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> loginRouter = &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;Login - 登录&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login.vue&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> page404 = &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/*&#x27;</span>,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;error-404&#x27;</span>,</span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;404-页面不存在&#x27;</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/error-page/404.vue&#x27;</span>)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 作为Main组件的子页面展示并且在左侧菜单显示的路由写在appRouter里</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> appRouter = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/access&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;key&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;access&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;权限管理&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">        <span class="attr">children</span>: [</span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;权限管理&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;access_index&#x27;</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/access/access.vue&#x27;</span>) &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/access-test&#x27;</span>,</span><br><span class="line">        <span class="attr">icon</span>: <span class="string">&#x27;lock-combination&#x27;</span>,</span><br><span class="line">        <span class="attr">title</span>: <span class="string">&#x27;权限测试页&#x27;</span>,</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;accesstest&#x27;</span>,</span><br><span class="line">        <span class="attr">access</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Main</span>,</span><br><span class="line">        <span class="attr">children</span>: [  <span class="comment">//注意这里，有一个字段 access，表示是否需要进行权限控制的字段。</span></span><br><span class="line">            &#123; <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>, <span class="attr">title</span>: <span class="string">&#x27;权限测试页&#x27;</span>, <span class="attr">name</span>: <span class="string">&#x27;accesstest_index&#x27;</span>, <span class="attr">access</span>: <span class="number">0</span>, <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/access/access-test.vue&#x27;</span>) &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所有上面定义的路由都要写在下面的routers里</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> routers = [</span><br><span class="line">    loginRouter,</span><br><span class="line">    otherRouter,</span><br><span class="line">    preview,</span><br><span class="line">    locking,</span><br><span class="line">    ...appRouter,</span><br><span class="line">    page500,</span><br><span class="line">    page403,</span><br><span class="line">    page404</span><br><span class="line">];</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>然后路由处理方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> iView <span class="keyword">from</span> <span class="string">&#x27;iview&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Util</span> <span class="keyword">from</span> <span class="string">&#x27;../libs/util&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">VueRouter</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Cookies</span> <span class="keyword">from</span> <span class="string">&#x27;js-cookie&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;routers, otherRouter, appRouter&#125; <span class="keyword">from</span> <span class="string">&#x27;./router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">VueRouter</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 路由配置</span></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">RouterConfig</span> = &#123;</span><br><span class="line">    <span class="comment">// mode: &#x27;history&#x27;,</span></span><br><span class="line">    <span class="attr">routes</span>: routers</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> router = <span class="keyword">new</span> <span class="title class_">VueRouter</span>(<span class="title class_">RouterConfig</span>);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    iView.<span class="property">LoadingBar</span>.<span class="title function_">start</span>();</span><br><span class="line">    <span class="title class_">Util</span>.<span class="title function_">title</span>(to.<span class="property">meta</span>.<span class="property">title</span>, router.<span class="property">app</span>);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;locking&#x27;</span>) === <span class="string">&#x27;1&#x27;</span> &amp;&amp; to.<span class="property">name</span> !== <span class="string">&#x27;locking&#x27;</span>) &#123; <span class="comment">// 判断当前是否是锁定状态</span></span><br><span class="line">        <span class="title function_">next</span>(&#123;</span><br><span class="line">            <span class="attr">replace</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;locking&#x27;</span></span><br><span class="line">        &#125;);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;locking&#x27;</span>) === <span class="string">&#x27;0&#x27;</span> &amp;&amp; to.<span class="property">name</span> === <span class="string">&#x27;locking&#x27;</span>) &#123;</span><br><span class="line">        <span class="title function_">next</span>(<span class="literal">false</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>) &amp;&amp; to.<span class="property">name</span> !== <span class="string">&#x27;login&#x27;</span>) &#123; <span class="comment">// 判断是否已经登录且前往的页面不是登录页</span></span><br><span class="line">            <span class="title function_">next</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;login&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;user&#x27;</span>) &amp;&amp; to.<span class="property">name</span> === <span class="string">&#x27;login&#x27;</span>) &#123; <span class="comment">// 判断是否已经登录且前往的是登录页</span></span><br><span class="line">            <span class="title class_">Util</span>.<span class="title function_">title</span>();</span><br><span class="line">            <span class="title function_">next</span>(&#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">&#x27;home_index&#x27;</span></span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// </span></span><br><span class="line">            <span class="keyword">const</span> curRouterObj = <span class="title class_">Util</span>.<span class="title function_">getRouterObjByName</span>([otherRouter, ...appRouter], to.<span class="property">name</span>);</span><br><span class="line">            <span class="keyword">if</span> (curRouterObj &amp;&amp; curRouterObj.<span class="property">title</span>) &#123;</span><br><span class="line">                <span class="title class_">Util</span>.<span class="title function_">title</span>(curRouterObj.<span class="property">title</span>, router.<span class="property">app</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 根据路由表里的 access 字段</span></span><br><span class="line">            <span class="keyword">if</span> (curRouterObj &amp;&amp; curRouterObj.<span class="property">access</span> !== <span class="literal">undefined</span>) &#123; <span class="comment">// 需要判断权限的路由</span></span><br><span class="line">                <span class="keyword">if</span> (curRouterObj.<span class="property">access</span> === <span class="built_in">parseInt</span>(<span class="title class_">Cookies</span>.<span class="title function_">get</span>(<span class="string">&#x27;access&#x27;</span>))) &#123;</span><br><span class="line">                    <span class="title class_">Util</span>.<span class="title function_">toDefaultPage</span>([otherRouter, ...appRouter], to.<span class="property">name</span>, router, next); <span class="comment">// 如果在地址栏输入的是一级菜单则默认打开其第一个二级菜单的页面</span></span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="title function_">next</span>(&#123;</span><br><span class="line">                        <span class="attr">replace</span>: <span class="literal">true</span>,</span><br><span class="line">                        <span class="attr">name</span>: <span class="string">&#x27;error-403&#x27;</span></span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// 没有配置权限的路由, 直接通过</span></span><br><span class="line">                <span class="title class_">Util</span>.<span class="title function_">toDefaultPage</span>([...routers], to.<span class="property">name</span>, router, next);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">(<span class="params">to</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="title class_">Util</span>.<span class="title function_">openNewPage</span>(router.<span class="property">app</span>, to.<span class="property">name</span>, to.<span class="property">params</span>, to.<span class="property">query</span>);</span><br><span class="line">    iView.<span class="property">LoadingBar</span>.<span class="title function_">finish</span>();</span><br><span class="line">    <span class="variable language_">window</span>.<span class="title function_">scrollTo</span>(<span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>通过在全局守卫来进行判断，先判断用户是否登录，如果未登录，就跳转到登录页。根据cookie里数据，如果用户已登陆过，且要跳转的地址为登录页，则直接跳到 hone_index 页面。登录后，先判断路由是否包含 access 字段，该字段是用来针对用户进行权限控制权限使用的。如果路由中没有该字段，则表示该路由无需进行权限控制。如果路由进行了权限控制，则进行判断，有权限则进入，无权限则进入到 403 页面。<br>诚然这种方式，还是可以解决目前我们项目目前的问题，但是还是有问题的：</p>
<ul>
<li>路由和菜单混合，因为有些路由不需要作为菜单显示，最后导致整个路由信息比较臃肿；</li>
<li>菜单文字和icon在前端维护，如需修改，需要重新部署上线；</li>
<li>每次跳转都需要在全局路由守护中进行判断</li>
<li>系统每次加载都需要挂载全部路由，对于无权限访问的路由，显然有点多余</li>
</ul>
<h3 id="vue-element-admin"><a href="#vue-element-admin" class="headerlink" title="vue-element-admin"></a>vue-element-admin</h3><p>github 上 star 数目较多的一个基于 element-ui 的后台管理系统 <a href="https://github.com/PanJiaChen/vue-element-admin">vue-element-admin</a>。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Layout */</span></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Layout</span> <span class="keyword">from</span> <span class="string">&#x27;@/views/layout/Layout&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* Router Modules */</span></span><br><span class="line"><span class="keyword">import</span> componentsRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/components&#x27;</span></span><br><span class="line"><span class="keyword">import</span> chartsRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/charts&#x27;</span></span><br><span class="line"><span class="keyword">import</span> tableRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/table&#x27;</span></span><br><span class="line"><span class="keyword">import</span> nestedRouter <span class="keyword">from</span> <span class="string">&#x27;./modules/nested&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/** note: Submenu only appear when children.length&gt;=1</span></span><br><span class="line"><span class="comment"> *  detail see  https://panjiachen.github.io/vue-element-admin-site/guide/essentials/router-and-nav.html</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* hidden: true                   if `hidden:true` will not show in the sidebar(default is false)</span></span><br><span class="line"><span class="comment">* alwaysShow: true               if set true, will always show the root menu, whatever its child routes length</span></span><br><span class="line"><span class="comment">*                                if not set alwaysShow, only more than one route under the children</span></span><br><span class="line"><span class="comment">*                                it will becomes nested mode, otherwise not show the root menu</span></span><br><span class="line"><span class="comment">* redirect: noredirect           if `redirect:noredirect` will no redirect in the breadcrumb</span></span><br><span class="line"><span class="comment">* name:&#x27;router-name&#x27;             the name is used by &lt;keep-alive&gt; (must set!!!)</span></span><br><span class="line"><span class="comment">* meta : &#123;</span></span><br><span class="line"><span class="comment">    roles: [&#x27;admin&#x27;,&#x27;editor&#x27;]    will control the page roles (you can set multiple roles)</span></span><br><span class="line"><span class="comment">    title: &#x27;title&#x27;               the name show in submenu and breadcrumb (recommend set)</span></span><br><span class="line"><span class="comment">    icon: &#x27;svg-name&#x27;             the icon show in the sidebar</span></span><br><span class="line"><span class="comment">    noCache: true                if true, the page will no be cached(default is false)</span></span><br><span class="line"><span class="comment">    breadcrumb: false            if false, the item will hidden in breadcrumb(default is true)</span></span><br><span class="line"><span class="comment">  &#125;</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> constantRouterMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/redirect&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/redirect/:path*&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/redirect/index&#x27;</span>)</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/login/index&#x27;</span>),</span><br><span class="line">    <span class="attr">hidden</span>: <span class="literal">true</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">....</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/dashboard/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;dashboard&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/documentation&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/documentation/index&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/documentation/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Documentation&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;documentation&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;documentation&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/guide&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/guide/index&#x27;</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/guide/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Guide&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;guide&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;guide&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">  <span class="comment">// mode: &#x27;history&#x27;, // require service support</span></span><br><span class="line">  <span class="attr">scrollBehavior</span>: <span class="function">() =&gt;</span> (&#123; <span class="attr">y</span>: <span class="number">0</span> &#125;),</span><br><span class="line">  <span class="attr">routes</span>: constantRouterMap</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> asyncRouterMap = [</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/permission&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">redirect</span>: <span class="string">&#x27;/permission/index&#x27;</span>,</span><br><span class="line">    <span class="attr">alwaysShow</span>: <span class="literal">true</span>, <span class="comment">// will always show the root menu</span></span><br><span class="line">    <span class="attr">meta</span>: &#123;</span><br><span class="line">      <span class="attr">title</span>: <span class="string">&#x27;permission&#x27;</span>,</span><br><span class="line">      <span class="attr">icon</span>: <span class="string">&#x27;lock&#x27;</span>,</span><br><span class="line">      <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>, <span class="string">&#x27;editor&#x27;</span>] <span class="comment">// you can set roles in root nav</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;page&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/permission/page&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;PagePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;pagePermission&#x27;</span>,</span><br><span class="line">          <span class="attr">roles</span>: [<span class="string">&#x27;admin&#x27;</span>] <span class="comment">// or you can only set roles in sub nav</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;directive&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/permission/directive&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;DirectivePermission&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123;</span><br><span class="line">          <span class="attr">title</span>: <span class="string">&#x27;directivePermission&#x27;</span></span><br><span class="line">          <span class="comment">// if do not set roles, means: this page does not require permission</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">path</span>: <span class="string">&#x27;/icon&#x27;</span>,</span><br><span class="line">    <span class="attr">component</span>: <span class="title class_">Layout</span>,</span><br><span class="line">    <span class="attr">children</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;index&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="function">() =&gt;</span> <span class="keyword">import</span>(<span class="string">&#x27;@/views/svg-icons/index&#x27;</span>),</span><br><span class="line">        <span class="attr">name</span>: <span class="string">&#x27;Icons&#x27;</span>,</span><br><span class="line">        <span class="attr">meta</span>: &#123; <span class="attr">title</span>: <span class="string">&#x27;icons&#x27;</span>, <span class="attr">icon</span>: <span class="string">&#x27;icon&#x27;</span>, <span class="attr">noCache</span>: <span class="literal">true</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line"> ....</span><br><span class="line"></span><br><span class="line">  &#123; <span class="attr">path</span>: <span class="string">&#x27;*&#x27;</span>, <span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span>, <span class="attr">hidden</span>: <span class="literal">true</span> &#125;</span><br><span class="line">]</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>路由处理方法<a href="https://github.com/PanJiaChen/vue-element-admin/blob/master/src/permission.js">permission.js</a>：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">start</span>() <span class="comment">// start progress bar</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="title function_">getToken</span>()) &#123; <span class="comment">// determine if there has token</span></span><br><span class="line">    <span class="comment">/* has token*/</span></span><br><span class="line">    <span class="keyword">if</span> (to.<span class="property">path</span> === <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">      <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// if current page is dashboard will not trigger	afterEach hook, so manually handle it</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (store.<span class="property">getters</span>.<span class="property">roles</span>.<span class="property">length</span> === <span class="number">0</span>) &#123; <span class="comment">// 判断当前用户是否已拉取完user_info信息</span></span><br><span class="line">        store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GetUserInfo&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123; <span class="comment">// 拉取user_info</span></span><br><span class="line">          <span class="keyword">const</span> roles = res.<span class="property">data</span>.<span class="property">roles</span> <span class="comment">// note: roles must be a array! such as: [&#x27;editor&#x27;,&#x27;develop&#x27;]</span></span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;GenerateRoutes&#x27;</span>, &#123; roles &#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123; <span class="comment">// 根据roles权限生成可访问的路由表</span></span><br><span class="line">            router.<span class="title function_">addRoutes</span>(store.<span class="property">getters</span>.<span class="property">addRouters</span>) <span class="comment">// 动态添加可访问路由表</span></span><br><span class="line">            <span class="title function_">next</span>(&#123; ...to, <span class="attr">replace</span>: <span class="literal">true</span> &#125;) <span class="comment">// hack方法 确保addRoutes已完成 ,set the replace: true so the navigation will not leave a history record</span></span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;).<span class="title function_">catch</span>(<span class="function">(<span class="params">err</span>) =&gt;</span> &#123;</span><br><span class="line">          store.<span class="title function_">dispatch</span>(<span class="string">&#x27;FedLogOut&#x27;</span>).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">            <span class="title class_">Message</span>.<span class="title function_">error</span>(err)</span><br><span class="line">            <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span> &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 没有动态改变权限的需求可直接next() 删除下方权限判断 ↓</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_">hasPermission</span>(store.<span class="property">getters</span>.<span class="property">roles</span>, to.<span class="property">meta</span>.<span class="property">roles</span>)) &#123;</span><br><span class="line">          <span class="title function_">next</span>()</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="title function_">next</span>(&#123; <span class="attr">path</span>: <span class="string">&#x27;/401&#x27;</span>, <span class="attr">replace</span>: <span class="literal">true</span>, <span class="attr">query</span>: &#123; <span class="attr">noGoBack</span>: <span class="literal">true</span> &#125;&#125;)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 可删 ↑</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">/* has no token*/</span></span><br><span class="line">    <span class="keyword">if</span> (whiteList.<span class="title function_">indexOf</span>(to.<span class="property">path</span>) !== -<span class="number">1</span>) &#123; <span class="comment">// 在免登录白名单，直接进入</span></span><br><span class="line">      <span class="title function_">next</span>()</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="title function_">next</span>(<span class="string">`/login?redirect=<span class="subst">$&#123;to.path&#125;</span>`</span>) <span class="comment">// 否则全部重定向到登录页</span></span><br><span class="line">      <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// if current page is login will not trigger afterEach hook, so manually handle it</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">afterEach</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="title class_">NProgress</span>.<span class="title function_">done</span>() <span class="comment">// finish progress bar</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>相对于 iview-admin， vue-element-admin 的路由权限控制应该是相对更加成熟一点。对于不需要权限控制的路由，直接在 constantRouterMap 里设置好了，并在初始化时挂载到应用上了。对于需要根据用户访问的权限，可以通过 asyncRouterMap 中设置路由的权限，然后通过 addRoutes 动态挂在到 router 上。</p>
<p>当然作者还用了<a href="https://panjiachen.github.io/vue-element-admin-site/zh/guide/essentials/permission.html#%E6%8C%87%E4%BB%A4%E6%9D%83%E9%99%90">指令权限</a>方式。</p>
<h3 id="基于自有项目的解决方案"><a href="#基于自有项目的解决方案" class="headerlink" title="基于自有项目的解决方案"></a>基于自有项目的解决方案</h3><p>在结合自身的项目的特点以及需求的基础上，后来总结了一套符合自身的开发方案，反过来与已有的方案对比，感觉有共同的地方，也有与之不同的地方，总而言之，是目前最符合项目的方案吧。</p>
<p>同上 vue-element-admin 类似，也是讲无需权限控制的路由，在页面初始化时就进行了挂载。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">Vue</span> <span class="keyword">from</span> <span class="string">&#x27;vue&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">Router</span> <span class="keyword">from</span> <span class="string">&#x27;vue-router&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="title class_">Vue</span>.<span class="title function_">use</span>(<span class="title class_">Router</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Login</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/login/Login.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/Home.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Forbidden</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/403.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">Dashboard</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/dashboard/Dashboard.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">        <span class="attr">redirect</span>: <span class="string">&#x27;/login&#x27;</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Login</span></span><br><span class="line">    &#125;,&#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/403&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Forbidden</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">path</span>: <span class="string">&#x27;/dashboard&#x27;</span>,</span><br><span class="line">        <span class="attr">component</span>: <span class="title class_">Dashboard</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> <span class="title class_">Router</span>(&#123;</span><br><span class="line">    <span class="attr">mode</span>: <span class="string">&#x27;history&#x27;</span>,</span><br><span class="line">    <span class="attr">routes</span>: routes,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>另外还需一个组件文件（component.js)：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="title function_">home</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/Home.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">home1</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/Home1.vue&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">home2</span> = (<span class="params"></span>) =&gt; <span class="keyword">import</span>(<span class="string">&#x27;../page/Home2.vue&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    home,</span><br><span class="line">    home2,</span><br><span class="line">    home3,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>


<p>路由和菜单权限通过服务端放回，在路由钩子函数（导航守卫）里进行操作：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 设置一个标志位用来标识是否需要从服务端获取菜单和路由权限</span></span><br><span class="line"><span class="keyword">let</span> isFetchRemote = <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//使用钩子函数对路由进行权限跳转</span></span><br><span class="line">router.<span class="title function_">beforeEach</span>(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> username = <span class="variable language_">sessionStorage</span>.<span class="title function_">getItem</span>(<span class="string">&#x27;username&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span>(!username &amp;&amp; to.<span class="property">path</span> !== <span class="string">&#x27;/login&#x27;</span>)&#123;</span><br><span class="line">        <span class="title function_">next</span>(&#123;<span class="attr">path</span>: <span class="string">&#x27;/login&#x27;</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (isFetchRemote &amp;&amp; to.<span class="property">path</span> !== <span class="string">&#x27;/login&#x27;</span>) &#123;</span><br><span class="line">        <span class="comment">// 此处为一个ajax请求， ajaxPost 假定是一个封装好的 ajax 方法。</span></span><br><span class="line">        <span class="title function_">ajaxPost</span>(<span class="string">&#x27;/xxxx/getMenuData&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (res.<span class="property">status</span> === <span class="number">200</span> &amp;&amp; res.<span class="property">data</span>.<span class="property">errno</span> === <span class="number">0</span>) &#123;</span><br><span class="line">                isFetchRemote = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">const</span> routerData = res.<span class="property">data</span>.<span class="property">result</span>;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// do something 处理路由数据</span></span><br><span class="line">                <span class="comment">// 这个地方比较关键的是，根据服务端返回的路由数据，和前端组件进行匹配。</span></span><br><span class="line">                <span class="comment">// 然后将处理后的路由，动态加入到router</span></span><br><span class="line">                <span class="comment">// router数据类似于</span></span><br><span class="line">                <span class="comment">// [</span></span><br><span class="line">                <span class="comment">//     &#123;</span></span><br><span class="line">                <span class="comment">//         component: &#x27;home&#x27;, // 这个地方就是需要和component.js进行匹配，将组件匹配到对应的路由上</span></span><br><span class="line">                <span class="comment">//         path: &#x27;/home&#x27;,</span></span><br><span class="line">                <span class="comment">//         meta: &#123;</span></span><br><span class="line">                <span class="comment">//             title: &#x27;home&#x27;</span></span><br><span class="line">                <span class="comment">//         &#125;</span></span><br><span class="line">                <span class="comment">//     &#125;,</span></span><br><span class="line">                <span class="comment">//     &#123;</span></span><br><span class="line">                <span class="comment">//         component: &#x27;home1&#x27;,</span></span><br><span class="line">                <span class="comment">//         path: &#x27;home1&#x27;,</span></span><br><span class="line">                <span class="comment">//         meta: &#123;</span></span><br><span class="line">                <span class="comment">//             title: &#x27;home1&#x27;,</span></span><br><span class="line">                <span class="comment">//         &#125;</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// ]</span></span><br><span class="line">                <span class="comment">// </span></span><br><span class="line">                router.<span class="title function_">addRoutes</span>([routeData].<span class="title function_">concat</span>([</span><br><span class="line">                    &#123; <span class="attr">name</span>:<span class="string">&#x27;404&#x27;</span>,<span class="attr">path</span>:<span class="string">&#x27;/404&#x27;</span>,<span class="attr">component</span>:  &#125;,</span><br><span class="line">                    &#123; <span class="attr">path</span>:<span class="string">&#x27;*&#x27;</span>,<span class="attr">redirect</span>: <span class="string">&#x27;/404&#x27;</span> &#125;]));</span><br><span class="line">                router.<span class="title function_">push</span>(&#123;</span><br><span class="line">                    <span class="attr">path</span>: to.<span class="property">path</span>,</span><br><span class="line">                    <span class="attr">query</span>: to.<span class="property">query</span></span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                isFetchRemote = <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_">next</span>();</span><br><span class="line">        &#125;)</span><br><span class="line">        .<span class="title function_">catch</span>(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(err);</span><br><span class="line">        &#125;);    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="title function_">next</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>该方案与 vue-element-admin 方案有很大的类似的地方，不同的在于，我们的路由权限完全由服务端返回，所以不会存在用户能访问超过权限之外的页面的情况。<br>同时，该方案有一个最大的弊端，就是路由和组件名与后端是强耦合的，同时，有个待改进的地方，就是加入用户拥有某个菜单权限，用户直接在浏览器输入后，进入登录页再回跳到该页面（vue-element-admin已经实现了，我们的改造成本也不大^_^）。目前该方案已在内部项目中成功的实施了。后续再考虑下，是否有更好的优化方案。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序的一些注意事项</title>
    <url>/2019/01/21/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E4%B8%80%E4%BA%9B%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
    <content><![CDATA[<p>主要记录一些小程序开发过程中需要注意的一些点，以及相关知识的学习。</p>
<h3 id="wx-navigateTo-跳转页面，不能使-tabbar-页面。小程序的页面栈最多是10层。"><a href="#wx-navigateTo-跳转页面，不能使-tabbar-页面。小程序的页面栈最多是10层。" class="headerlink" title="wx.navigateTo 跳转页面，不能使 tabbar 页面。小程序的页面栈最多是10层。"></a>wx.navigateTo 跳转页面，不能使 tabbar 页面。小程序的页面栈最多是10层。</h3><h3 id="小程序的绑定事件传参："><a href="#小程序的绑定事件传参：" class="headerlink" title="小程序的绑定事件传参："></a>小程序的绑定事件传参：</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;block <span class="attr">wx</span>:<span class="keyword">for</span>=<span class="string">&#x27;&#123;&#123;cardList&#125;&#125;&#x27;</span>&gt;</span><br><span class="line">    <span class="language-xml"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;index-card-item&quot;</span> <span class="attr">data-card</span>=<span class="string">&#x27;&#123;&#123;item&#125;&#125;&#x27;</span> <span class="attr">bindtap</span>=<span class="string">&#x27;bindJumpPage&#x27;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">image</span> <span class="attr">src</span>=<span class="string">&quot;&#123;&#123;item.img&#125;&#125;&quot;</span> <span class="attr">class</span>=<span class="string">&quot;index-card-img&quot;</span> /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">&quot;index-card-text&quot;</span>&gt;</span>&#123;&#123;item.text&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">    <span class="tag">&lt;/<span class="name">view</span>&gt;</span></span></span><br><span class="line">&lt;/block&gt;</span><br><span class="line"></span><br><span class="line"><span class="attr">bindJumpPage</span>: <span class="keyword">function</span>(<span class="params">event</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> item = event.<span class="property">currentTarget</span>.<span class="property">dataset</span>.<span class="property">card</span>;</span><br><span class="line">    wx.<span class="title function_">navigateTo</span>(&#123;</span><br><span class="line">        <span class="attr">url</span>: item.<span class="property">link</span>,</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="view-和-block-标签"><a href="#view-和-block-标签" class="headerlink" title="view 和 block 标签"></a>view 和 block 标签</h3><p>view 和 block 标签的区别在于，view 是一个视图容器组件，会在页面渲染，而 block 是仅仅是一个包装元素，仅根据属性做逻辑判断，并不会在页面渲染。</p>
<h3 id="关于静态资源加载"><a href="#关于静态资源加载" class="headerlink" title="关于静态资源加载"></a>关于静态资源加载</h3><p>推荐使用绝对路径加载资源，避免作为属性值传入到组件中造成资源加载出错。</p>
<h3 id="关于生命周期"><a href="#关于生命周期" class="headerlink" title="关于生命周期"></a>关于生命周期</h3><p>小程序中关于生命周期的概念，大致分为三类：小程序的生命周期、页面的生命周期、组件的生命周期。</p>
<p>1）小程序的生命周期<br>App() 是用来注册小程序的方法，且只能在app.js中调用，必须调用且只能调用一次。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">App</span>(&#123;</span><br><span class="line">    <span class="comment">// 生命周期回调，监听小程序初始化</span></span><br><span class="line">    <span class="comment">// 全局只能触发一次</span></span><br><span class="line">    <span class="attr">onLaunch</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App onLaunch&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期回调，监听小程序显示，</span></span><br><span class="line">    <span class="comment">// 小程序启动，活动后台进入前台显示时触发</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App onShow&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期回调，监听小程序隐藏</span></span><br><span class="line">    <span class="comment">// 小程序从前台进入后台时</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App onHide&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 错误监听函数，小程序发生脚本错误，或者调用api失败时触发</span></span><br><span class="line">    <span class="comment">// 会带上错误信息</span></span><br><span class="line">    <span class="attr">onError</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;App onError&#x27;</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 404，小程序打开的页面不存在时触发，会带上页面信息</span></span><br><span class="line">    <span class="attr">onPageNotFund</span>: <span class="keyword">function</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>页面的生命周期<img src='./miniprogram.png' style="display:block; margin: 0 auto;">
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Page</span>(&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 页面的初始数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="attr">data</span>: &#123;&#125;,</span><br><span class="line">    <span class="comment">// 生命周期函数--监听页面加载</span></span><br><span class="line">    <span class="comment">// 一个页面只会调用一次，可以在onLoad的参数中获取打开当前页面路径中的参数</span></span><br><span class="line">    <span class="attr">onLoad</span>: <span class="keyword">function</span> (<span class="params">options</span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期函数--监听页面显示</span></span><br><span class="line">    <span class="comment">// 页面显示/切入前台时触发</span></span><br><span class="line">    <span class="attr">onShow</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期函数--监听页面初次渲染完成</span></span><br><span class="line">    <span class="comment">// 页面初次渲染完成时触发。一个页面只会调用一次，代表页面已经准备妥当，可以和视图层进行交互。</span></span><br><span class="line">    <span class="comment">// 注意：对界面内容进行设置的 API 如wx.setNavigationBarTitle，请在onReady之后进行。</span></span><br><span class="line">    <span class="attr">onReady</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期函数--监听页面隐藏</span></span><br><span class="line">    <span class="comment">// 页面隐藏/切入后台时触发。如navigateTo或底部tab切换到其他页面，小程序切入后台等</span></span><br><span class="line">    <span class="attr">onHide</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 生命周期函数--监听页面卸载</span></span><br><span class="line">    <span class="comment">// 页面卸载时触发，如redirectTo或 navigateBack到其他页面时。</span></span><br><span class="line">    <span class="attr">onUnload</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li>
<li>组件的生命周期<br>组件的生命周期，指组件自身的一些方法，在特定的事件节点或特定的事件时自动触发。<br>最重要的生命周期是 created attached detached, 包含一个组件实例生命流程的最主要时间节点。<blockquote>
<ul>
<li>组件实例刚刚被创建好时， created 生命周期被触发。此时，组件数据 this.data 就是在 Component 构造器中定义的数据 data 。 此时还不能调用 setData 。 通常情况下，这个生命周期只应该用于给组件 this 添加一些自定义属性字段。</li>
<li>在组件完全初始化完毕、进入页面节点树后， attached 生命周期被触发。此时， this.data 已被初始化为组件的当前值。这个生命周期很有用，绝大多数初始化工作可以在这个时机进行。</li>
<li>在组件离开页面节点树后， detached 生命周期被触发。退出一个页面时，如果组件还在页面节点树中，则 detached 会被触发。</li>
</ul>
</blockquote>
</li>
</ol>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="title class_">Component</span>(&#123;</span><br><span class="line">    <span class="attr">lifetimes</span>: &#123;</span><br><span class="line">        <span class="title function_">attached</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">detached</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 以下是旧式的定义方式，可以保持对 &lt;2.2.3 版本基础库的兼容</span></span><br><span class="line">    <span class="title function_">attached</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在组件实例进入页面节点树时执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">detached</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 在组件实例被从页面节点树移除时执行</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>生命周期</th>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>created</td>
<td>无</td>
<td>在组件实例刚刚被创建时执行</td>
</tr>
<tr>
<td>attached</td>
<td>无</td>
<td>在组件实例进入到页面节点树时执行</td>
</tr>
<tr>
<td>ready</td>
<td>无</td>
<td>在组件在视图层布局完成后执行</td>
</tr>
<tr>
<td>moved</td>
<td>无</td>
<td>在组件实例被移动到节点树另一个位置时执行</td>
</tr>
<tr>
<td>detached</td>
<td>无</td>
<td>在组件实例被页面节点树移除时执行</td>
</tr>
<tr>
<td>error</td>
<td>Object Error</td>
<td>每当组件方法抛出错误时执行</td>
</tr>
</tbody></table>
<h3 id="在微信小程序中引入-iconfont"><a href="#在微信小程序中引入-iconfont" class="headerlink" title="在微信小程序中引入 iconfont"></a>在微信小程序中引入 iconfont</h3><p>平时用习惯了iconfont，但是在小程序该如何使用，其实用法也是很简单。</p>
<ol>
<li>首先将所需要用到的字体图标，组成一个项目并下载到本地。<img src='./download.png' style="display:block; margin: 0 auto;"></li>
<li>下载到本地的文件目录如下，<img src='./1.png' style="display: block; margin: 0 auto">
3）然后选择项目需要的文件，iconfont.css/eot/svg/ttf/woff/woff2，放到小程序assets目录下，并将iconfont.css修改为iconfont.wxss，小程序才能识别。
<img src='./iconfont.png' style="display:block; margin: 0 auto;"></li>
<li>在app.wxss中引入<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">import</span> <span class="string">&#x27;/assets/iconfont/iconfont&#x27;</span>;</span><br></pre></td></tr></table></figure></li>
<li>小程序可以愉快的使用了<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;i <span class="keyword">class</span>=<span class="string">&quot;iconfont icon-gouwu&quot;</span>&gt;&lt;/i&gt;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h3 id="小程序中图片预览和长按保存到本地"><a href="#小程序中图片预览和长按保存到本地" class="headerlink" title="小程序中图片预览和长按保存到本地"></a>小程序中图片预览和长按保存到本地</h3><p>关于图片的预览，小程序提供了 wx.previewImage 的API，在预览过程中可以进行保存图片，发送给朋友等操作，是微信内置的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">previewImage</span>(&#123;</span><br><span class="line">    <span class="attr">urls</span>: [],<span class="comment">//需要预览的图片链接列表，必填</span></span><br><span class="line">    <span class="attr">current</span>: <span class="string">&#x27;&#x27;</span>,<span class="comment">// 当前显示图片的链接，非必填</span></span><br><span class="line">    <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 接口调用成功回调方法，非必填</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 接口调用失败毁掉方法，非必填</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 接口调用结束的回调函数，非必填（成功或失败，都会执行)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>如果是通过自定义方法取触发图片保存到本地相册，使用 wx.saveImageToPhotosAlbum，使用该方法需要用户授权 scope.writePhotosAlbum。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">wx.<span class="title function_">saveImageToPhotosAlbum</span>(&#123;</span><br><span class="line">    <span class="attr">filePath</span>: <span class="string">&#x27;&#x27;</span>, <span class="comment">// 必填，图片文件路径，可以是临时文件路径或者永久文件路径，不支持网络图片路径</span></span><br><span class="line">    <span class="title function_">success</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 非必填，接口调用成功的回调函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">fail</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 非必填，接口调用失败回调函数</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">complete</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// 非必填，接口调用结束的回调函数（成功或失败，都会执行)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>小程序</category>
      </categories>
      <tags>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>有关highcharts的一些小记录</title>
    <url>/2016/11/17/%E6%9C%89%E5%85%B3highcharts%E7%9A%84%E4%B8%80%E4%BA%9B%E5%B0%8F%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<p>Highcharts作为一款数据可视化交互性图表库，非常的受欢迎。在以往的项目中，曾经使用过。最近接到一个任务，也是和使用Higcharts相关的，就把本次使用的一些tips记录在这。当然，如果想更多的了解Highcharts，请移步 <a href="http://www.hcharts.cn/">Highcharts 中文官网</a> 。<span id="more"></span></p>
<p>1、默认选中一组数据，在其余数据设置visible: false</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">series</span>: [&#123;</span><br><span class="line"> 	<span class="attr">name</span>: <span class="string">&#x27;Tokyo&#x27;</span>,</span><br><span class="line"> 	<span class="attr">data</span>: [<span class="number">7.0</span>, <span class="number">6.9</span>, <span class="number">9.5</span>, <span class="number">14.5</span>, <span class="number">18.2</span>, <span class="number">21.5</span>, <span class="number">25.2</span>, <span class="number">26.5</span>, <span class="number">23.3</span>, <span class="number">18.3</span>, <span class="number">13.9</span>, <span class="number">9.6</span>],</span><br><span class="line"> 	<span class="attr">visible</span>: <span class="literal">false</span></span><br><span class="line"> &#125;, &#123;</span><br><span class="line"> 	<span class="attr">name</span>: <span class="string">&#x27;New York&#x27;</span>,</span><br><span class="line"> 	<span class="attr">data</span>: [-<span class="number">0.2</span>, <span class="number">0.8</span>, <span class="number">5.7</span>, <span class="number">11.3</span>, <span class="number">17.0</span>, <span class="number">22.0</span>, <span class="number">24.8</span>, <span class="number">24.1</span>, <span class="number">20.1</span>, <span class="number">14.1</span>, <span class="number">8.6</span>, <span class="number">2.5</span>],</span><br><span class="line"> 	<span class="attr">visible</span>: <span class="literal">false</span></span><br><span class="line"> &#125;, &#123;</span><br><span class="line"> 	<span class="attr">name</span>: <span class="string">&#x27;Berlin&#x27;</span>,</span><br><span class="line"> 	<span class="attr">data</span>: [-<span class="number">0.9</span>, <span class="number">0.6</span>, <span class="number">3.5</span>, <span class="number">8.4</span>, <span class="number">13.5</span>, <span class="number">17.0</span>, <span class="number">18.6</span>, <span class="number">17.9</span>, <span class="number">14.3</span>, <span class="number">9.0</span>, <span class="number">3.9</span>, <span class="number">1.0</span>]</span><br><span class="line"> &#125;, &#123;</span><br><span class="line"> 	<span class="attr">name</span>: <span class="string">&#x27;London&#x27;</span>,</span><br><span class="line"> 	<span class="attr">data</span>: [<span class="number">3.9</span>, <span class="number">4.2</span>, <span class="number">5.7</span>, <span class="number">8.5</span>, <span class="number">11.9</span>, <span class="number">15.2</span>, <span class="number">17.0</span>, <span class="number">16.6</span>, <span class="number">14.2</span>, <span class="number">10.3</span>, <span class="number">6.6</span>, <span class="number">4.8</span>],</span><br><span class="line"> 	<span class="attr">visible</span>:<span class="literal">false</span></span><br><span class="line"> &#125;]</span><br></pre></td></tr></table></figure>
<p>2、series自定义数据读取: this.series.userOptions[‘自定义字段’]</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  $(<span class="string">&#x27;#container&#x27;</span>).<span class="title function_">highcharts</span>(&#123;</span><br><span class="line">  	<span class="attr">tooltip</span>: &#123;</span><br><span class="line">  		<span class="attr">formatter</span>: <span class="keyword">function</span> (<span class="params"></span>) &#123; </span><br><span class="line">  			<span class="keyword">return</span> <span class="string">&#x27;The text for &lt;b&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">series</span>.<span class="property">userOptions</span>.<span class="property">text</span> + <span class="string">&#x27;&lt;/b&gt; is &lt;b&gt;&#x27;</span> + <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;&lt;/b&gt;&#x27;</span>;</span><br><span class="line">  		&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">xAxis</span>: &#123;</span><br><span class="line">  	<span class="attr">categories</span>: [<span class="string">&#x27;Jan&#x27;</span>, <span class="string">&#x27;Feb&#x27;</span>, <span class="string">&#x27;Mar&#x27;</span>, <span class="string">&#x27;Apr&#x27;</span>, <span class="string">&#x27;May&#x27;</span>, <span class="string">&#x27;Jun&#x27;</span>, <span class="string">&#x27;Jul&#x27;</span>, <span class="string">&#x27;Aug&#x27;</span>, <span class="string">&#x27;Sep&#x27;</span>, <span class="string">&#x27;Oct&#x27;</span>, <span class="string">&#x27;Nov&#x27;</span>, <span class="string">&#x27;Dec&#x27;</span>]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">series</span>: [&#123;</span><br><span class="line">  		<span class="attr">data</span>: [<span class="number">29.9</span>, <span class="number">71.5</span>, <span class="number">106.4</span>, <span class="number">129.2</span>, <span class="number">144.0</span>, <span class="number">176.0</span>, <span class="number">135.6</span>, <span class="number">148.5</span>, <span class="number">216.4</span>, <span class="number">194.1</span>, <span class="number">95.6</span>, <span class="number">54.4</span>],</span><br><span class="line">  		<span class="attr">text</span>: <span class="string">&#x27;hello&#x27;</span></span><br><span class="line">  	&#125;, &#123;</span><br><span class="line">  		<span class="attr">data</span>: [<span class="number">194.1</span>, <span class="number">95.6</span>, <span class="number">54.4</span>, <span class="number">29.9</span>, <span class="number">71.5</span>, <span class="number">106.4</span>, <span class="number">129.2</span>, <span class="number">144.0</span>, <span class="number">176.0</span>, <span class="number">135.6</span>, <span class="number">148.5</span>, <span class="number">216.4</span>],</span><br><span class="line">  		<span class="attr">text</span>: <span class="string">&#x27;world&#x27;</span></span><br><span class="line">  	&#125;]</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>3、X轴数据过多，可设置间隔显示</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="attr">xAxis</span>: &#123;</span><br><span class="line">  <span class="attr">categories</span>: self.<span class="property">date_period</span>,</span><br><span class="line">  <span class="attr">tickInterval</span>: <span class="number">5</span><span class="comment">//此处设置间隔显示个数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><em>如有继续使用，会持续更新</em></p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>温故而知新-Javascript数组</title>
    <url>/2017/03/20/%E6%B8%A9%E6%95%85%E8%80%8C%E7%9F%A5%E6%96%B0-Javascript%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<p>数组，大概是我们日常操作最多的数据类型之一了吧，或者说没有之一，哈哈。无论你用什么框架，都避免不了的。本文就从熟悉数组的基本操作开始，最后对一下常见的问题进行解析。<span id="more"></span></p>
<h2 id="数组的方法、属性及实例方法"><a href="#数组的方法、属性及实例方法" class="headerlink" title="数组的方法、属性及实例方法"></a>数组的方法、属性及实例方法</h2><p>如下图所示。</p>
<p><img src="http://7xprrp.com1.z0.glb.clouddn.com/blog/array.png"></p>
<h3 id="检测数组"><a href="#检测数组" class="headerlink" title="检测数组"></a>检测数组</h3><p>1、instanceof</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>);</span><br></pre></td></tr></table></figure>
<p>问题：如果网页包含多个框架，那就存在两个以上不同的全局执行环境，从而存在两个以上不同版本的Array构造函数。子页面和父页面Array原生对象引用的地址不同。</p>
<p>2、Array.isArray</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr));</span><br></pre></td></tr></table></figure>
<p>3、</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">isArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title class_">Object</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">toString</span>.<span class="title function_">call</span>(arr) === <span class="string">&#x27;[object Array]&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="有关数组的问题"><a href="#有关数组的问题" class="headerlink" title="有关数组的问题"></a>有关数组的问题</h2><h3 id="多维数组合并成一维数组"><a href="#多维数组合并成一维数组" class="headerlink" title="多维数组合并成一维数组"></a>多维数组合并成一维数组</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个一维数组</span></span><br><span class="line"><span class="keyword">var</span> a = [<span class="number">0</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">var</span> b = [<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a.<span class="title function_">concat</span>(b));</span><br><span class="line"><span class="comment">//对于二维数组以</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [], i = <span class="number">0</span>, length = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(;i &lt; length; i++)&#123;</span><br><span class="line">        res = res.<span class="title function_">concat</span>(arr[i])</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//对于多维数组</span></span><br><span class="line"><span class="comment">//Array.prototype.push()方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr, result</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!result) &#123;</span><br><span class="line">        result = []</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(arr[i].<span class="property">constructor</span> == <span class="title class_">Array</span>) &#123;</span><br><span class="line">            <span class="title function_">flatten</span>(arr[i], result)</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result.<span class="title function_">push</span>(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">flatten</span>([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>], [<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>], [<span class="number">11</span>,<span class="number">12</span>,[<span class="number">12</span>,<span class="number">13</span>,[<span class="number">14</span>]]], <span class="number">10</span>, <span class="number">11</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    arr = [].<span class="property">concat</span>.<span class="title function_">apply</span>([], arr)</span><br><span class="line">    <span class="keyword">return</span> arr.<span class="title function_">some</span>(<span class="title class_">Array</span>.<span class="property">isArray</span>) ? <span class="title function_">flatten</span>(arr) : arr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,[<span class="number">23</span>,<span class="number">34</span>],<span class="number">5</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 补充一个</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">flatten</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">eval</span>(<span class="string">`[<span class="subst">$&#123;arr + <span class="string">&quot;&quot;</span>&#125;</span>]`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,[<span class="number">4</span>,<span class="number">5</span>],[<span class="number">4</span>,[<span class="number">23</span>,<span class="number">34</span>],<span class="number">5</span>]]</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">flatten</span>(arr));</span><br></pre></td></tr></table></figure>

<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="ES6最快捷的："><a href="#ES6最快捷的：" class="headerlink" title="ES6最快捷的："></a>ES6最快捷的：</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line">[...<span class="keyword">new</span> <span class="title class_">Set</span>(arr)]</span><br></pre></td></tr></table></figure>

<h4 id="通过indexOf判断"><a href="#通过indexOf判断" class="headerlink" title="通过indexOf判断"></a>通过indexOf判断</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [], i = <span class="number">0</span>, len = arr.<span class="property">length</span>;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="comment">/*if(res.indexOf(arr[i]) == -1)&#123;</span></span><br><span class="line"><span class="comment">            res.push(arr[i])</span></span><br><span class="line"><span class="comment">        &#125;*/</span></span><br><span class="line">        res.<span class="title function_">indexOf</span>(arr[i]) == -<span class="number">1</span>&amp;&amp;res.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr);</span><br></pre></td></tr></table></figure>

<h4 id="高效去重"><a href="#高效去重" class="headerlink" title="高效去重"></a>高效去重</h4><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">1</span>];</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">unique</span>(<span class="params">arr</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> res = [], i = <span class="number">0</span>, len = arr.<span class="property">length</span>, hash=&#123;&#125;;</span><br><span class="line">    <span class="keyword">for</span>(; i &lt; len; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!hash[arr[i]])&#123;</span><br><span class="line">            res.<span class="title function_">push</span>(arr[i]);</span><br><span class="line">            hash[arr[i]] = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">unique</span>(arr);</span><br></pre></td></tr></table></figure>
<h3 id="生成指定范围指定个数的不重复随机数"><a href="#生成指定范围指定个数的不重复随机数" class="headerlink" title="生成指定范围指定个数的不重复随机数"></a>生成指定范围指定个数的不重复随机数</h3><p>例如生成 1-100范围之内的10个不重复随机数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;=<span class="number">100</span>; i++) &#123;</span><br><span class="line">    arr.<span class="title function_">push</span>(i);</span><br><span class="line">&#125;</span><br><span class="line">arr.<span class="title function_">sort</span>(</span><br><span class="line">    <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0.5</span> - <span class="title class_">Math</span>.<span class="title function_">random</span>();</span><br><span class="line">    &#125;</span><br><span class="line">);</span><br><span class="line">arr.<span class="property">length</span> = <span class="number">10</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);</span><br></pre></td></tr></table></figure>
<h3 id="不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标"><a href="#不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标" class="headerlink" title="不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标"></a>不使用loop循环，创建一个长度为100的数组，并且每个元素的值等于它的下标</h3><p>方法一:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array(100).fill(0).map((item, index) =&gt; &#123;</span><br><span class="line">    return index</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>方法二:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.from(Array(100).keys())</span><br></pre></td></tr></table></figure>
<p>方法三:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[...Array(100).keys()]</span><br></pre></td></tr></table></figure>
<p>方法四:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Object.keys(Array(100).join().split(&#x27;,&#x27;))</span><br></pre></td></tr></table></figure>
<p>方法五:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Array.prototype.createSpecial = function(length)&#123;</span><br><span class="line">    if(this.length == length)&#123;</span><br><span class="line">        return this;</span><br><span class="line">    &#125;</span><br><span class="line">    this.push(this.length)</span><br><span class="line">    this.createSpecial(length)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="二维数组排序"><a href="#二维数组排序" class="headerlink" title="二维数组排序"></a>二维数组排序</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function sortArr(arr) &#123;</span><br><span class="line">    var goNext = true;</span><br><span class="line">    var entries = arr.entries();</span><br><span class="line">    while (goNext) &#123;</span><br><span class="line">        var result = entries.next();</span><br><span class="line">        if (result.done !== true) &#123;</span><br><span class="line">            result.value[1].sort((a, b) =&gt; a - b);</span><br><span class="line">            goNext = true;</span><br><span class="line">        &#125;</span><br><span class="line">        else &#123;</span><br><span class="line">            goNext = false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>由app版本高低判断延伸到javascript字符串比较</title>
    <url>/2020/11/04/%E7%94%B1%E7%89%88%E6%9C%AC%E9%AB%98%E4%BD%8E%E5%88%A4%E6%96%AD%E5%BB%B6%E4%BC%B8%E5%88%B0javascript%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<p>最近在参与部门的app 重构，其中有一个是根据后台版本配置与当前 app 版本的表来提示用户是否有新版本，需要更新的提示。然后发现旧的代码直接使用的字符串比较：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">&#x27;1.0.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="string">&#x27;1.0.2&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v1 &gt; v2); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>
<p>乍一看，好像没问什么问题。但是当出现下面版本时，问题就来了：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> v1 = <span class="string">&#x27;1.2.1&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> v2 = <span class="string">&#x27;1.12.1&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(v1 &gt; v2); <span class="comment">// true</span></span><br></pre></td></tr></table></figure>

<p><img src="/images/post/what.jpeg"></p>
<span id="more"></span>

<p>其实这就涉及到了字符串的比较规则，字符串比较是使用基于标准字典的 Unicode 值来进行比较的。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;2&#x27;</span> &gt; <span class="string">&#x27;1&#x27;</span> <span class="comment">// true</span></span><br><span class="line"><span class="string">&#x27;abc&#x27;</span> &gt; <span class="string">&#x27;acb&#x27;</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 数字比较</span></span><br><span class="line"><span class="number">2</span> &gt; <span class="number">11</span> <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 字符串比较</span></span><br><span class="line"><span class="string">&#x27;2&#x27;</span> &gt; <span class="string">&#x27;11&#x27;</span> <span class="comment">// true</span></span><br></pre></td></tr></table></figure>
<p>之所以出现 ‘2’ &gt; ‘11’ 为真的情况，字符串比较的情况下会逐个字符进行比较。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;2&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>) <span class="comment">// 50</span></span><br><span class="line"><span class="string">&#x27;11&#x27;</span>.<span class="title function_">charCodeAt</span>(<span class="number">0</span>)  <span class="comment">// 49</span></span><br></pre></td></tr></table></figure>
<p>这样比较，就会出现 ‘2’ &gt; ‘11’ 为 true的情况。</p>
<p>回归到最初的问题，那么 app 版本比较的思路就有了。</p>
<h3 id="补位方法："><a href="#补位方法：" class="headerlink" title="补位方法："></a>补位方法：</h3><p>既然字符串比较是逐位进行比较的，那么我们就假定主副补丁版本的最高位数为4，不足四位的左侧补齐0。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">toNum</span>(<span class="params">version</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> versionArr = version.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> num_place = [<span class="string">&#x27;0000&#x27;</span>, <span class="string">&#x27;000&#x27;</span>, <span class="string">&#x27;00&#x27;</span>, <span class="string">&#x27;0&#x27;</span>, <span class="string">&#x27;&#x27;</span>];</span><br><span class="line">  <span class="keyword">const</span> len = versionArr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> itemLen = versionArr[i].<span class="property">length</span>;</span><br><span class="line">    versionArr[i] = num_place[itemLen] + versionArr[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> res = versionArr.<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">compareVersion</span>(<span class="params">a, b</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> version_a = <span class="title function_">toNum</span>(a);</span><br><span class="line">  <span class="keyword">const</span> version_b = <span class="title function_">toNum</span>(b);</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(version_a);</span><br><span class="line">  <span class="keyword">return</span> version_a &gt; version_b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.0.1&#x27;</span>, <span class="string">&#x27;1.1.2&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;0.0.1&#x27;</span>, <span class="string">&#x27;0.0.2&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.1.0&#x27;</span>, <span class="string">&#x27;1.2.0&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.2.1&#x27;</span>, <span class="string">&#x27;1.12.1&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.1.12&#x27;</span>, <span class="string">&#x27;1.2&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>

<h3 id="数值比较"><a href="#数值比较" class="headerlink" title="数值比较"></a>数值比较</h3><p>分别对 主，副，补丁版本的数值进行比较：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compareVersion</span>(<span class="params">v1, v2</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> v1arr = v1.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> v2arr = v2.<span class="title function_">split</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">  <span class="keyword">const</span> len1 = v1arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> len2 = v2arr.<span class="property">length</span>;</span><br><span class="line">  <span class="keyword">const</span> max = len1 &gt; len2 ? len1 : len2;</span><br><span class="line">  <span class="keyword">let</span> i = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(; i &lt; max; i++) &#123;</span><br><span class="line">    <span class="keyword">const</span> v1v = v1arr[i] ? <span class="built_in">parseInt</span>(v1arr[i]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">const</span> v2v = v2arr[i] ? <span class="built_in">parseInt</span>(v2arr[i]) : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (v2v &gt; v1v) &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (v1arr.<span class="title function_">join</span>() === v2arr.<span class="title function_">join</span>()) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.0.1&#x27;</span>, <span class="string">&#x27;1.1.2&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;0.0.1&#x27;</span>, <span class="string">&#x27;0.0.2&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.1.0&#x27;</span>, <span class="string">&#x27;1.2.0&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.2.1&#x27;</span>, <span class="string">&#x27;1.12.1&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compareVersion</span>(<span class="string">&#x27;1.1.12&#x27;</span>, <span class="string">&#x27;1.2&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>版本</tag>
        <tag>string</tag>
      </tags>
  </entry>
  <entry>
    <title>移动开发基础</title>
    <url>/2016/05/09/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E5%BC%80%E5%8F%91-1/</url>
    <content><![CDATA[<h2 id="物理像素-physical-pixel"><a href="#物理像素-physical-pixel" class="headerlink" title="物理像素(physical pixel)"></a>物理像素(physical pixel)</h2><p>一个物理像素是显示器(手机屏幕)上最小的物理显示单元，在操作系统的调度下，每一个设备像素都有自己的颜色值和亮度值。<span id="more"></span></p>
<h2 id="设备独立像素-density-independent-pixel"><a href="#设备独立像素-density-independent-pixel" class="headerlink" title="设备独立像素(density-independent pixel)"></a>设备独立像素(density-independent pixel)</h2><p>设备独立像素(也叫密度无关像素)，可以认为是计算机坐标系统中得一个点，这个点代表一个可以由程序使用的虚拟像素(比如: css像素)，然后由相关系统转换为物理像素。</p>
<p>所以说，物理像素和设备独立像素之间存在着一定的对应关系，这就是接下来要说的设备像素比。</p>
<h2 id="设备像素比-device-pixel-ratio"><a href="#设备像素比-device-pixel-ratio" class="headerlink" title="设备像素比(device pixel ratio)"></a>设备像素比(device pixel ratio)</h2><p>设备像素比(简称dpr)定义了物理像素和设备独立像素的对应关系，它的值可以按如下的公式的得到：</p>
<blockquote>
<p>devicePixelRatio=屏幕物理像素/设备独立像素</p>
</blockquote>
<p>在javascript中，可以通过window.devicePixelRatio获取到当前设备的dpr。</p>
<h2 id="移动端横屏竖屏判断"><a href="#移动端横屏竖屏判断" class="headerlink" title="移动端横屏竖屏判断"></a>移动端横屏竖屏判断</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//监听横竖屏的变化</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;orientation&#x27;</span>, <span class="keyword">function</span>(<span class="params">event</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">orientation</span> == <span class="number">0</span>||<span class="variable language_">window</span>.<span class="property">orientation</span> == <span class="number">180</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;竖屏&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">orientation</span> == <span class="number">90</span>||<span class="variable language_">window</span>.<span class="property">orientation</span> == -<span class="number">90</span>)&#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&#x27;横屏&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h2 id="rem"><a href="#rem" class="headerlink" title="rem"></a>rem</h2><p>rem:font size of the root element</p>
<p>rem 是相对于根元素的 html ，通过 rem 可以实现等比例适配所有屏幕。</p>
<h2 id="meta标签"><a href="#meta标签" class="headerlink" title="meta标签"></a>meta标签</h2><p>参考<a href="http://jiaochunxiao.github.io/2017/02/27/%E5%85%B3%E4%BA%8Emeta%EF%BC%8C%E4%BD%A0%E5%BA%94%E8%AF%A5%E7%9F%A5%E9%81%93%E7%9A%84%E4%BA%8B/">关于meta，你应该知道的事</a></p>
<p><em>未完待续</em></p>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>移动端布局通用适配方案总结</title>
    <url>/2017/02/17/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%9A%E7%94%A8%E9%80%82%E9%85%8D%E6%96%B9%E6%A1%88%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<p>在移动端开发过程中，我们需要适配各种不同机型的屏幕，如何能够写一套代码适，做到屏幕的完美适配呢。针对设计稿为750*1334，自己常用的适配方案如下<span id="more"></span></p>
<ul>
<li>方案一:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span>(<span class="params">doc, win</span>)&#123;</span><br><span class="line">  	<span class="keyword">var</span> docEl = doc.<span class="property">documentElement</span>,</span><br><span class="line">      	resizeEvt = <span class="string">&#x27;orientationchange&#x27;</span> <span class="keyword">in</span> <span class="variable language_">window</span> ? <span class="string">&#x27;orientationchange&#x27;</span> : <span class="string">&#x27;resize&#x27;</span>,</span><br><span class="line">      	recalc = <span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">          	<span class="keyword">var</span> clientWidth = docEl.<span class="property">clientWidth</span>;</span><br><span class="line">          	<span class="keyword">if</span>(!clientWidth) <span class="keyword">return</span>;</span><br><span class="line">          	docEl.<span class="property">style</span>.<span class="property">fontSize</span> = <span class="number">100</span> * (clientWidth / <span class="number">375</span>) + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">      	&#125;;</span><br><span class="line"></span><br><span class="line">  	<span class="keyword">if</span>(!doc.<span class="property">addEventListener</span>) <span class="keyword">return</span>;</span><br><span class="line">  	win.<span class="title function_">addEventListener</span>(resizeEvt, recalc, <span class="literal">false</span>);</span><br><span class="line">  	doc.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, recalc, <span class="literal">false</span>);</span><br><span class="line">&#125;)(<span class="variable language_">document</span>, <span class="variable language_">window</span>);</span><br></pre></td></tr></table></figure>
<p>对应样式</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">  <span class="attribute">padding</span>: .<span class="number">2rem</span> .<span class="number">3rem</span>;<span class="comment">//对应750的设计稿40px/60px</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>将js作为单独文件或者嵌入到页面的头部，防止因为js文件加载慢而引起页面错乱！</strong></p>
<ul>
<li>方案二:</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> dpr, rem, scale;</span><br><span class="line"><span class="keyword">var</span> docEl = <span class="variable language_">document</span>.<span class="property">documentElement</span>;</span><br><span class="line"><span class="keyword">var</span> fontEl = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;style&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> metaEl = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;meta[name=&quot;viewport&quot;]&#x27;</span>);</span><br><span class="line">dpr = <span class="variable language_">window</span>.<span class="property">devicePixelRatio</span> || <span class="number">1</span>;</span><br><span class="line">scale = <span class="number">1</span> / dpr;</span><br><span class="line">rem = docEl.<span class="property">clientWidth</span> * dpr / <span class="number">10</span>;</span><br><span class="line">metaEl.<span class="title function_">setAttribute</span>(<span class="string">&#x27;content&#x27;</span>, <span class="string">&#x27;width=&#x27;</span> + dpr * docEl.<span class="property">clientWidth</span> + <span class="string">&#x27;,initial-scale=&#x27;</span> + scale + <span class="string">&#x27;,maximum-scale=&#x27;</span> + scale + <span class="string">&#x27;, minimum-scale=&#x27;</span> + scale + <span class="string">&#x27;,user-scalable=no&#x27;</span>);</span><br><span class="line">docEl.<span class="title function_">setAttribute</span>(<span class="string">&#x27;data-dpr&#x27;</span>, dpr);</span><br><span class="line">docEl.<span class="property">firstElementChild</span>.<span class="title function_">appendChild</span>(fontEl);</span><br><span class="line">fontEl.<span class="property">innerHTML</span> = <span class="string">&#x27;html&#123;font-size:&#x27;</span> + rem + <span class="string">&#x27;px!important;&#125;&#x27;</span>;</span><br></pre></td></tr></table></figure>
<p>scss</p>
<figure class="highlight scss"><table><tr><td class="code"><pre><span class="line"><span class="variable">$baseFontSize</span>: <span class="number">75px</span> !default;</span><br><span class="line"><span class="variable">$dpr</span> : <span class="number">1</span> !default;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@function</span> px2rem(<span class="variable">$px</span>) &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$dpr</span> == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="variable">$baseFontSize</span>) * <span class="number">1rem</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">2.5</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">2.5</span> /<span class="variable">$baseFontSize</span> * <span class="number">2</span>) * <span class="number">1rem</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">2.75</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">2.75</span> / <span class="variable">$baseFontSize</span> * <span class="number">2</span>) * <span class="number">1rem</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">3</span> / <span class="variable">$baseFontSize</span> * <span class="number">2</span>) * <span class="number">1rem</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> / <span class="variable">$baseFontSize</span> * <span class="number">2</span>) * <span class="number">1rem</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@function</span> px2px(<span class="variable">$px</span>) &#123;</span><br><span class="line">    <span class="keyword">@if</span> <span class="variable">$dpr</span> == <span class="number">2</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span>/<span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">2.5</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">2.5</span> / <span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">2.75</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">2.75</span> / <span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> if <span class="variable">$dpr</span> == <span class="number">3</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">3</span> / <span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125; <span class="keyword">@else</span> &#123;</span><br><span class="line">        <span class="keyword">@return</span> (<span class="variable">$px</span> * <span class="number">2</span>) * <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="attribute">height</span>: <span class="built_in">px2rem</span>(<span class="number">50px</span>);<span class="comment">//设计稿原尺寸</span></span><br><span class="line"><span class="attribute">font-size</span>: <span class="built_in">px2rem</span>(<span class="number">16px</span>);<span class="comment">//设计稿原尺寸</span></span><br></pre></td></tr></table></figure>
<ul>
<li>方案三: css媒体查询</li>
</ul>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*缩放比例:7.5*/</span></span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">320px</span>)&#123; <span class="comment">// iphone4-5 &gt;=375的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">42.7px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">340px</span>)&#123; <span class="comment">// 主流设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">45.3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">360px</span>)&#123; <span class="comment">// 主流设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">48px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">375px</span>)&#123; <span class="comment">// iphone6 &gt;=375的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">50px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">400px</span>)&#123; <span class="comment">// 主流设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">53.3px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">414px</span>)&#123; <span class="comment">// iphone6+ &gt;=414的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">55.2px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">768px</span>)&#123; <span class="comment">// &gt;=768的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">102.4px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">992px</span>)&#123; <span class="comment">// &gt;=992的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">132.7px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> (<span class="attribute">min-width</span>: <span class="number">1200px</span>)&#123; <span class="comment">// &gt;=1200的设备</span></span><br><span class="line">    <span class="selector-tag">html</span>, <span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">font-size</span>: <span class="number">160px</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">font-size</span>: .<span class="number">24rem</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.wrapper</span>&#123;</span><br><span class="line">      <span class="attribute">padding</span>: .<span class="number">1rem</span> .<span class="number">15rem</span>;<span class="comment">//对应750的设计稿10px/15px</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><strong>tips</strong><br>当然了，你本来是在移动端适配，如果有人在PC端打开（尤其是微信内的推广活动），可以设置一个html的最大宽度和最小高度。比如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">html,body&#123;</span><br><span class="line">    max-width: 600px;</span><br><span class="line">    min-height: 320px;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>移动端</category>
      </categories>
      <tags>
        <tag>移动端</tag>
      </tags>
  </entry>
  <entry>
    <title>编辑器的小配置</title>
    <url>/2018/01/24/%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%B0%8F%E9%85%8D%E7%BD%AE/</url>
    <content><![CDATA[<h3 id="sublime-配置4个空格代替Tab"><a href="#sublime-配置4个空格代替Tab" class="headerlink" title="sublime 配置4个空格代替Tab"></a>sublime 配置4个空格代替Tab</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    // The number of spaces a tab is considered equal to  </span><br><span class="line">    &quot;tab_size&quot;: 4,  </span><br><span class="line">    // Set to true to insert spaces when tab is pressed  </span><br><span class="line">    &quot;translate_tabs_to_spaces&quot;: true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="sublime-build-system"><a href="#sublime-build-system" class="headerlink" title="sublime build system"></a>sublime build system</h3><p>因为自己电脑上用的nvm来管理的node版本，所以path路径不能像普通设置那样，需要自己找到node在nvm下的安装目录。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;cmd&quot;: [&quot;node&quot;, &quot;$file&quot;],</span><br><span class="line">    &quot;selector&quot;: &quot;source.js&quot;,</span><br><span class="line">    &quot;path&quot;: &quot;$PATH:/Users/此处为个人电脑名字/.nvm/versions/node/v8.9.1/bin&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="vim-配置自动空格"><a href="#vim-配置自动空格" class="headerlink" title="vim 配置自动空格"></a>vim 配置自动空格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot; 将制表符扩展为空格</span><br><span class="line">set expandtab</span><br><span class="line">&quot; 设置编辑时制表符占用空格数</span><br><span class="line">set tabstop=4</span><br><span class="line">&quot; 设置格式化时制表符占用空格数</span><br><span class="line">set shiftwidth=4</span><br><span class="line">&quot; 把连续数量的空格视为一个制表符</span><br><span class="line">set softtabstop=4</span><br></pre></td></tr></table></figure>

<h3 id="VScode设置tab转空格，并显示空格"><a href="#VScode设置tab转空格，并显示空格" class="headerlink" title="VScode设置tab转空格，并显示空格"></a>VScode设置tab转空格，并显示空格</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;editor.tabSize&quot;: 4, //tab为4个空格</span><br><span class="line">&quot;editor.fontSize&quot;: 14, //字体大小</span><br><span class="line">&quot;editor.renderWhitespace&quot;: true, //显示空格</span><br><span class="line">&quot;editor.insertSpaces&quot;: true, //按tab键插入空格</span><br><span class="line">&quot;editor.renderWhitespace&quot;: &quot;all&quot;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>聊一聊Event Loop</title>
    <url>/2017/09/06/%E8%81%8A%E4%B8%80%E8%81%8AEvent-Loop/</url>
    <content><![CDATA[<p>也许你听过Event Loop（事件循环），可能你会对它有点陌生，今天就来聊一聊 Event Loop 相关的东西。<br>提到 Event Loop，就必须从Javascript的单线程说起。</p>
<span id="more"></span>
<h2 id="为什么Javascript-是单线程？"><a href="#为什么Javascript-是单线程？" class="headerlink" title="为什么Javascript 是单线程？"></a>为什么Javascript 是单线程？</h2><p>说到Javascript的单线程特点（也就是同一个时间，只能做一件事），你可能会有一点疑问，Javascript 为什么不能设计成多线程，在多线程操作下实现并行处理，效率不就更高吗？<br>Javascript的单线程特点，是跟它的用途有关的。众所周知，Javascript作为一种浏览器脚本语言，主要服务于用户与浏览器的交互，以及操作DOM。假设以下场景：javascript是多线程的，在同一时间，其中一个线程在操作某个DOM节点，并添加内容，而另一线程此刻却在执行清空该DOM内容，甚至是删除该DOM节点，浏览器就不知如何解析了。因此，为了避免复杂的同步问题，Javascript从诞生起，就决定了单线程的特性。</p>
<h2 id="任务队列与同步、异步机制"><a href="#任务队列与同步、异步机制" class="headerlink" title="任务队列与同步、异步机制"></a>任务队列与同步、异步机制</h2><p>问题来了，既然Javascript是单线程的，在同一时间只能执行特定的任务，并阻塞后续任务执行，这样Javascript的效率岂不是很低？Javascript设计者在最初的时候就考虑到了这一点。Javascript 的任务队列中的任务，主要有同步任务和异步任务组成。<br>同步任务，指主线程上排队执行的任务，只有当前一个同步任务执行完毕，后一个同步任务才能执行。<br>异步任务，指的是不进入主线程，而是进入到任务队列中，只有当任务队列，通知主线程，某个异步任务可以执行了，该任务才会进入主线程执行。</p>
<img src='1.png' />

<p>异步执行机制：</p>
<blockquote>
<p>1 所有同步任务在主线程执行，形成一个执行栈；<br>2 主线程之外，存在一个任务队列（task queue）。只要异步任务有了运行结果，就在任务队列之中放置一个事件；<br>3 一旦执行栈中所有同步任务执行完毕，系统读取任务队列。对应的异步任务，结束等待状态，进入执行栈，开始执行；<br>4 主线程重复上述步骤。</p>
</blockquote>
<p>只要主线程空了，就会读取任务队列，这就是Javascipt的运行机制，整个过程不断重复。这种运行机制被称为Event Loop(事件循环)。</p>
<p><img src='2.png' />&gt;</p>
<h2 id="Event-Loop"><a href="#Event-Loop" class="headerlink" title="Event Loop"></a>Event Loop</h2><blockquote>
<p>之所以称为 事件循环，是因为它经常被用于类似如下的方式来实现：</p>
</blockquote>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">while (queue.waitForMessage()) &#123;</span><br><span class="line">  queue.processNextMessage();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>如果当前没有任何消息，queue.waitForMessage 会等待着同步将要到来的消息。</p>
<img src='runtime.png' width='240' height='240'/>

<h3 id="Stack-栈"><a href="#Stack-栈" class="headerlink" title="Stack(栈)"></a>Stack(栈)</h3><p>Stack里存放着正在执行的任务。每个任务被称为帧，函数调用形成了一个栈帧。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params">b</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">return</span> a + b + <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bar</span>(<span class="params">x</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> y = <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">return</span> <span class="title function_">foo</span>(x * y);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">bar</span>(<span class="number">1</span>));</span><br></pre></td></tr></table></figure>
<p>上述代码在执行时，调用bar方法，在栈中创建了第一个帧，帧中包含 bar 的参数和局部变量。 当 bar 调用 foo 时，第二个帧被创建，帧中包含 foo 的参数和局部变量，并压到第一个帧之上。当 foo 返回时， 最上层的帧就被弹出栈（剩下bar 的调用帧）。当 bar 返回时， 栈就空了。</p>
<h3 id="Heap（堆）"><a href="#Heap（堆）" class="headerlink" title="Heap（堆）"></a>Heap（堆）</h3><p>对象被分配到在一个堆中，一个用来表示内存中一大片非结构化区域。</p>
<h2 id="来看一道题"><a href="#来看一道题" class="headerlink" title="来看一道题"></a>来看一道题</h2><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">function</span> <span class="title function_">test</span>(<span class="params"></span>)&#123;</span><br><span class="line">	<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123; <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>)&#125;, <span class="number">0</span>);</span><br><span class="line">	<span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="keyword">function</span>(<span class="params">resolve</span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">			i == <span class="number">999</span> &amp;&amp; <span class="title function_">resolve</span>();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span><br><span class="line">	&#125;).<span class="title function_">then</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">		<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span><br><span class="line">	&#125;)</span><br><span class="line">	<span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">5</span>)</span><br><span class="line">&#125;)()</span><br></pre></td></tr></table></figure>

<p>上面代码执行输出为： 2，3，5，4，1，不知道是否与你预期的一样。</p>
<p>前面提到， javascript主线程，拥有一个执行栈以及一个任务队列。主线程会依次执行代码，当遇到函数时，会先将函数入栈，函数执行完毕再将该函数出栈，直到所有代码执行完毕。<br>任务队列分为 macrotasks 和 microtasks， 每一次事件循环中， macrotask只会提取一个执行，而microtask会一直提取，直到microtask 队列清空。而事件循环每次只会入栈一个macrotask，主线程执行该任务后，又会先检查microtasks队列并完成里面的所有任务后再执行 macrotask。</p>
<blockquote>
<p>macrotasks: setTimeout, setInterval, setImmediate, I/O, UI rendering<br>microtasks: process.nextTick, Promises, Object.observe(废弃), MutationObserver</p>
</blockquote>
<p>浏览器的事件循环模型：</p>
<blockquote>
<p>1、选择最先进入 事件循环任务队列的一个任务， 如果队列中没有任务，则直接跳到第6步的 Microtask<br>2、设置 事件循环的当前运行任务为上一步所选择的任务<br>3、Run: 运行所选任务<br>4、设置 事件循环的当前运行任务为 null<br>5、将刚刚第3步运行的任务从它的任务队列中删除<br>6、Microtasks: perform a microtask checkpoint<br>7、更新并渲染界面<br>8、返回第1步</p>
</blockquote>
<p>perform a microtask checkpoint 的执行步骤:</p>
<blockquote>
<p>1、设置 performing a microtask checkpoint 的标记为 true<br>2、Microtask queue handling: 如果事件循环的 microtask queue 是空，跳到第8步 Done<br>3、选取最先进入 microtask queue 的 microtask<br>4、设置 事件循环的当前运行任务 为上一步所选择的任务<br>5、Run: 执行所选取的任务<br>6、设置 事件循环的当前运行任务 为 null<br>7、将刚刚第5步运行的 microtask 从它的 microtask queue 中删除<br>8、Done: For each environment settings object whose responsible event loop is this event loop, notify about rejected promises on that environment settings object （此处建议查看原网页）<br>9、清理 Index Database 的事务<br>10、使 performing a microtask checkpoint 的标记为 false</p>
</blockquote>
<p>再来看上面题目的执行过程：</p>
<blockquote>
<p>1、当前task运行，执行代码，执行到setTimeout，将它的callback添加到 task queue；<br>2、实例化promise，输出 2; promise resolved；输出 3;<br>3、promise.then的callback被添加到microtasks queue中；<br>4、输出 5;<br>5、已到当前task的end，执行microtasks，输出 4;<br>6、执行下一个task，输出1。</p>
</blockquote>
<p><em>参考</em>：</p>
<ul>
<li><a href="https://juejin.im/entry/58d4df3b5c497d0057eb99ff">理解 JavaScript 中的 macrotask 和 microtask</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html">JavaScript 运行机制详解：再谈Event Loop</a></li>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop">并发模型与事件循环</a></li>
<li><a href="https://github.com/creeperyang/blog/issues/21">从Promise来看JavaScript中的Event Loop、Tasks和Microtasks</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊函数防抖和函数节流</title>
    <url>/2017/11/17/%E8%81%8A%E8%81%8A%E5%87%BD%E6%95%B0%E9%98%B2%E6%8A%96%E5%92%8C%E5%87%BD%E6%95%B0%E8%8A%82%E6%B5%81/</url>
    <content><![CDATA[<p>关于函数防抖和函数节流，相信你已经听过了很多遍了。但是两者的差别，你能快速准确的说出来吗？下面，我们就来聊一聊函数防抖和函数节流的本质区别和实现。<span id="more"></span></p>
<h2 id="函数防抖和函数节流的基本概念"><a href="#函数防抖和函数节流的基本概念" class="headerlink" title="函数防抖和函数节流的基本概念"></a>函数防抖和函数节流的基本概念</h2><p>在博客里看到过这样一个经典比喻：</p>
<blockquote>
<p>想象每天上班大厦底下的电梯。把电梯完成一次运送，类比为一次函数的执行和响应。假设电梯有两种运行策略 debounce 和 throttle，超时设定为15秒，不考虑容量限制。<br>函数防抖（debounce） 策略的电梯。如果电梯里有人进来，等待15秒。如果又人进来，15秒等待重新计时，直到15秒超时，开始运送。<br>函数节流（throttle） 策略的电梯。保证如果电梯第一个人进来后，15秒后准时运送一次，不等待。如果没有人，则待机。</p>
</blockquote>
<p>即：</p>
<blockquote>
<p>函数防抖： 在调用操作一定时间后，才会执行该方法，如果在该段时间内，再次调用该方法，则重新计算该执行时间间隔。<br>函数节流： 调用方法之前，预先设定一个执行周期，当调用动作的时间节点大于等于这个执行周期，才执行该方法，然后进入下一个新的执行周期。</p>
</blockquote>
<p>简而言之，函数防抖和函数节流都是为了降低方法的执行频率，防止函数触发频率过高，导致浏览器响应速度跟不上触发频率，而出现浏览器假死、卡顿等现象，优化用户体验。</p>
<h2 id="函数防抖"><a href="#函数防抖" class="headerlink" title="函数防抖"></a>函数防抖</h2><p>上面讲到了函数防抖的概念，下面我们就用代码实现一个函数防抖方法的封装：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">	<span class="keyword">var</span> timer;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">		<span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">		<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">		timer = <span class="built_in">setTimeout</span>( <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">			fn.<span class="title function_">apply</span>(context, args);</span><br><span class="line">		&#125;, delay)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">	<span class="keyword">let</span> timer;</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">		<span class="keyword">let</span> context = <span class="variable language_">this</span>;</span><br><span class="line">		<span class="keyword">let</span> _args = args;</span><br><span class="line">        <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">		timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">			fn.<span class="title function_">apply</span>(context, _args);</span><br><span class="line">		&#125;, delay);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述方法主要利用了闭包，闭包会被连续的调用，我们在闭包内部对 timer 进行了操作，限制了 fn 的执行次数。<br>但是上述方法也有一个缺点，如果我们在滚动页面时，触发一个方法执行，页面如果一直处于滚动状态，那么添加的方法，就一直无法触发。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay, time</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> previous = <span class="literal">null</span>; <span class="comment">//记录上一次运行时间</span></span><br><span class="line">	<span class="keyword">var</span> timer = <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">		<span class="keyword">if</span>(!previous) previous = now;</span><br><span class="line">		<span class="comment">//当上一次执行时间间隔与当前时间差大于设置的执行时间间隔，主动执行一次</span></span><br><span class="line">		<span class="keyword">if</span>(now - previous &gt; time)&#123;</span><br><span class="line">			<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">			<span class="title function_">fn</span>();</span><br><span class="line">			previous = now;<span class="comment">//执行后，记录当前的执行时间</span></span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">			timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line">				<span class="title function_">fn</span>();</span><br><span class="line">			&#125;, delay)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数节流"><a href="#函数节流" class="headerlink" title="函数节流"></a>函数节流</h2><p>说起函数就留，就不得不提起当初看红宝书（javascript高级程序设计）时，给列举了这样一个方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (<span class="params">method, context</span>) &#123;</span><br><span class="line">	<span class="built_in">clearTimeout</span>(method.<span class="property">tId</span>);</span><br><span class="line">	method.<span class="property">tId</span> = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		method.<span class="title function_">call</span>(context)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>是不是有点眼熟呢？这个分明是函数防抖的一种实现啊，不知道为什么这么大的一个失误，竟然一直没有被改正。</p>
<p>那么真正的函数节流该怎么实现呢？</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span> (<span class="params">fn, threshhold</span>)&#123;</span><br><span class="line">	<span class="keyword">var</span> last, timer</span><br><span class="line">	threshhold || (threshhold = <span class="number">250</span>)</span><br><span class="line">	<span class="keyword">return</span> <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">		<span class="keyword">var</span> context = <span class="variable language_">this</span>;</span><br><span class="line">		<span class="keyword">var</span> args = <span class="variable language_">arguments</span>;</span><br><span class="line">		<span class="keyword">var</span> now = +<span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">		<span class="comment">//如果距离上次执行 fn 方法的时间小于 threshhold，就clearTimeout</span></span><br><span class="line">		<span class="keyword">if</span>(last &amp;&amp; now &lt; last + threshhold) &#123;</span><br><span class="line">			<span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">			<span class="comment">//保证在当前时间区间结束后，再执行一次 fn</span></span><br><span class="line">			timer = <span class="built_in">setTimeout</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">				last = now;</span><br><span class="line">				fn.<span class="title function_">apply</span>(context, args)</span><br><span class="line">			&#125;, threshhold)</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			last = now;</span><br><span class="line">			fn.<span class="title function_">apply</span>(context, args)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上述代码中，关键在于if else中，每次回调执行后，需要保存执行函数的时间戳，为了计算以后的事件触发回调时与之前执行回调函数的时间戳的间隔，从而判断是否需要执行回调。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function throttle(fn, threshold)&#123;</span><br><span class="line">	var flag = true;</span><br><span class="line">	return function () &#123;</span><br><span class="line">		var context = this;</span><br><span class="line">		var args = arguments;</span><br><span class="line">		if(!flag) return;</span><br><span class="line">		flag = false;</span><br><span class="line">		setTimeout(function ()&#123;</span><br><span class="line">			fn.apply(context, args)</span><br><span class="line">			flag = true</span><br><span class="line">		&#125;, threshold)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>上面这个为我日常使用的简化版throttle，通过一个 flag 标志位实现对时间间隔的判断。</p>
<p><em>参考</em></p>
<ul>
<li><a href="https://rockjins.js.org/2017/02/21/2017-02-21-debounce-function/">函数节流、函数防抖实现原理分析</a></li>
<li><a href="https://segmentfault.com/a/1190000008768202">函数节流与函数防抖</a></li>
<li><a href="https://github.com/lishengzxc/bblog/issues/7">Javascript 的 Debounce 和 Throttle 的原理及实现</a></li>
</ul>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
</search>
